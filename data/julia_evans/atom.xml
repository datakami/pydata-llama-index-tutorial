<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self"/>
  <link href="http://jvns.ca"/>
  <updated>2023-08-11T08:13:16+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on using a single-person Mastodon server]]></title>
    <link href="https://jvns.ca/blog/2023/08/11/some-notes-on-mastodon/"/>
    <updated>2023-08-11T08:13:16+00:00</updated>
    <id>https://jvns.ca/blog/2023/08/11/some-notes-on-mastodon/</id>
    <content type="html"><![CDATA[

<p>I started using Mastodon back in November, and it&rsquo;s the Twitter alternative
where I&rsquo;ve been spending most of my time recently, mostly because the Fediverse
is where a lot of the Linux nerds seem to be right now.</p>

<p>I&rsquo;ve found Mastodon quite a bit more confusing than Twitter because it&rsquo;s a
distributed system, so here are a few technical things I&rsquo;ve learned about it
over the last 10 months. I&rsquo;ll mostly talk about what using a single-person
server has been like for me, as well as a couple of notes about the API, DMs
and ActivityPub.</p>

<p>I might have made some mistakes, please let me know if I&rsquo;ve gotten anything
wrong!</p>

<h3 id="what-s-a-mastodon-instance">what&rsquo;s a mastodon instance?</h3>

<p>First: Mastodon is a decentralized collection of independently run servers
instead of One Big Server. The software is <a href="https://github.com/mastodon/mastodon">open source</a>.</p>

<p>In general, if you have an account on one server (like <code>ruby.social</code>), you
<strong>can</strong> follow people on another server (like <code>hachyderm.io</code>), and they can
follow you.</p>

<p>I&rsquo;m going to use the terms &ldquo;Mastodon server&rdquo; and &ldquo;Mastodon instance&rdquo;
interchangeably in this post.</p>

<h3 id="on-choosing-a-mastodon-instance">on choosing a Mastodon instance</h3>

<p>These were the things I was concerned about when choosing an instance:</p>

<ol>
<li>An instance name that I was comfortable being part of my online
identity. For example, I probably wouldn&rsquo;t want to be
<code>@b0rk@infosec.exchange</code> because I&rsquo;m not an infosec person.</li>
<li>The server&rsquo;s stability. Most servers are volunteer-run, and volunteer
moderation work can be exhausting &ndash; will the server really be around in a few
years? For example <a href="https://ashfurrow.com/blog/mastodon-technology-shutdown/">mastodon.technology</a>  and mastodon.lol shut down.</li>
<li>The admins&rsquo; moderation policies.</li>
<li>That server&rsquo;s general reputation with other servers. I started out on
<code>mastodon.social</code>, but some servers choose to block or limit mastodon.social
for various reasons</li>
<li>The community: every Mastodon instance has a local timeline with all posts
from users on that instance, would I be interested in reading the local
timeline?</li>
<li>Whether my account would be a burden for the admin of that server (since I have a lot of followers)</li>
</ol>

<p>In the end, I chose to run my own mastodon server because it seemed simplest &ndash;
I could pick a domain I liked, and I knew I&rsquo;d definitely agree with the
moderation decisions because I&rsquo;d be in charge.</p>

<p>I&rsquo;m not going to give server recommendations here, but here&rsquo;s a list of the <a href="https://gist.github.com/jvns/5eb0a58319b93049a8c014433766edd3">top 200 most common servers people who follow me use</a>.</p>

<h3 id="using-your-own-domain">using your own domain</h3>

<p>One big thing I wondered was &ndash; can I use my own domain (and have the username <code>@b0rk@jvns.ca</code> or something) but be on someone else&rsquo;s Mastodon server?</p>

<p>The answer to this seems to be basically &ldquo;no&rdquo;: if you want to use your own
domain on Mastodon, you need to run your own server. (you can <a href="https://blog.maartenballiauw.be/post/2022/11/05/mastodon-own-donain-without-hosting-server.html">kind of do this</a>,
but it&rsquo;s more like an alias or redirect &ndash; if I used that method to direct <code>b0rk@jvns.ca</code> to <code>b0rk@mastodon.social</code>, my
posts would still show up as being from <code>b0rk@mastodon.social</code>)</p>

<p>There&rsquo;s also other
ActivityPub software (<a href="https://jointakahe.org/">Takahē</a>) that supports people
bringing their own domain in a first-class way.</p>

<h3 id="notes-on-having-my-own-server">notes on having my own server</h3>

<p>I really wanted to have a way to use my own domain name for identity, but to
share server hosting costs with other people. This isn&rsquo;t possible on Mastodon
right now, so I decided to set up my own server instead.</p>

<p>I chose to run a Mastodon server (instead of some other ActivityPub
implementation) because Mastodon is the most popular one. Good managed
Mastodon hosting is readily available, there are tons of options for client
apps, and I know for sure that my server will work well with other people&rsquo;s
servers.</p>

<p>I use <a href="https://masto.host/">masto.host</a> for Mastodon hosting, and it&rsquo;s been great so
far. I have nothing interesting to say about what it&rsquo;s like to operate a
Mastodon instance because I know literally nothing about it. Masto.host handles
all of the server administration and Mastodon updates, and I never think about
it at all.</p>

<p>Right now I&rsquo;m on their $19/month (&ldquo;Star&rdquo;) plan, but it&rsquo;s possible I could use a
smaller plan with no problems. Right now their cheapest plan is $6/month and I
expect that would be fine for someone with a smaller account.</p>

<p>Some things I was worried about when embarking on my own Mastodon server:</p>

<ul>
<li>I wanted to run the server at <code>social.jvns.ca</code>, but I wanted my username to
be <code>b0rk@jvns.ca</code> instead of <code>b0rk@social.jvns.ca</code>. To get this to work I
followed these <a href="https://jacobian.org/til/my-mastodon-instance/">Setting up a personal fediverse ID</a> directions from
Jacob Kaplan-Moss and it&rsquo;s been fine.</li>
<li>The administration burden of running my own server. I imported a small list
of servers to block/defederate from but didn&rsquo;t do anything else. That&rsquo;s been
fine.</li>
<li>Reply and profile visibility. This has been annoying and we&rsquo;ll talk about it next</li>
</ul>

<h3 id="downsides-to-being-on-a-single-person-server">downsides to being on a single-person server</h3>

<p>Being on a 1-person server has some significant downsides. To understand
why, you need to understand a little about how Mastodon works.</p>

<p>Every Mastodon server has a database of posts. Servers only have posts that
they were explicitly sent by another server in their database.</p>

<p>Some reasons that servers might receive posts:</p>

<ul>
<li>someone on the server follows a user</li>
<li>a post mentions someone on the server</li>
</ul>

<p>As a 1-person server, my server does not receive that many posts! I only get
posts from people I follow or posts that explicitly mention me in some way.</p>

<p>The causes several problems:</p>

<ol>
<li>when I visit someone&rsquo;s profile on Mastodon who I don&rsquo;t already follow, my
server will not fetch the profile&rsquo;s content (it&rsquo;ll fetch their profile
picture, description, and pinned posts, but not any of their post history).
So their profile appears as if they&rsquo;ve never posted anything</li>
<li>bad reply visibility: when I look at the replies to somebody else&rsquo;s post
(even if I follow them!), I don&rsquo;t see all of the replies, only the ones
which have made it to my server. If you want to understand the exact rules
about who can see which replies (which are quite complicated!), <a href="https://seb.jambor.dev/posts/understanding-activitypub-part-3-the-state-of-mastodon/">here&rsquo;s a great deep dive</a> by Sebastian Jambor.
I think it&rsquo;s possible to end up in a state where no one person can see all
of the replies, including the original poster.</li>
<li>favourite and boost accounts are inaccurate &ndash; usually posts show up having
at most 1 or 2 favourites / boosts, even if the post was actually favourite
or boosted hundreds of times. I think this is because it only counts
favourites/boosts from people I follow.</li>
</ol>

<p>All of these things will happen to users of any small Mastodon server, not just
1-person servers.</p>

<h3 id="bad-reply-visibility-makes-conversations-harder">bad reply visibility makes conversations harder</h3>

<p>A lot of people are on smaller servers, so when they&rsquo;re participating in a
conversation, they can&rsquo;t see all the replies to the post.</p>

<p>This means that replies can get pretty repetitive because people literally
cannot see each other&rsquo;s replies. This is especially annoying for posts that are
popular or controversial, because the person who made the post has to keep
reading similar replies over and over again by people who think they&rsquo;re making
the point for the first time.</p>

<p>To get around this (as a reader), you can click &ldquo;open link to post&rdquo; or something in your
Mastodon client, which will open up the page on the poster&rsquo;s server where you
can read all of the replies. It&rsquo;s pretty annoying though.</p>

<p>As a poster, I&rsquo;ve tried to reduce repetitiveness in replies by:</p>

<ul>
<li>putting requests in my posts like &ldquo;(no need to reply if you don’t remember, or if you’ve been using the command line comfortably for 15 years — this question isn’t for you :) )&rdquo;</li>
<li>occasionally editing my posts to include very common replies</li>
<li>very occasionally deleting the post if it gets too out of hand</li>
</ul>

<p>The Mastodon devs are extremely aware of these issues, there are a bunch of github issues about them:</p>

<ul>
<li><a href="https://github.com/mastodon/mastodon/issues/34">backfill statuses when first subscribed</a></li>
<li><a href="https://github.com/mastodon/mastodon/issues/9409">fetch whole conversation threads</a></li>
</ul>

<p>My guess is that there are technical reasons these features are difficult to
add because those issues have been open for 5-7 years.</p>

<p>The Mastodon devs have said that they plan to improve reply fetching, but that
it requires a significant amount of work.</p>

<h3 id="some-visibility-workarounds">some visibility workarounds</h3>

<p>Some people have built workarounds for fetching profiles / replies.</p>

<ul>
<li><a href="https://blog.thms.uk/fedifetcher">Fedifetcher</a></li>
<li><a href="https://combine.social/">combine.social</a></li>
</ul>

<p>Also, there are a couple of Mastodon clients which will proactively fetch replies. For iOS:</p>

<ul>
<li>Mammoth does it automatically</li>
<li>Mona will fetch posts if I click &ldquo;load from remote server&rdquo; manually</li>
</ul>

<p>I haven&rsquo;t tried those yet though.</p>

<h3 id="other-downsides-of-running-your-own-server-discovery-is-much-harder">other downsides of running your own server: discovery is much harder</h3>

<p>Mastodon instances have a &ldquo;local timeline&rdquo; where you can see everything other
people on the server are posting, and a &ldquo;federated timeline&rdquo; which shows sort
of a combined feed from everyone followed by anyone on the server. This means
that you can see trending posts and get an idea of what&rsquo;s going on and find
people to follow. You don&rsquo;t get that if you&rsquo;re on a 1-person
server &ndash; it&rsquo;s just me talking to myself! (plus occasional interjections from
<a href="https://social.jvns.ca/@b0rk_reruns">my reruns bot</a>).</p>

<p>Some workarounds people mentioned for this:</p>

<ul>
<li>you can populate your federated timeline with posts from another instance by
using a <strong>relay</strong>. I haven&rsquo;t done this but someone else said they use
<a href="https://relay.fedi.buzz">FediBuzz</a> and I might try it out.</li>
<li>some mastodon clients (like apparently Moshidon on Android) let you follow other instances</li>
</ul>

<p>If anyone else on small servers has suggestions for how to make discovery
easier I&rsquo;d love to hear them.</p>

<h3 id="account-migration">account migration</h3>

<p>When I moved to my own server from <code>mastodon.social</code>, I needed to run an account migration to move over my followers. First, here&rsquo;s how migration works:</p>

<ol>
<li>Account migration <strong>does not</strong> move over your posts. All of my posts stayed
on my old account. This is part of why I moved to running my own server
&ndash; I didn&rsquo;t want to ever lose my posts a second time.</li>
<li>Account migration <strong>does not</strong> move over the list of people you
follow/mute/block. But you can import/export that list in your Mastodon
settings so it&rsquo;s not a big deal. If you follow private accounts they&rsquo;ll have
to re-approve your follow request.</li>
<li>Account migration <strong>does</strong> move over your followers</li>
</ol>

<p>The follower move was the part I was most worried about. Here&rsquo;s how it turned out:</p>

<ul>
<li>over ~24 hours, most of my followers moved to the new account</li>
<li>one or two servers did not get the message about the account migration for
some reason, so about 2000 followers were &ldquo;stuck&rdquo; and didn&rsquo;t migrate. I
fixed this by waiting 30 days and re-running the account migration, which
moved over most of the remaining followers. There&rsquo;s also a <a href="https://github.com/mastodon/mastodon/issues/22281">tootctl command</a> that the admin of
the <strong>old instance</strong> can run to retry the migration</li>
<li>about 200 of my followers never migrated over, I think because they&rsquo;re using
ActivityPub software other than Mastodon which doesn&rsquo;t support account
migration. You can see the <a href="https://mastodon.social/@b0rk">old account here</a></li>
</ul>

<h3 id="using-the-mastodon-api-is-great">using the Mastodon API is great</h3>

<p>One thing I love about Mastodon is &ndash; it has an API that&rsquo;s MUCH easier to use
than Twitter&rsquo;s API. I&rsquo;ve always been frustrated with how difficult it is to
navigate large Twitter threads, so I made a small <a href="https://mastodon-thread-view.jvns.ca/">mastodon thread view</a> website that lets you log into
your Mastodon account. It&rsquo;s pretty janky and it&rsquo;s really only made for me to
use, but I&rsquo;ve really appreciated the ability to write my own janky software to
improve my Mastodon experience.</p>

<p>Some notes on the Mastodon API:</p>

<ul>
<li>You can build Mastodon client software totally on the frontend in Javascript, which is really cool.</li>
<li>I couldn&rsquo;t find a vanilla Javascript Mastodon client, so I <a href="https://github.com/jvns/mastodon-threaded-replies/blob/main/mastodon.js">wrote a crappy one</a></li>
<li><a href="https://docs.joinmastodon.org/client/intro/">API docs are here</a></li>
<li>Here&rsquo;s a <a href="https://gist.github.com/jvns/0fe51383cbbb63e94177c60f1e0371c6">tiny Python script I used to list all my Mastodon followers</a>,
which also serves as a simple example of how easy using the API is.</li>
<li>The best documentation I could find for which OAuth scopes correspond to which API endpoints is <a href="https://github.com/mastodon/mastodon/pull/7929">this github issue</a></li>
</ul>

<p>Next I&rsquo;ll talk about a few general things about Mastodon that confused or
surprised me that aren&rsquo;t specific to being on a single-person instance.</p>

<h3 id="dms-are-weird">DMs are weird</h3>

<p>The way Mastodon DMs work surprised me in a few ways:</p>

<ul>
<li>Technically DMs are just regular posts with visibility limited to the
people mentioned in the post. This means that if you accidentally mention
someone in a DM (&ldquo;@x is such a jerk&rdquo;), it&rsquo;s possible to accidentally send the
message to them</li>
<li>DMs aren&rsquo;t very private: the admins on the sending and receiving servers can
technically read your DMs if they have access to the database. So they&rsquo;re not
appropriate for sensitive information.</li>
<li>Turning off DMs is weird. Personally I don&rsquo;t like receiving DMs from
strangers &ndash; it&rsquo;s too much to keep track of and I&rsquo;d prefer that people email
me. On Twitter, I can just turn it off and people won&rsquo;t see an option to DM
me. But on Mastodon, when I turn off notifications for DMs, anyone can still
&ldquo;DM&rdquo; me, but the message will go into a black hole and I&rsquo;ll never see it. I
put a note in my profile about this.</li>
</ul>

<h3 id="defederation-and-limiting">defederation and limiting</h3>

<p>There are a couple of different ways for a server to block another Mastodon
server. I haven&rsquo;t really had to do this much but people talk about it a lot and I was confused about the difference, so:</p>

<ul>
<li>A server can <strong>defederate</strong> from another server (this seems to be called <a href="https://docs.joinmastodon.org/admin/moderation/#suspend-server">suspend</a> in the Mastodon docs). This means that nobody on a server can follow someone from the other server.</li>
<li>A server can <strong><a href="https://docs.joinmastodon.org/admin/moderation/#limit-user">limit</a></strong> (also known as &ldquo;silence&rdquo;) a user or server. This means that content from that user is only visible to
that user&rsquo;s followers &ndash; people can&rsquo;t discover the user through retweets (aka &ldquo;boosts&rdquo; on Mastodon).</li>
</ul>

<p>One thing that wasn&rsquo;t obvious to me is that who servers defederate / limit is
sometimes hidden, so it&rsquo;s hard to suss out what&rsquo;s going on if you&rsquo;re
considering joining a server, or trying to understand why you can&rsquo;t see certain
posts.</p>

<h3 id="there-s-no-search-for-posts">there&rsquo;s no search for posts</h3>

<p>There&rsquo;s no way to search past posts you&rsquo;ve read. If I see something interesting
on my timeline and want to find it later, I usually can&rsquo;t. (Mastodon has a
<a href="https://docs.joinmastodon.org/admin/optional/elasticsearch/">Elasticsearch-based search feature</a>, but it only allows you to search your own posts, your mentions, your
favourites, and your bookmarks)</p>

<p>These limitations on search are intentional (and a very common source of arguments) &ndash; it&rsquo;s a privacy / safety issue.
Here&rsquo;s a <a href="https://www.tbray.org/ongoing/When/202x/2022/12/30/Mastodon-Privacy-and-Search">summary from Tim Bray</a>
with lots of links.</p>

<p>It would be personally convenient for me to be able to search more easily but I respect folks&rsquo; safety concerns so I&rsquo;ll leave it at that.</p>

<p>My understanding is that the Mastodon devs are planning to add opt-in search
for public posts relatively soon.</p>

<h3 id="other-activitypub-software">other ActivityPub software</h3>

<p>We&rsquo;ve been talking about Mastodon a lot, but not everyone who I follow is using
Mastodon: Mastodon uses a protocol called <a href="https://activitypub.rocks/">ActivityPub</a> to distribute messages.</p>

<p>Here are some examples of other software I see people talking about, in no particular order:</p>

<ul>
<li><a href="https://calckey.org/">Calckey</a></li>
<li><a href="https://akkoma.social/">Akkoma</a></li>
<li><a href="https://gotosocial.org/">gotosocial</a></li>
<li><a href="https://jointakahe.org/">Takahē</a></li>
<li><a href="https://writefreely.org/">writefreely</a></li>
<li><a href="https://pixelfed.org/">pixelfed</a> (for images)</li>
</ul>

<p>I&rsquo;m probably missing a bunch of important ones.</p>

<h3 id="what-s-the-difference-between-mastodon-and-other-activitypub-software">what&rsquo;s the difference between Mastodon and other ActivityPub software?</h3>

<p>This confused me for a while, and I&rsquo;m still not super clear on how ActivityPub works. What I&rsquo;ve understood is:</p>

<ul>
<li>ActivityPub is a protocol (you can explore how it works with blinry&rsquo;s nice <a href="https://json.blinry.org/#https://chaos.social/users/blinry">JSON explorer</a>)</li>
<li>Mastodon <strong>servers</strong> communicate with each other (and with other ActivityPub servers) using ActivityPub</li>
<li>Mastodon <strong>clients</strong> communicate with their server using the Mastodon API, which is its own thing</li>
<li>There&rsquo;s also software like <a href="https://github.com/superseriousbusiness/gotosocial">GoToSocial</a> that aims to be compatible with the Mastodon API, so that you can use a Mastodon client with it</li>
</ul>

<h3 id="more-mastodon-resources">more mastodon resources</h3>

<ul>
<li><a href="https://fedi.tips/">Fedi.Tips</a> seems to be a great introduction</li>
<li>I think you can still use <a href="https://fedifinder.glitch.me/">FediFinder</a> to find folks you followed on Twitter on Mastodon</li>
<li>I&rsquo;ve been using the <a href="https://tapbots.com/ivory/">Ivory</a> client on iOS, but
there are lots of great clients. <a href="https://elk.zone/">Elk</a> is an alternative
web client that folks seem to like.</li>
</ul>

<p>I haven&rsquo;t written here about what Mastodon culture is like because other people
have done a much better job of talking about it than me, but of course it&rsquo;s is
the biggest thing that affects your experience and it was the thing that took
me longest to get a handle on. A few links:</p>

<ul>
<li>Erin Kissane on <a href="https://erinkissane.com/mastodon-is-easy-and-fun-except-when-it-isnt">frictions people run into when joining Mastodon</a></li>
<li>Kyle Kingsbury wrote some great <a href="https://blog.woof.group/mods/">moderation guidelines for woof.group</a> (note: woof.group is a LGBTQ+ leather instance, be prepared to see lots of NSFW posts if you visit it)</li>
<li>Mekka Okereke writes <a href="https://hachyderm.io/@mekkaokereke/110273797004251326">lots of great posts about issues Black people encounter on Mastodon</a> (though they&rsquo;re all on Mastodon so it&rsquo;s a little hard to navigate)</li>
</ul>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I don&rsquo;t regret setting up a single-user server &ndash; even though it&rsquo;s
inconvenient, it&rsquo;s important to me to have control over my social media. I
think &ldquo;have control over my social media&rdquo; is more important to me than it is to
most other people though, because I use Twitter/Mastodon a lot for work.</p>

<p>I am happy that I didn&rsquo;t <em>start out</em> on a single-user server though &ndash;  I think
it would have made getting started on Mastodon a lot more difficult.</p>

<p>Mastodon is pretty rough around the edges sometimes but I&rsquo;m able to have more
interesting conversations about computers there than I am on Twitter (or
Bluesky), so that&rsquo;s where I&rsquo;m staying for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What helps people get comfortable on the command line?]]></title>
    <link href="https://jvns.ca/blog/2023/08/08/what-helps-people-get-comfortable-on-the-command-line-/"/>
    <updated>2023-08-08T08:30:40+00:00</updated>
    <id>https://jvns.ca/blog/2023/08/08/what-helps-people-get-comfortable-on-the-command-line-/</id>
    <content type="html"><![CDATA[

<p>Sometimes I talk to friends who need to use the command line, but are
intimidated by it. I never really feel like I have good advice (I&rsquo;ve been using
the command line for too long), and so I asked some people <a href="https://social.jvns.ca/@b0rk/110842645317766338">on Mastodon</a>:</p>

<blockquote>
<p>if you just stopped being scared of the command line in the last year or
three — what helped you?</p>

<p>(no need to reply if you don’t remember, or if you’ve been using the command
line comfortably for 15 years — this question isn’t for you :) )</p>
</blockquote>

<p>This list is still a bit shorter than I would like, but I&rsquo;m posting it in the
hopes that I can collect some more answers. There obviously isn&rsquo;t one single
thing that works for everyone &ndash; different people take different paths.</p>

<p>I think there are three parts to getting comfortable: <strong>reducing risks</strong>, <strong>motivation</strong> and <strong>resources</strong>. I&rsquo;ll
start with risks, then a couple of motivations and then list some resources.</p>

<h3 id="ways-to-reduce-risk">ways to reduce risk</h3>

<p>A lot of people are (very rightfully!) concerned about accidentally doing some
destructive action on the command line that they can&rsquo;t undo.</p>

<p>A few strategies people said helped them reduce risks:</p>

<ul>
<li>regular backups (one person mentioned they accidentally deleted their entire
home directory last week in a command line mishap, but it was okay because
they had a backup)</li>
<li>For code, using git as much as possible</li>
<li>Aliasing <code>rm</code> to a tool like <a href="https://launchpad.net/safe-rm">safe-rm</a> or <a href="https://github.com/PhrozenByte/rmtrash">rmtrash</a> so that you can&rsquo;t accidentally delete something you shouldn&rsquo;t (or just <code>rm -i</code>)</li>
<li>Mostly avoid using wildcards, use tab completion instead. (my shell will tab complete <code>rm *.txt</code> and show me exactly what it&rsquo;s going to remove)</li>
<li>Fancy terminal prompts that tell you the current directory, machine you&rsquo;re on, git branch, and whether you&rsquo;re root</li>
<li>Making a copy of files if you&rsquo;re planning to run an untested / dangerous command on them</li>
<li>Having a dedicated test machine (like a cheap old Linux computer or Raspberry Pi) for particularly dangerous testing, like testing backup software or partitioning</li>
<li>Use <code>--dry-run</code> options for dangerous commands, if they&rsquo;re available</li>
<li>Build your own <code>--dry-run</code> options into your shell scripts</li>
</ul>

<h3 id="a-killer-app">a &ldquo;killer app&rdquo;</h3>

<p>A few people mentioned a &ldquo;killer command line app&rdquo; that motivated them to start
spending more time on the command line. For example:</p>

<ul>
<li><a href="https://github.com/BurntSushi/ripgrep">ripgrep</a></li>
<li>jq</li>
<li>wget / curl</li>
<li>git (some folks found they preferred the git CLI to using a GUI)</li>
<li>ffmpeg (for video work)</li>
<li><a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a></li>
<li>hard drive data recovery tools (from <a href="https://github.com/summeremacs/public/blob/main/20230629T180135--how-i-came-to-use-emacs-and-other-things__emacs_explanation_linux_origin_raspberrypi_story_terminal.org">this great story</a>)</li>
</ul>

<p>A couple of people also mentioned getting frustrated with GUI tools (like heavy
IDEs that use all your RAM and crash your computer) and being motivated to
replace them with much lighter weight command line tools.</p>

<h3 id="inspiring-command-line-wizardry">inspiring command line wizardry</h3>

<p>One person mentioned being motivated by seeing cool stuff other people were
doing with the command line, like:</p>

<ul>
<li><a href="https://adamdrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html">Command-line Tools can be 235x Faster than your Hadoop Cluster</a></li>
<li><a href="https://www.youtube.com/watch?v=ZQnyApKysg4&amp;feature=youtu.be">this &ldquo;command-line chainsaw&rdquo; talk by Gary Bernhardt</a></li>
</ul>

<h3 id="explain-shell">explain shell</h3>

<p>Several people mentioned <a href="https://explainshell.com/">explainshell</a> where you
can paste in any shell incantation and get it to break it down into different
parts.</p>

<h3 id="history-tab-completion-etc">history, tab completion, etc:</h3>

<p>There were lots of little tips and tricks mentioned that make it a lot easier
to work on the command line, like:</p>

<ul>
<li>up arrow to see the previous command</li>
<li>Ctrl+R to search your bash history</li>
<li>navigating inside a line with <code>Ctrl+w</code> (to delete a word), <code>Ctrl+a</code> (to go to
the beginning of the line), <code>Ctrl+e</code> (to go to the end), and <code>Ctrl+left arrow</code> / <code>Ctrl+right arrow</code> (to
jump back/forward a word)</li>
<li>setting bash history to unlimited</li>
<li><code>cd -</code> to go back to the previous directory</li>
<li>tab completion of filenames and command names</li>
<li>learning how to use a pager like <code>less</code> to read man pages or other large text files (how to search, scroll, etc)</li>
<li>backing up configuration files before editing them</li>
<li>using pbcopy/pbpaste on Mac OS to copy/paste from your clipboard to stdout/stdin</li>
<li>on Mac OS, you can drag a folder from the Finder into the terminal to get its path</li>
</ul>

<h3 id="fzf">fzf</h3>

<p>Lots of mentions of using <a href="https://github.com/junegunn/fzf">fzf</a> as a better
way to fuzzy search shell history. Some other things people mentioned using fzf for:</p>

<ul>
<li>picking git branches (<code>git checkout  $(git for-each-ref --format='%(refname:short)' refs/heads/ | fzf)</code>)</li>
<li>quickly finding files to edit (<code>nvim $(fzf)</code>)</li>
<li>switching kubernetes contexts (<code>kubectl config use-context $(kubectl config get-contexts -o name | fzf --height=10 --prompt=&quot;Kubernetes Context&gt; &quot;)</code>)</li>
<li>picking a specific test to run from a test suite</li>
</ul>

<p>The general pattern here is that you use fzf to pick something (a file, a git
branch, a command line argument), fzf prints the thing you picked to stdout,
and then you insert that as the command line argument to another command.</p>

<p>You can also use fzf as an tool to automatically preview the output and quickly iterate, for example:</p>

<ul>
<li>automatically previewing jq output (<code>echo '' | fzf --preview &quot;jq {q} &lt; YOURFILE.json&quot;</code>)</li>
<li>or for <code>sed</code> (<code>echo '' | fzf --preview &quot;sed {q} YOURFILE&quot;</code>)</li>
<li>or for <code>awk</code> (<code>echo '' | fzf --preview &quot;awk {q} YOURFILE&quot;</code>)</li>
</ul>

<p>You get the idea.</p>

<p>In general folks will generally define an alias for their <code>fzf</code> incantations so
you can type <code>gcb</code> or something to quickly pick a git branch to check out.</p>

<h3 id="raspberry-pi">raspberry pi</h3>

<p>Some people started using a Raspberry Pi, where it&rsquo;s safer to experiment
without worrying about breaking your computer (you can just erase the SD card and start over!)</p>

<h3 id="a-fancy-shell-setup">a fancy shell setup</h3>

<p>Lots of people said they got more comfortable with the command line
when they started using a more user-friendly shell setup like
<a href="https://ohmyz.sh/">oh-my-zsh</a> or <a href="https://fishshell.com/">fish</a>. I really
agree with this one &ndash; I&rsquo;ve been using fish for 10 years and I love it.</p>

<p>A couple of other things you can do here:</p>

<ul>
<li>some folks said that making their terminal prettier helped them feel more
comfortable (&ldquo;make it pink!&rdquo;).</li>
<li>set up a fancy shell prompt to give you more information (for example you can
make the prompt red when a command fails). Specifically <a href="https://www.reddit.com/r/zsh/comments/dsh1g3/new_powerlevel10k_feature_transient_prompt/">transient prompts</a>
(where you set a super fancy prompt for the current command, but a much
simpler one for past commands) seem really nice.</li>
</ul>

<p>Some tools for theming your terminal:</p>

<ul>
<li>I use <a href="https://github.com/chriskempson/base16-shell">base16-shell</a></li>
<li><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a> is a popular fancy zsh theme which has transient prompts</li>
<li><a href="https://github.com/starship/starship">starship</a> is a fancy prompt tool</li>
<li>on a Mac, I think <a href="https://iterm2.com/">iTerm2</a> is easier to customize than the default terminal</li>
</ul>

<h3 id="a-fancy-file-manager">a fancy file manager</h3>

<p>A few people mentioned fancy terminal file managers like
<a href="https://github.com/ranger/ranger">ranger</a> or
<a href="https://github.com/jarun/nnn">nnn</a>, which I hadn&rsquo;t heard of.</p>

<h3 id="a-helpful-friend-or-coworker">a helpful friend or coworker</h3>

<p>Someone who can answer beginner questions and give you pointers is invaluable.</p>

<h3 id="shoulder-surfing">shoulder surfing</h3>

<p>Several mentions of watching someone more experienced using the terminal &ndash;
there are lots of little things that experienced users don&rsquo;t even realize
they&rsquo;re doing which you can pick up.</p>

<h3 id="aliases">aliases</h3>

<p>Lots of people said that making their own aliases or scripts for commonly used
tasks felt like a magical &ldquo;a ha!&rdquo; moment, because:</p>

<ul>
<li>they don&rsquo;t have to remember the syntax</li>
<li>then they have a list of their most commonly used commands that they can summon easily</li>
</ul>

<h3 id="cheat-sheets-to-get-examples">cheat sheets to get examples</h3>

<p>A lot of man pages don&rsquo;t have examples, for example the <a href="https://linux.die.net/man/1/s_client">openssl s_client</a> man page has no examples.
This makes it a lot harder to get started!</p>

<p>People mentioned a couple of cheat sheet tools, like:</p>

<ul>
<li><a href="https://tldr.sh/">tldr.sh</a></li>
<li><a href="https://github.com/cheat/cheat">cheat</a> (which has the bonus of being editable &ndash; you can add your own commands to reference later)</li>
<li><a href="http://ratfactor.com/cards/um">um</a> (an incredibly minimal system that you have to build yourself)</li>
</ul>

<p>For example the <a href="https://github.com/cheat/cheatsheets/blob/master/openssl">cheat page for openssl</a> is really
great &ndash; I think it includes almost everything I&rsquo;ve ever actually used openssl
for in practice (except the <code>-servername</code> option for <code>openssl s_client</code>).</p>

<p>One person said that they configured their <code>.bash_profile</code> to print out a cheat
sheet every time they log in.</p>

<h3 id="don-t-try-to-memorize">don&rsquo;t try to memorize</h3>

<p>A couple of people said that they needed to change their approach &ndash; instead of
trying to memorize all the commands, they realized they could just look up
commands as needed and they&rsquo;d naturally memorize the ones they used the most
over time.</p>

<p>(I actually recently had the exact same realization about learning to read x86
assembly &ndash; I was taking a class and the instructor said &ldquo;yeah, just look
everything up every time to start, eventually you&rsquo;ll learn the most common
instructions by heart&rdquo;)</p>

<p>Some people also said the opposite &ndash; that they used a spaced repetition app
like Anki to memorize commonly used commands.</p>

<h3 id="vim">vim</h3>

<p>One person mentioned that they started using vim on the command line to edit
files, and once they were using a terminal text editor it felt more natural to
use the command line for other things too.</p>

<p>Also apparently there&rsquo;s a new editor called
<a href="https://micro-editor.github.io/">micro</a> which is like a nicer version of
pico/nano, for folks who don&rsquo;t want to learn emacs or vim.</p>

<h3 id="use-linux-on-the-desktop">use Linux on the desktop</h3>

<p>One person said that they started using Linux as their main daily driver, and
having to fix Linux issues helped them learn. That&rsquo;s also how I got comfortable
with the command too back in ~2004 (I was really into installing lots of
different Linux distributions to try to find my favourite one), but my guess is
that it&rsquo;s not the most popular strategy these days.</p>

<h3 id="being-forced-to-only-use-the-terminal">being forced to only use the terminal</h3>

<p>Some people said that they took a university class where the professor made
them do everything in the terminal, or that they created a rule for themselves
that they had to do all their work in the terminal for a while.</p>

<h3 id="workshops">workshops</h3>

<p>A couple of people said that workshops like <a href="https://software-carpentry.org/">Software Carpentry</a>
workshops (an introduction to the command line, git, and Python/R programming
for scientists) helped them get more comfortable with the command line.</p>

<p>You can see the <a href="https://software-carpentry.org/lessons/">software carpentry curriculum here</a>.</p>

<h3 id="books-articles">books &amp; articles</h3>

<p>a few that were mentioned:</p>

<p>articles:</p>

<ul>
<li><a href="https://furbo.org/2014/09/03/the-terminal/">The Terminal</a></li>
<li><a href="http://blog.commandlinekungfu.com/">command line kung fu</a> (has a mix of Unix and Windows command line tips)</li>
</ul>

<p>books:</p>

<ul>
<li><a href="https://www.oreilly.com/library/view/efficient-linux-at/9781098113391/">effective linux at the command line</a></li>
<li>unix power tools (which might be outdated)</li>
<li>The Linux Pocket guide</li>
</ul>

<p>videos:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=IcV9TVb-vF4">CLI tools aren&rsquo;t inherently user-hostile</a>  by Mindy Preston</li>
<li>Gary Bernhardt&rsquo;s <a href="https://www.destroyallsoftware.com/screencasts">destroy all software screencasts</a></li>
<li><a href="https://www.youtube.com/@DistroTube">DistroTube</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some tactics for writing in public]]></title>
    <link href="https://jvns.ca/blog/2023/08/07/tactics-for-writing-in-public/"/>
    <updated>2023-08-07T05:48:45+00:00</updated>
    <id>https://jvns.ca/blog/2023/08/07/tactics-for-writing-in-public/</id>
    <content type="html"><![CDATA[

<p>Someone recently asked me &ndash; &ldquo;how do you deal with writing in public? People on
the internet are such assholes!&rdquo;</p>

<p>I&rsquo;ve often heard the advice &ldquo;don&rsquo;t read the comments&rdquo;, but actually I&rsquo;ve
learned a huge amount from reading internet comments on my posts from strangers
over the years, even if sometimes people are jerks. So I want to explain some
tactics I use to try to make the comments on my posts more informative and
useful to me, and to try to minimize the number of annoying comments I get.</p>

<h3 id="talk-about-facts">talk about facts</h3>

<p>On here I mostly talk about facts &ndash; either facts about computers, or stories
about my experiences using computers.</p>

<p>For example <a href="https://jvns.ca/blog/2016/03/16/tcpdump-is-amazing/">this post</a> about tcpdump contains some basic facts about how to use tcpdump,
as well as an example of how I&rsquo;ve used it in the past.</p>

<p>Talking about facts means I get a lot of fact-based comments like:</p>

<ul>
<li>people sharing their own similar (or different) experiences (&ldquo;I use tcpdump a lot to look at our RTP sequence numbers&rdquo;)</li>
<li>pointers to other resources (&ldquo;the documentation from F5 about tcpdump is great&rdquo;)</li>
<li>other interesting related facts I didn&rsquo;t mention (&ldquo;you can use tcpdump -X
too&rdquo;, &ldquo;netsh on windows is great&rdquo;, &ldquo;you can use <code>sudo tcpdump -s 0 -A
'tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420'</code> to filter for HTTP GET requests)</li>
<li>potential problems or gotchas (&ldquo;be careful about running tcpdump as root, try just setting the required capabilities instead&rdquo;)</li>
<li>questions (&ldquo;Is there a way to place the BPF filter after IP packet reassembly?&rdquo; or &ldquo;what&rsquo;s the advantage of tcpdump over wireshark?&rdquo;)</li>
<li>mistakes I made</li>
</ul>

<p>In general, I&rsquo;d say that people&rsquo;s comments about facts tend to stay pretty
normal. The main kinds of negative comments I get about facts are:</p>

<ul>
<li>occasionally people get a little rude about facts I didn&rsquo;t mention (&ldquo;Didn&rsquo;t
use -n in any of the examples&hellip;please&hellip;&ldquo;). I think I didn&rsquo;t mention <code>-n</code> in
that post because at the time I didn&rsquo;t know why the <code>-n</code> flag was useful
(it&rsquo;s useful because it turns off this annoying reverse DNS lookup that
tcpdump does by default so you can see the IP addresses).</li>
<li>people are also sometimes weird about mistakes. I mostly try to head this off
by trying to be self-aware about my knowledge level on a topic, and saying
&ldquo;I&rsquo;m not sure&hellip;&rdquo; when I&rsquo;m not sure about something.</li>
</ul>

<h3 id="stories-are-great">stories are great</h3>

<p>I think stories encourage pretty good discussion. For example, <a href="https://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/">why you should understand (a little) about TCP</a>
is a story about a time it was important for me to understand how TCP worked.</p>

<p>When I share stories about problems I solved, the comments really help me
understand how what I learned fits into a bigger context. For example:</p>

<ul>
<li>is this a common problem? people will often comment saying &ldquo;this happened to me too!&rdquo;</li>
<li>what are other common related problems that come up?</li>
<li>are there other possible solutions I didn&rsquo;t consider?</li>
</ul>

<p>Also I think these kinds of stories are incredibly important &ndash; that post
describes a bug that was VERY hard for me to solve, and the only reason I was
able to figure it out in the first place was that I read <a href="https://gocardless.com/blog/in-search-of-performance-how-we-shaved-200ms-off-every-post-request/">this blog post</a>.</p>

<h3 id="ask-technical-questions">ask technical questions</h3>

<p>Often in my blog posts I ask technical questions that I don&rsquo;t know the answer
to (or just mention &ldquo;I don&rsquo;t know X&hellip;&rdquo;). This helps people focus their
replies a little bit &ndash; an obvious comment to make is to provide an answer to
the question, or explain the thing I didn&rsquo;t know!</p>

<p>This is fun because it feels like a guaranteed way to get value out of people&rsquo;s
comments &ndash; people LOVE answering questions, and so they get to look smart, and
I get the answer to a question I have! Everyone wins!</p>

<h3 id="fix-mistakes">fix mistakes</h3>

<p>I make a lot of mistakes in my blog posts, because I write about a lot of
things that are on the edge of my knowledge. When people point out mistakes, I
often edit the blog post to fix it.</p>

<p>Usually I&rsquo;ll stay near a computer for a few hours after I post a blog post so
that I can fix mistakes quickly as they come up.</p>

<p>Some people are very careful to list every single error they made in their blog
posts (&ldquo;errata: the post previously said X which was wrong, I have corrected it
to say Y&rdquo;). Personally I make mistakes constantly and I don&rsquo;t have time for
that so I just edit the post to fix the mistakes.</p>

<h3 id="ask-for-examples-experiences-not-opinions">ask for examples/experiences, not opinions</h3>

<p>A lot of the time when I post a blog post, people on Twitter/Mastodon will
reply with various opinions they have about the thing. For example, someone
recently replied to a blog post about DNS saying that they love using zone
files and dislike web interfaces for managing DNS records. That&rsquo;s not an
opinion I share, so I asked them why.</p>

<p>They explained that there are some DNS record types (specifically <code>TLSA</code>) that they find
often aren&rsquo;t supported in web interfaces. I didn&rsquo;t know that people used <code>TLSA</code>
records, so I learned something! Cool!</p>

<p>I&rsquo;ve found that asking people to share their <strong>experiences</strong> (&ldquo;I wanted to use
X DNS record type and I couldn&rsquo;t&rdquo;) instead of their <strong>opinions</strong>  (&ldquo;DNS web
admin interfaces are bad&rdquo;) leads to a lot of useful information and
discussion. I&rsquo;ve learned a lot from it over the years, and written a lot of
tweets like &ldquo;which DNS record types have you needed?&rdquo; to try to extract more
information about people&rsquo;s experiences.</p>

<p>I try to model the same behaviour in my own work when I can &ndash; if I have an
opinion, I&rsquo;ll try to explain the experiences I&rsquo;ve had with computers that
caused me to have that opinion.</p>

<h3 id="start-with-a-little-context">start with a little context</h3>

<p>I think internet strangers are more likely to reply in a weird way when they
have no idea who you are or why you&rsquo;re writing this thing. It&rsquo;s easy to make
incorrect assumptions! So often I&rsquo;ll mention a little context about why I&rsquo;m
writing this particular blog post.</p>

<p>For example:</p>

<blockquote>
<p>A little while ago I started using a Mac, and one of my biggest frustrations
with it is that often I need to run Linux-specific software.</p>
</blockquote>

<p>or</p>

<blockquote>
<p>I’ve started to run a few more servers recently (nginx playground, mess with
dns, dns lookup), so I’ve been thinking about monitoring.</p>
</blockquote>

<p>or</p>

<blockquote>
<p>Last night, I needed to scan some documents for some bureaucratic reasons.
I’d never used a scanner on Linux before and I was worried it would take hours
to figure out&hellip;</p>
</blockquote>

<h3 id="avoid-causing-boring-conversations">avoid causing boring conversations</h3>

<p>There are some kinds of programming conversations that I find extremely boring
(like &ldquo;should people learn vim?&rdquo; or &ldquo;is functional programming better than
imperative programming?&ldquo;). So I generally try to avoid writing blog posts that
I think will result in a conversation/comment thread that I find annoying or
boring.</p>

<p>For example, I wouldn&rsquo;t write about my opinions about functional programming: I
don&rsquo;t really have anything interesting to say about it and I think it would
lead to a conversation that I&rsquo;m not interested in having.</p>

<p>I don&rsquo;t always succeed at this of course (it&rsquo;s impossible to predict what
people are going to want to comment about!), but I try to avoid the most
obvious flamebait triggers I&rsquo;ve seen in the past.</p>

<p>There are a bunch of &ldquo;flamebait&rdquo; triggers that can set people off on a
conversation that I find boring: cryptocurrency, tailwind, DNSSEC/DoH, etc. So
I have a weird catalog in my head of things not to mention if I don&rsquo;t want to
start the same discussion about that thing for the 50th time.</p>

<p>Of course, if you think that conversations about functional programming are
interesting, you should write about functional programming and start the
conversations you want to have!</p>

<p>Also, it&rsquo;s often possible to start an interesting conversation about a topic
where the conversation is normally boring. For example I often see the same
talking points about IPv6 vs IPv4 over and over again, but I remember the
comments on <a href="https://jvns.ca/blog/2022/01/29/reasons-for-servers-to-support-ipv6/">Reasons for servers to support IPv6</a>
being pretty interesting. In general if I really care about a topic I&rsquo;ll talk
about it anyway, but I don&rsquo;t care about functional programming very much so I
don&rsquo;t see the point of bringing it up.</p>

<h3 id="preempt-common-suggestions">preempt common suggestions</h3>

<p>Another kind of &ldquo;boring conversation&rdquo; I try to avoid is suggestions of things I
have already considered. Like when someone says &ldquo;you should do X&rdquo; but I
already know I could have done X and chose not to because of A B C.</p>

<p>So I often will add a short note like &ldquo;I decided not to do X because of A B
C&rdquo; or &ldquo;you can also do X&rdquo; or &ldquo;normally I would do X, here I didn&rsquo;t because&hellip;&rdquo;.
For example, in <a href="https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/">this post about nix</a>, I list a bunch
of Nix features I&rsquo;m choosing not to use (nix-shell, nix flakes, home manager)
to avoid a bunch of helpful people telling me that I should use flakes.</p>

<p>Listing the things I&rsquo;m <em>not</em> doing is also helpful to readers &ndash; maybe
someone new to nix will discover nix flakes through that post and decide to use
them! Or maybe someone will learn that there are exceptions to when a certain
&ldquo;best practice&rdquo; is appropriate.</p>

<h3 id="set-some-boundaries">set some boundaries</h3>

<p>Recently on Mastodon I complained about some gross terminology (&ldquo;domain
information groper&rdquo;) that I&rsquo;d just noticed in the dig man page on my machine. A
few dudes in the replies (who by now have all deleted their posts) asked me to
prove that the original author <em>intended</em> it to be offensive (which of course
is besides the point, there&rsquo;s just no need to have
<a href="https://dictionary.cambridge.org/dictionary/english/groper">a term widely understood to be referring to sexual assault</a>
in the dig man page) or tried to explain to me why
it actually wasn&rsquo;t a problem.</p>

<p>So I blocked a few people and wrote a quick post:</p>

<blockquote>
<p>man so many dudes in the replies demanding that i prove that the person who
named dig “domain information groper” intended it in an offensive way. Big day
for the block button I guess :)</p>
</blockquote>

<p>I don&rsquo;t do this too often, but I think it&rsquo;s very important on social media to
occasionally set some rules about what kind of behaviour I won&rsquo;t tolerate. My
goal here is usually to drive away some of the assholes (they can unfollow me!)
and try to create a more healthy space for everyone else to have a conversation
about computers in.</p>

<p>Obviously this only works in situations (like Twitter/Mastodon) where I have
the ability to garden my following a little bit over time &ndash; I can&rsquo;t do this on
HN or Reddit or Lobsters or whatever and wouldn&rsquo;t try.</p>

<p>As for fixing it &ndash; the dig maintainers removed the problem language years ago,
but Mac OS still has a very outdated version for license reasons.</p>

<p>(you might notice that this section is breaking the &ldquo;avoid boring
conversations&rdquo; rule above, this section was certain to start a very boring
argument, but I felt it was important to talk about boundaries so I left it in)</p>

<h3 id="don-t-argue">don&rsquo;t argue</h3>

<p>Sometimes people seem to want to get into arguments or make dismissive
comments. I don’t reply to them, even if they’re <a href="https://xkcd.com/386/">wrong</a>. I dislike arguing on
the internet and I’m extremely bad at it, so it’s not a good use of my time.</p>

<h3 id="analyze-negative-comments">analyze negative comments</h3>

<p>If I get a lot of negative comments that I didn&rsquo;t expect, I try to see if I can
get something useful out of it.</p>

<p>For example, I wrote a <a href="https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/">toy DNS resolver</a> once and some of the commenters
were upset that I didn’t handle parsing the DNS packet. At the time I thought
this was silly (I thought DNS parsing was really straightforward and that it
was obvious how to do it, who cares that I didn&rsquo;t handle it?) but I realized
that maybe the commenters didn’t think it was easy or obvious, and wanted to
know how to do it. Which makes sense! It’s not obvious at all if you haven&rsquo;t
done it before!</p>

<p>Those comments partly inspired <a href="https://implement-dns.wizardzines.com/">implement DNS in a weekend</a>, which focuses much more
heavily on the parsing aspects, and which I think is a much better explanation
how to write a DNS resolver. So ultimately those comments helped me a lot, even
if I found them annoying at the time.</p>

<p>(I realize this section makes me sound like a Perfectly Logical Person who does
not get upset by negative public criticism, I promise this is not at all the
case and I have 100000 feelings about everything that happens on the internet
and get upset all the time. But I find that analyzing the criticism and trying
to take away something useful from it helps a bit)</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Thanks to Shae, Aditya, Brian, and Kamal for reading a draft of this.</p>

<p>Some other similar posts I&rsquo;ve written in the past:</p>

<ul>
<li><a href="https://jvns.ca/blog/2017/03/20/blogging-principles/">some blogging principles</a></li>
<li><a href="https://jvns.ca/blog/2023/06/05/some-blogging-myths">some blogging myths</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behind "Hello World" on Linux]]></title>
    <link href="https://jvns.ca/blog/2023/08/03/behind--hello-world/"/>
    <updated>2023-08-04T11:17:25+00:00</updated>
    <id>https://jvns.ca/blog/2023/08/03/behind--hello-world/</id>
    <content type="html"><![CDATA[

<p>Today I was thinking about &ndash; what happens when you run a simple &ldquo;Hello World&rdquo;
Python program on Linux, like this one?</p>

<pre><code>print(&quot;hello world&quot;)
</code></pre>

<p>Here&rsquo;s what it looks like at the command line:</p>

<pre><code>$ python3 hello.py
hello world
</code></pre>

<p>But behind the scenes, there&rsquo;s a lot more going on. I&rsquo;ll
describe some of what happens, and (much much more importantly!) explain some tools you can use to
see what&rsquo;s going on behind the scenes yourself. We&rsquo;ll use <code>readelf</code>, <code>strace</code>,
<code>ldd</code>, <code>debugfs</code>, <code>/proc</code>, <code>ltrace</code>, <code>dd</code>, and <code>stat</code>. I won&rsquo;t talk about the Python-specific parts at all &ndash; just what happens when you run any dynamically linked executable.</p>

<p>Here&rsquo;s a table of contents:</p>

<ol>
<li><a href="#1-the-shell-parses-the-string-python3-hello-py-into-a-command-to-run-and-a-list-of-arguments-python3-and-hello-py">parse &ldquo;python3 hello.py&rdquo;</a></li>
<li><a href="#2-the-shell-figures-out-the-full-path-to-python3">figure out the full path to python3</a></li>
<li><a href="#3-stat-under-the-hood">stat, under the hood</a></li>
<li><a href="#4-time-to-fork">time to fork</a></li>
<li><a href="#5-the-shell-calls-execve">the shell calls execve</a></li>
<li><a href="#6-get-the-binary-s-contents">get the binary&rsquo;s contents</a></li>
<li><a href="#7-find-the-interpreter">find the interpreter</a></li>
<li><a href="#8-dynamic-linking">dynamic linking</a></li>
<li><a href="#9-go-to-start">go to _start</a></li>
<li><a href="#10-write-a-string">write a string</a></li>
</ol>

<h3 id="before-execve">before <code>execve</code></h3>

<p>Before we even start the Python interpreter, there are a lot of things that
have to happen. What executable are we even running? Where is it?</p>

<h4 id="1-the-shell-parses-the-string-python3-hello-py-into-a-command-to-run-and-a-list-of-arguments-python3-and-hello-py">1: The shell parses the string <code>python3 hello.py</code> into a command to run and a list of arguments: <code>python3</code>, and <code>['hello.py']</code></h4>

<p>A bunch of things like glob expansion could happen here. For example if you run <code>python3 *.py</code>, the shell will expand that into <code>python3 hello.py</code></p>

<h4 id="2-the-shell-figures-out-the-full-path-to-python3">2: The shell figures out the full path to <code>python3</code></h4>

<p>Now we know we need to run <code>python3</code>. But what&rsquo;s the full path to that binary? The way this works is that there&rsquo;s a special environment variable named <code>PATH</code>.</p>

<p><strong>See for yourself</strong>: Run <code>echo $PATH</code> in your shell. For me it looks like this.</p>

<pre><code>$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
</code></pre>

<p>When you run a command, the shell will search every directory in that list (in order) to try to find a match.</p>

<p>In <code>fish</code> (my shell), you can see the <a href="https://github.com/fish-shell/fish-shell/blob/900a0487443f10caa6539634ca8c49fb6e3ce5ba/src/path.cpp#L31-L45">path resolution logic here</a>.
It uses the <code>stat</code> system call to check if files exist.</p>

<p><strong>See for yourself</strong>: Run <code>strace -e stat</code>, and then run a command like <code>python3</code>. You should see output like this:</p>

<pre><code>stat(&quot;/usr/local/sbin/python3&quot;, 0x7ffcdd871f40) = -1 ENOENT (No such file or directory)
stat(&quot;/usr/local/bin/python3&quot;, 0x7ffcdd871f40) = -1 ENOENT (No such file or directory)
stat(&quot;/usr/sbin/python3&quot;, 0x7ffcdd871f40) = -1 ENOENT (No such file or directory)
stat(&quot;/usr/bin/python3&quot;, {st_mode=S_IFREG|0755, st_size=5479736, ...}) = 0
</code></pre>

<p>You can see that it finds the binary at <code>/usr/bin/python3</code> and stops: it
doesn&rsquo;t continue searching <code>/sbin</code> or <code>/bin</code>.</p>

<p>(if this doesn&rsquo;t work for you, instead try <code>strace -o out bash</code>, and then <code>grep
stat out</code>. One reader mentioned that their version of libc uses a different
system call instead of <code>stat</code>)</p>

<h4 id="2-1-a-note-on-execvp">2.1: A note on <code>execvp</code></h4>

<p>If you want to run the same PATH searching logic as the shell does without
reimplementing it yourself, you can use the libc function <code>execvp</code> (or one of
the other <code>exec*</code> functions with  <code>p</code> in the name).</p>

<h4 id="3-stat-under-the-hood">3: <code>stat</code>, under the hood</h4>

<p>Now you might be wondering &ndash; Julia, what is <code>stat</code> doing? Well, when your OS opens a file, it&rsquo;s split into 2 steps.</p>

<ol>
<li>It maps the <strong>filename</strong> to an <strong>inode</strong>, which contains metadata about the file</li>
<li>It uses the <strong>inode</strong> to get the file&rsquo;s contents</li>
</ol>

<p>The <code>stat</code> system call just returns the contents of the file&rsquo;s inodes &ndash; it
doesn&rsquo;t read the contents at all. The advantage of this is that it&rsquo;s a lot
faster. Let&rsquo;s go on a short adventure into inodes. (<a href="https://www.cyberdemon.org/2023/07/19/bunch-of-bits.html">this great post &ldquo;A disk is a bunch of bits&rdquo; by Dmitry Mazin</a> has more details)</p>

<pre><code>$ stat /usr/bin/python3
  File: /usr/bin/python3 -&gt; python3.9
  Size: 9         	Blocks: 0          IO Block: 4096   symbolic link
Device: fe01h/65025d	Inode: 6206        Links: 1
Access: (0777/lrwxrwxrwx)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2023-08-03 14:17:28.890364214 +0000
Modify: 2021-04-05 12:00:48.000000000 +0000
Change: 2021-06-22 04:22:50.936969560 +0000
 Birth: 2021-06-22 04:22:50.924969237 +0000
</code></pre>

<p><strong>See for yourself</strong>: Let&rsquo;s go see where exactly that inode is on our hard drive.</p>

<p>First, we have to find our hard drive&rsquo;s device name</p>

<pre><code>$ df
...
tmpfs             100016      604     99412   1% /run
/dev/vda1       25630792 14488736  10062712  60% /
...
</code></pre>

<p>Looks like it&rsquo;s <code>/dev/vda1</code>. Next, let&rsquo;s find out where the inode for <code>/usr/bin/python3</code> is on our hard drive:</p>

<pre><code>$ sudo debugfs /dev/vda1
debugfs 1.46.2 (28-Feb-2021)
debugfs:  imap /usr/bin/python3
Inode 6206 is part of block group 0
	located at block 658, offset 0x0d00
</code></pre>

<p>I have no idea how <code>debugfs</code> is figuring out the location of the inode for that filename, but we&rsquo;re going to leave that alone.</p>

<p>Now, we need to calculate how many bytes into our hard drive &ldquo;block 658, offset 0x0d00&rdquo; is on the big array of bytes that is your hard drive. Each block is 4096 bytes, so we need to go <code>4096 * 658 + 0x0d00</code> bytes. A calculator tells me that&rsquo;s <code>2698496</code></p>

<pre><code>$ sudo dd if=/dev/vda1 bs=1 skip=2698496 count=256 2&gt;/dev/null | hexdump -C
00000000  ff a1 00 00 09 00 00 00  f8 b6 cb 64 9a 65 d1 60  |...........d.e.`|
00000010  f0 fb 6a 60 00 00 00 00  00 00 01 00 00 00 00 00  |..j`............|
00000020  00 00 00 00 01 00 00 00  70 79 74 68 6f 6e 33 2e  |........python3.|
00000030  39 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |9...............|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000060  00 00 00 00 12 4a 95 8c  00 00 00 00 00 00 00 00  |.....J..........|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 2d cb 00 00  |............-...|
00000080  20 00 bd e7 60 15 64 df  00 00 00 00 d8 84 47 d4  | ...`.d.......G.|
00000090  9a 65 d1 60 54 a4 87 dc  00 00 00 00 00 00 00 00  |.e.`T...........|
000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
</code></pre>

<p>Neat! There&rsquo;s our inode! You can see it says <code>python3</code> in it, which is a really
good sign. We&rsquo;re not going to go through all of this, but the <a href="https://github.com/torvalds/linux/blob/fdf0eaf11452d72945af31804e2a1048ee1b574c/fs/ext4/ext4.h#L769">ext4 inode struct from the Linux kernel</a>
says that the first 16 bits are the &ldquo;mode&rdquo;, or permissions. So let&rsquo;s work that out how <code>ffa1</code> corresponds to file permissions.</p>

<ul>
<li>The bytes <code>ffa1</code> correspond to the number <code>0xa1ff</code>, or 41471 (because x86 is little endian)</li>
<li>41471 in octal is <code>0120777</code></li>
<li>This is a bit weird &ndash; that file&rsquo;s permissions could definitely be <code>777</code>, but what
are the first 3 digits? I&rsquo;m not used to seeing those! You can find out what
the <code>012</code> means in <a href="https://man7.org/linux/man-pages/man7/inode.7.html">man inode</a> (scroll down to &ldquo;The file type and mode&rdquo;).
There&rsquo;s a little table that says <code>012</code> means &ldquo;symbolic link&rdquo;.</li>
</ul>

<p>Let&rsquo;s list the file and see if it is in fact a symbolic link with permissions <code>777</code>:</p>

<pre><code>$ ls -l /usr/bin/python3
lrwxrwxrwx 1 root root 9 Apr  5  2021 /usr/bin/python3 -&gt; python3.9
</code></pre>

<p>It is! Hooray, we decoded it correctly.</p>

<h4 id="4-time-to-fork">4: Time to fork</h4>

<p>We&rsquo;re still not ready to start <code>python3</code>. First, the shell needs to create a
new child process to run. The way new processes start on Unix is a little weird
&ndash; first the process clones itself, and then runs <code>execve</code>, which replaces the
cloned process with a new process.</p>

<p>*<strong>See for yourself:</strong> Run <code>strace -e clone bash</code>, then run <code>python3</code>. You should see something like this:</p>

<pre><code>clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f03788f1a10) = 3708100
</code></pre>

<p><code>3708100</code> is the PID of the new process, which is a child of the shell process.</p>

<p>Some more tools to look at what&rsquo;s going on with processes:</p>

<ul>
<li><code>pstree</code> will show you a tree of all the processes on your system</li>
<li><code>cat /proc/PID/stat</code> shows you some information about the process. The contents of that file are documented in <code>man proc</code>. For example the 4th field is the parent PID.</li>
</ul>

<h4 id="4-1-what-the-new-process-inherits">4.1: What the new process inherits.</h4>

<p>The new process (which will become <code>python3</code>) has inherited a bunch of from the shell. For example, it&rsquo;s inherited:</p>

<ol>
<li><strong>environment variables</strong>: you can look at them with <code>cat /proc/PID/environ | tr '\0' '\n'</code></li>
<li><strong>file descriptors</strong> for stdout and stderr: look at them with <code>ls -l /proc/PID/fd</code></li>
<li>a <strong>working directory</strong> (whatever the current directory is)</li>
<li><strong>namespaces and cgroups</strong> (if it&rsquo;s in a container)</li>
<li>the <strong>user</strong> and <strong>group</strong> that&rsquo;s running it</li>
<li>probably more things I&rsquo;m not thinking of right now</li>
</ol>

<h4 id="5-the-shell-calls-execve">5: The shell calls <code>execve</code></h4>

<p>Now we&rsquo;re ready to start the Python interpreter!</p>

<p><strong>See for yourself</strong>: Run <code>strace -f -e execve bash</code>, then run <code>python3</code>. The <code>-f</code> is important because we want to follow any forked child subprocesses. You should see something like this:</p>

<pre><code>[pid 3708381] execve(&quot;/usr/bin/python3&quot;, [&quot;python3&quot;], 0x560397748300 /* 21 vars */) = 0
</code></pre>

<p>The first argument is the binary, and the second argument is the list of
command line arguments. The command line arguments get placed in a special
location in the program&rsquo;s memory so that it can access them when it runs.</p>

<p>Now, what&rsquo;s going on inside <code>execve</code>?</p>

<h4 id="6-get-the-binary-s-contents">6: get the binary&rsquo;s contents</h4>

<p>The first thing that has to happen is that we need to open the <code>python3</code>
binary file and read its contents. So far we&rsquo;ve only used the <code>stat</code> system call to access its metadata,
but now we need its contents.</p>

<p>Let&rsquo;s look at the output of <code>stat</code> again:</p>

<pre><code>$ stat /usr/bin/python3
  File: /usr/bin/python3 -&gt; python3.9
  Size: 9         	Blocks: 0          IO Block: 4096   symbolic link
Device: fe01h/65025d	Inode: 6206        Links: 1
...
</code></pre>

<p>This takes up 0 blocks of space on the disk. This is because the contents of
the symbolic link (<code>python3.9</code>) are actually in the inode itself: you can see
them here (from the binary contents of the inode above, it&rsquo;s split across 2
lines in the hexdump output):</p>

<pre><code>00000020  00 00 00 00 01 00 00 00  70 79 74 68 6f 6e 33 2e  |........python3.|
00000030  39 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |9...............|
</code></pre>

<p>So we&rsquo;ll need to open <code>/usr/bin/python3.9</code> instead. All of this is happening
inside the kernel so you won&rsquo;t see it another system call for that.</p>

<p>Every file is made up of a bunch of <strong>blocks</strong> on the hard drive. I think each of these
blocks on my system is 4096 bytes, so the minimum size of a file is 4096 bytes
&ndash; even if the file is only 5 bytes, it still takes up 4KB on disk.</p>

<p><strong>See for yourself</strong>: We can find the block numbers using <code>debugfs</code> like this: (again, I got these instructions from <a href="https://www.cyberdemon.org/2023/07/19/bunch-of-bits.html">dmitry mazin&rsquo;s &ldquo;A disk is a bunch of bits&rdquo; post</a>)</p>

<pre><code>$ debugfs /dev/vda1
debugfs:  blocks /usr/bin/python3.9
145408 145409 145410 145411 145412 145413 145414 145415 145416 145417 145418 145419 145420 145421 145422 145423 145424 145425 145426 145427 145428 145429 145430 145431 145432 145433 145434 145435 145436 145437
</code></pre>

<p>Now we can use <code>dd</code> to read the first block of the file. We&rsquo;ll set the block size to 4096 bytes, skip <code>145408</code> blocks, and read 1 block.</p>

<pre><code>$ dd if=/dev/vda1 bs=4096 skip=145408 count=1 2&gt;/dev/null | hexdump -C | head
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 3e 00 01 00 00 00  c0 a5 5e 00 00 00 00 00  |..&gt;.......^.....|
00000020  40 00 00 00 00 00 00 00  b8 95 53 00 00 00 00 00  |@.........S.....|
00000030  00 00 00 00 40 00 38 00  0b 00 40 00 1e 00 1d 00  |....@.8...@.....|
00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000050  40 00 40 00 00 00 00 00  40 00 40 00 00 00 00 00  |@.@.....@.@.....|
00000060  68 02 00 00 00 00 00 00  68 02 00 00 00 00 00 00  |h.......h.......|
00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|
00000080  a8 02 00 00 00 00 00 00  a8 02 40 00 00 00 00 00  |..........@.....|
00000090  a8 02 40 00 00 00 00 00  1c 00 00 00 00 00 00 00  |..@.............|
</code></pre>

<p>You can see that we get the exact same output as if we read the file with <code>cat</code>, like this:</p>

<pre><code>$ cat /usr/bin/python3.9 | hexdump -C | head
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 3e 00 01 00 00 00  c0 a5 5e 00 00 00 00 00  |..&gt;.......^.....|
00000020  40 00 00 00 00 00 00 00  b8 95 53 00 00 00 00 00  |@.........S.....|
00000030  00 00 00 00 40 00 38 00  0b 00 40 00 1e 00 1d 00  |....@.8...@.....|
00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000050  40 00 40 00 00 00 00 00  40 00 40 00 00 00 00 00  |@.@.....@.@.....|
00000060  68 02 00 00 00 00 00 00  68 02 00 00 00 00 00 00  |h.......h.......|
00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|
00000080  a8 02 00 00 00 00 00 00  a8 02 40 00 00 00 00 00  |..........@.....|
00000090  a8 02 40 00 00 00 00 00  1c 00 00 00 00 00 00 00  |..@.............|
</code></pre>

<h4 id="an-aside-on-magic-numbers">an aside on magic numbers</h4>

<p>This file starts with <code>ELF</code>, which is a &ldquo;magic number&rdquo;, or a byte sequence that
tells us that this is an ELF file. ELF is the binary file format on Linux.</p>

<p>Different file formats have different magic numbers, for example the magic
number for gzip is <code>1f8b</code>. The magic number at the beginning is how <code>file blah.gz</code> knows that it&rsquo;s a gzip file.</p>

<p>I think <code>file</code> has a variety of heuristics for figuring out the file type of a
file, not just magic numbers, but the magic number is an important one.</p>

<h4 id="7-find-the-interpreter">7: find the interpreter</h4>

<p>Let&rsquo;s parse the ELF file to see what&rsquo;s in there.</p>

<p><strong>See for yourself:</strong> Run <code>readelf -a /usr/bin/python3.9</code>. Here&rsquo;s what I get (though I&rsquo;ve redacted a LOT of stuff):</p>

<pre><code>$ readelf -a /usr/bin/python3.9
ELF Header:
    Class:                             ELF64
    Machine:                           Advanced Micro Devices X86-64
...
-&gt;  Entry point address:               0x5ea5c0
...
Program Headers:
  Type           Offset             VirtAddr           PhysAddr
  INTERP         0x00000000000002a8 0x00000000004002a8 0x00000000004002a8
                 0x000000000000001c 0x000000000000001c  R      0x1
-&gt;      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
        ...
-&gt;        1238: 00000000005ea5c0    43 FUNC    GLOBAL DEFAULT   13 _start
</code></pre>

<p>Here&rsquo;s what I understand of what&rsquo;s going on here:</p>

<ol>
<li>it&rsquo;s telling the kernel to run <code>/lib64/ld-linux-x86-64.so.2</code> to start this program. This is called the <strong>dynamic linker</strong> and we&rsquo;ll talk about it next</li>
<li>it&rsquo;s specifying an entry point (at <code>0x5ea5c0</code>, which is where this program&rsquo;s code starts)</li>
</ol>

<p>Now let&rsquo;s talk about the dynamic linker.</p>

<h4 id="8-dynamic-linking">8: dynamic linking</h4>

<p>Okay! We&rsquo;ve read the bytes from disk and we&rsquo;ve started this &ldquo;interpreter&rdquo; thing. What next? Well, if you run <code>strace -o out.strace python3</code>, you&rsquo;ll see a bunch of stuff like this right after the <code>execve</code> system call:</p>

<pre><code>execve(&quot;/usr/bin/python3&quot;, [&quot;python3&quot;], 0x560af13472f0 /* 21 vars */) = 0
brk(NULL)                       = 0xfcc000
access(&quot;/etc/ld.so.preload&quot;, R_OK) = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=32091, ...}) = 0
mmap(NULL, 32091, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f718a1e3000
close(3)                        = 0
openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libpthread.so.0&quot;, O_RDONLY|O_CLOEXEC) = 3
read(3, &quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0 l\0\0\0\0\0\0&quot;..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=149520, ...}) = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f718a1e1000
...
close(3)                        = 0
openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libdl.so.2&quot;, O_RDONLY|O_CLOEXEC) = 3
</code></pre>

<p>This all looks a bit intimidating at first, but the part I want you to pay
attention to is <code>openat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libpthread.so.0&quot;</code>.
This is opening a C threading library called <code>pthread</code> that the Python
interpreter needs to run.</p>

<p><strong>See for yourself:</strong> If you want to know which libraries a binary needs to load at runtime, you can use <code>ldd</code>. Here&rsquo;s what that looks like for me:</p>

<pre><code>$ ldd /usr/bin/python3.9
	linux-vdso.so.1 (0x00007ffc2aad7000)
	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2fd6554000)
	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f2fd654e000)
	libutil.so.1 =&gt; /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f2fd6549000)
	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2fd6405000)
	libexpat.so.1 =&gt; /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f2fd63d6000)
	libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f2fd63b9000)
	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2fd61e3000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f2fd6580000)
</code></pre>

<p>You can see that the first library listed is <code>/lib/x86_64-linux-gnu/libpthread.so.0</code>, which is why it was loaded first.</p>

<h4 id="on-ld-library-path">on LD_LIBRARY_PATH</h4>

<p>I&rsquo;m honestly still a little confused about dynamic linking. Some things I know:</p>

<ul>
<li>Dynamic linking happens in userspace and the dynamic linker on my system is at <code>/lib64/ld-linux-x86-64.so.2</code>. If you&rsquo;re missing the dynamic linker, you can end up with weird bugs like this <a href="https://jvns.ca/blog/2021/11/17/debugging-a-weird--file-not-found--error/">weird &ldquo;file not found&rdquo; error</a></li>
<li>The dynamic linker uses the <code>LD_LIBRARY_PATH</code> environment variable to find libraries</li>
<li>The dynamic linker will also use the <code>LD_PRELOAD</code> environment to override any dynamically linked function you want (you can use this for <a href="https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/">fun hacks</a>, or to replace your default memory allocator with an alternative one like jemalloc)</li>
<li>there are some <code>mprotect</code>s in the strace output which are marking the library code as read-only, for security reasons</li>
<li>on Mac, it&rsquo;s <code>DYLD_LIBRARY_PATH</code> instead of <code>LD_LIBRARY_PATH</code></li>
</ul>

<p>You might be wondering &ndash; if dynamic linking happens in userspace, why don&rsquo;t we
see a bunch of <code>stat</code> system calls where it&rsquo;s searching through
<code>LD_LIBRARY_PATH</code> for the libraries, the way we did when bash was searching the
<code>PATH</code>?</p>

<p>That&rsquo;s because <code>ld</code> has a cache in <code>/etc/ld.so.cache</code>, and all of those
libraries have already been found in the past. You can see it opening the cache
in the strace output &ndash; <code>openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3</code>.</p>

<p>There are still a bunch of system calls after dynamic linking in the <a href="https://gist.github.com/jvns/4254251bea219568df9f43a2efd8d0f5">full strace output</a> that I
still don&rsquo;t really understand (what&rsquo;s <code>prlimit64</code> doing? where does the locale
stuff come in? what&rsquo;s <code>gconv-modules.cache</code>? what&rsquo;s <code>rt_sigaction</code> doing?
what&rsquo;s <code>arch_prctl</code>? what&rsquo;s <code>set_tid_address</code> and <code>set_robust_list</code>?). But this feels like a good start.</p>

<h4 id="aside-ldd-is-actually-a-simple-shell-script">aside: ldd is actually a simple shell script!</h4>

<p>Someone on mastodon <a href="https://octodon.social/@lkundrak/110832640058459399">pointed out</a> that <code>ldd</code> is actually a shell script
that just sets the <code>LD_TRACE_LOADED_OBJECTS=1</code> environment variable and
starts the program. So you can do exactly the same thing like this:</p>

<pre><code>$ LD_TRACE_LOADED_OBJECTS=1 python3
	linux-vdso.so.1 (0x00007ffe13b0a000)
	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f01a5a47000)
	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f01a5a41000)
	libutil.so.1 =&gt; /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f2fd6549000)
	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2fd6405000)
	libexpat.so.1 =&gt; /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f2fd63d6000)
	libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f2fd63b9000)
	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2fd61e3000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f2fd6580000)
</code></pre>

<p>Apparently <code>ld</code> is also a binary you can just run, so <code>/lib64/ld-linux-x86-64.so.2 --list /usr/bin/python3.9</code> also does the the same thing.</p>

<h4 id="on-init-and-fini">on <code>init</code> and <code>fini</code></h4>

<p>Let&rsquo;s talk about this line in the <code>strace</code> output:</p>

<pre><code>set_tid_address(0x7f58880dca10)         = 3709103
</code></pre>

<p>This seems to have something to do with threading, and I think this might be
happening because the <code>pthread</code> library (and every other dynamically loaded)
gets to run initialization code when it&rsquo;s loaded. The code that runs when the
library is loaded is in the <code>init</code> section (or maybe also the <code>.ctors</code> section).</p>

<p><strong>See for yourself:</strong> Let&rsquo;s take a look at that using readelf:</p>

<pre><code>$ readelf -a /lib/x86_64-linux-gnu/libpthread.so.0
...
  [10] .rela.plt         RELA             00000000000051f0  000051f0
       00000000000007f8  0000000000000018  AI       4    26     8
  [11] .init             PROGBITS         0000000000006000  00006000
       000000000000000e  0000000000000000  AX       0     0     4
  [12] .plt              PROGBITS         0000000000006010  00006010
       0000000000000560  0000000000000010  AX       0     0     16
...
</code></pre>

<p>This library doesn&rsquo;t have a <code>.ctors</code> section, just an <code>.init</code>. But what&rsquo;s in
that <code>.init</code> section? We can use <code>objdump</code> to disassemble the code:</p>

<pre><code>$ objdump -d /lib/x86_64-linux-gnu/libpthread.so.0
Disassembly of section .init:

0000000000006000 &lt;_init&gt;:
    6000:       48 83 ec 08             sub    $0x8,%rsp
    6004:       e8 57 08 00 00          callq  6860 &lt;__pthread_initialize_minimal&gt;
    6009:       48 83 c4 08             add    $0x8,%rsp
    600d:       c3
</code></pre>

<p>So it&rsquo;s calling <code>__pthread_initialize_minimal</code>.  I found the <a href="https://github.com/bminor/glibc/blob/a78e5979a92c7985eadad7246740f3874271303f/nptl/nptl-init.c#L100">code for that function in glibc</a>,
though I had to find an older version of glibc because it looks like in more
recent versions <a href="https://developers.redhat.com/articles/2021/12/17/why-glibc-234-removed-libpthread">libpthread is no longer a separate library</a>.</p>

<p>I&rsquo;m not sure whether this <code>set_tid_address</code> system call actually comes from
<code>__pthread_initialize_minimal</code>, but at least we&rsquo;ve learned that libraries can
run code on startup through the <code>.init</code> section.</p>

<p>Here&rsquo;s a note from <code>man elf</code> on the <code>.init</code> section:</p>

<pre><code>$ man elf
 .init  This section holds executable instructions that contribute to the process initialization code.  When a program starts to run
              the system arranges to execute the code in this section before calling the main program entry point.
</code></pre>

<p>There&rsquo;s also a <code>.fini</code> section in the ELF file that runs at the end, and
<code>.ctors</code> / <code>.dtors</code> (constructors and destructors) are other sections that
could exist.</p>

<p>Okay, that&rsquo;s enough about dynamic linking.</p>

<h4 id="9-go-to-start">9: go to <code>_start</code></h4>

<p>After dynamic linking is done, we go to <code>_start</code> in the Python interpreter.
Then it does all the normal Python interpreter things you&rsquo;d expect.</p>

<p>I&rsquo;m not going to talk about this because here I&rsquo;m interested in general
facts about how binaries are run on Linux, not the Python interpreter
specifically.</p>

<h4 id="10-write-a-string">10: write a string</h4>

<p>We still need to print out &ldquo;hello world&rdquo; though. Under the hood, the Python <code>print</code> function calls some function from libc. But which one? Let&rsquo;s find out!</p>

<p><strong>See for yourself</strong>: Run <code>ltrace -o out python3 hello.py</code>.</p>

<pre><code>$ ltrace -o out python3 hello.py
$ grep hello out
write(1, &quot;hello world\n&quot;, 12) = 12
</code></pre>

<p>So it looks like it&rsquo;s calling <code>write</code></p>

<p>I honestly am always a little suspicious of ltrace &ndash; unlike strace (which I
would trust with my life), I&rsquo;m never totally sure that ltrace is actually
reporting library calls accurately. But in this case it seems to be working. And
if we look at the <a href="https://github.com/python/cpython/blob/400835ea1626c8c6dcd967c7eabe0dad4a923182/Python/fileutils.c#L1955">cpython source code</a>, it does seem to be calling <code>write()</code> in some places. So I&rsquo;m willing to believe that.</p>

<h4 id="what-s-libc">what&rsquo;s libc?</h4>

<p>We just said that Python calls the <code>write</code> function from libc. What&rsquo;s libc?
It&rsquo;s the C standard library, and it&rsquo;s responsible for a lot of basic things
like:</p>

<ul>
<li>allocating memory with <code>malloc</code></li>
<li>file I/O (opening/closing/</li>
<li>executing programs (with <code>execvp</code>, like we mentioned before)</li>
<li>looking up DNS records with <code>getaddrinfo</code></li>
<li>managing threads with <code>pthread</code></li>
</ul>

<p>Programs don&rsquo;t <em>have</em> to use libc (on Linux, Go famously doesn&rsquo;t use it and
calls Linux system calls directly instead), but most other programming
languages I use (node, Python, Ruby, Rust) all use libc. I&rsquo;m not sure about Java.</p>

<p>You can find out if you&rsquo;re using libc by running <code>ldd</code> on your binary: if you
see something like <code>libc.so.6</code>, that&rsquo;s libc.</p>

<h4 id="why-does-libc-matter">why does libc matter?</h4>

<p>You might be wondering &ndash; why does it matter that Python calls the libc <code>write</code>
and then libc calls the <code>write</code> system call? Why am I making a point of saying
that <code>libc</code> is in the middle?</p>

<p>I think in this case it doesn&rsquo;t really matter (AFAIK the <code>write</code> libc function
maps pretty directly to the <code>write</code> system call)</p>

<p>But there are different libc implementations, and sometimes they behave
differently. The two main ones are glibc (GNU libc) and musl libc.</p>

<p>For example, until recently <a href="https://www.openwall.com/lists/musl/2023/05/02/1">musl&rsquo;s <code>getaddrinfo</code> didn&rsquo;t support TCP DNS</a>, <a href="https://christoph.luppri.ch/fixing-dns-resolution-for-ruby-on-alpine-linux">here&rsquo;s a blog post talking about a bug that that caused</a>.</p>

<h4 id="a-little-detour-into-stdout-and-terminals">a little detour into stdout and terminals</h4>

<p>In this program, stdout (the <code>1</code> file descriptor) is a terminal. And you can do
funny things with terminals! Here&rsquo;s one:</p>

<ol>
<li>In a terminal, run <code>ls -l /proc/self/fd/1</code>. I get <code>/dev/pts/2</code></li>
<li>In another terminal window, write <code>echo hello &gt; /dev/pts/2</code></li>
<li>Go back to the original terminal window. You should see <code>hello</code> printed there!</li>
</ol>

<h4 id="that-s-all-for-now">that&rsquo;s all for now!</h4>

<p>Hopefully you have a better idea of how <code>hello world</code> gets printed! I&rsquo;m going to stop
adding more details for now because this is already pretty long, but obviously there&rsquo;s
more to say and I might add more if folks chip in with extra details. I&rsquo;d
especially love suggestions for other tools you could use to inspect parts of
the process that I haven&rsquo;t explained here.</p>

<p>Thanks to everyone who suggested corrections / additions &ndash; I&rsquo;ve edited this blog post a lot to incorporate more things :)</p>

<p>Some things I&rsquo;d like to add if I can figure out how to spy on them:</p>

<ul>
<li>the kernel loader and ASLR (I haven&rsquo;t figured out yet how to use bpftrace + kprobes to trace the kernel loader&rsquo;s actions)</li>
<li>TTYs (I haven&rsquo;t figured out how to trace the way <code>write(1, &quot;hello world&quot;, 11)</code> gets sent to the TTY that I&rsquo;m looking at)</li>
</ul>

<h3 id="i-d-love-to-see-a-mac-version-of-this">I&rsquo;d love to see a Mac version of this</h3>

<p>One of my frustrations with Mac OS is that I don&rsquo;t know how to introspect my
system on this level &ndash; when I print <code>hello world</code>, I can&rsquo;t figure out how to
spy on what&rsquo;s going on behind the scenes the way I can on Linux. I&rsquo;d love to
see a really in depth explainer.</p>

<p>Some Mac equivalents I know about:</p>

<ul>
<li><code>ldd</code> -&gt; <code>otool -L</code></li>
<li><code>readelf</code> -&gt; <code>otool</code></li>
<li>supposedly you can use <code>dtruss</code> or <code>dtrace</code> on mac instead of strace but I&rsquo;ve never been brave enough to turn off system integrity protection to get it to work</li>
<li><code>strace</code> -&gt; <code>sc_usage</code> seems to be able to collect stats about syscall usage, and <code>fs_usage</code> about file usage</li>
</ul>

<h3 id="more-reading">more reading</h3>

<p>Some more links:</p>

<ul>
<li><a href="https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html">A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux</a></li>
<li><a href="https://people.freebsd.org/~brooks/talks/asiabsdcon2017-helloworld/helloworld.pdf">an exploration of &ldquo;hello world&rdquo; on FreeBSD</a></li>
<li><a href="https://gynvael.coldwind.pl/?lang=en&amp;id=754">hello world under the microscope</a> for Windows</li>
<li>From LWN: <a href="https://lwn.net/Articles/630727/">how programs get run</a> (<a href="https://lwn.net/Articles/631631/">and part two</a>) have a bunch more details on the internals of <code>execve</code></li>
<li><a href="https://cpu.land/how-to-run-a-program">Putting the “You” in CPU</a> by Lexi Mattick</li>
<li><a href="https://www.youtube.com/watch?v=LnzuMJLZRdU">&ldquo;Hello, world&rdquo; from scratch on a 6502 (video from Ben Eater)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why is DNS still hard to learn?]]></title>
    <link href="https://jvns.ca/blog/2023/07/28/why-is-dns-still-hard-to-learn/"/>
    <updated>2023-07-28T09:40:04+00:00</updated>
    <id>https://jvns.ca/blog/2023/07/28/why-is-dns-still-hard-to-learn/</id>
    <content type="html"><![CDATA[

<p>I write a lot about technologies that I found hard to learn about. A
while back my friend Sumana asked me an interesting question &ndash; why are these
things so hard to learn about? Why do they seem so mysterious?</p>

<p>For example, take DNS. We&rsquo;ve been using DNS since the <a href="https://www.ietf.org/rfc/rfc1034.txt">80s</a> (for more than 35 years!). It&rsquo;s
used in every website on the internet. And it&rsquo;s pretty stable &ndash; in a lot of
ways, it works the exact same way it did 30 years ago.</p>

<p>But it took me YEARS to figure out how to confidently debug DNS issues, and
I&rsquo;ve seen a lot of other programmers struggle with debugging DNS problems as
well. So what&rsquo;s going on?</p>

<p>Here are a couple of thoughts about why learning to troubleshoot DNS problems
is hard.</p>

<p>(I&rsquo;m not going to explain DNS very much in this post, see <a href="https://implement-dns.wizardzines.com/">Implement DNS in a Weekend</a> or <a href="https://jvns.ca/categories/dns/">my DNS blog posts</a> for more about how DNS works)</p>

<h3 id="it-s-not-because-dns-is-super-hard">it&rsquo;s not because DNS is super hard</h3>

<p>When I finally learned how to troubleshoot DNS problems, my reaction was &ldquo;what,
that was it???? that&rsquo;s not that hard!&ldquo;. I felt a little bit cheated! I could
explain to you everything that I found confusing about DNS in <a href="https://wizardzines.com/zines/dns">a few hours</a>.</p>

<p>So &ndash; if DNS is not all that complicated, why did it take me so many years to
figure out how to troubleshoot pretty basic DNS issues (like &ldquo;my domain doesn&rsquo;t
resolve even though I&rsquo;ve set it up correctly&rdquo; or &ldquo;<code>dig</code> and my browser have
different DNS results, why?&ldquo;)?</p>

<p>And I wasn&rsquo;t alone in finding DNS hard to learn! I&rsquo;ve talked to a lot of
smart friends who are very experienced programmers about DNS of the years, and
many of them either:</p>

<ul>
<li>didn&rsquo;t feel comfortable making simple DNS changes to their websites</li>
<li>or were confused about basic facts about how DNS works (like that records are <a href="https://jvns.ca/blog/2021/12/06/dns-doesn-t-propagate/">pulled and not pushed</a>)</li>
<li>or did understand DNS basics pretty well, but had the some of the same
knowledge gaps that I&rsquo;d struggled with (negative caching and the details of
how <code>dig</code> and your browser do DNS queries differently)</li>
</ul>

<p>So if we&rsquo;re all struggling with the same things about DNS, what&rsquo;s going on? Why
is it so hard to learn for so many people?</p>

<p>Here are some ideas.</p>

<h3 id="a-lot-of-the-system-is-hidden">a lot of the system is hidden</h3>

<p>When you make a DNS request on your computer, the basic story is:</p>

<ol>
<li>your computer makes a request to a server called <strong>resolver</strong></li>
<li>the resolver checks its cache, and makes requests to some other servers called <strong>authoritative nameservers</strong></li>
</ol>

<p>Here are some things you don&rsquo;t see:</p>

<ul>
<li>the resolver&rsquo;s <strong>cache</strong>. What&rsquo;s in there?</li>
<li>which <strong>library code</strong> on your computer is making the DNS request (is it libc
<code>getaddrinfo</code>? if so, is it the getaddrinfo from glibc, or musl, or apple? is
it your browser&rsquo;s DNS code? is it a different custom DNS implementation?).
All of these options behave slightly differently and have different
configuration, approaches to caching, available features, etc. For example musl DNS didn&rsquo;t support TCP until <a href="https://www.theregister.com/2023/05/16/alpine_linux_318/">early 2023</a>.</li>
<li>the <strong>conversation</strong> between the resolver and the authoritative nameservers. I
think a lot of DNS issues would be SO simple to understand if you could
magically get a trace of exactly which authoritative nameservers were
queried downstream during your request, and what they said. (like, what if
you could run <code>dig +debug google.com</code> and it gave you a bunch of extra
debugging information?)</li>
</ul>

<h3 id="dealing-with-hidden-systems">dealing with hidden systems</h3>

<p>A couple of ideas for how to deal with hidden systems</p>

<ul>
<li>just teaching people what the hidden systems are makes a huge difference. For
a long time I had no idea that my computer had many different DNS libraries
that were used in different situations and I was confused about this for
literally years. This is a big part of my approach.</li>
<li>with <a href="https://messwithdns.net/">Mess With DNS</a> we tried out this &ldquo;fishbowl&rdquo;
approach where it shows you some parts of the system (the conversation with
the resolver and the authoritative nameserver) that are normally hidden</li>
<li>I feel like it would be extremely cool to extend DNS to include a &ldquo;debugging
information&rdquo; section. (edit: it looks like this already exists! It&rsquo;s called
<a href="https://blog.nlnetlabs.nl/extended-dns-error-support-for-unbound/">Extended DNS Errors</a>,
or EDE, and tools are slowly adding support for it.</li>
</ul>

<h3 id="extended-dns-errors-seem-cool">Extended DNS Errors seem cool</h3>

<p>Extended DNS Errors are a new way for DNS servers to provide extra debuggging information in DNS responss. Here&rsquo;s an example of what that looks like:</p>

<pre><code>$ dig @8.8.8.8 xjwudh.com
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 39830
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
; EDE: 12 (NSEC Missing): (Invalid denial of existence of xjwudh.com/a)
;; QUESTION SECTION:
;xjwudh.com.			IN	A

;; AUTHORITY SECTION:
com.			900	IN	SOA	a.gtld-servers.net. nstld.verisign-grs.com. 1690634120 1800 900 604800 86400

;; Query time: 92 msec
;; SERVER: 8.8.8.8#53(8.8.8.8) (UDP)
;; WHEN: Sat Jul 29 08:35:45 EDT 2023
;; MSG SIZE  rcvd: 161
</code></pre>

<p>Here I&rsquo;ve requested a nonexistent domain, and I got the extended error <code>EDE:
12 (NSEC Missing): (Invalid denial of existence of xjwudh.com/a)</code>. I&rsquo;m not
sure what that means (it&rsquo;s some DNSSEC Thing), but it&rsquo;s cool to see an extra
debug message like that.</p>

<p>I did have to install a newer version of <code>dig</code> to get the above to work.</p>

<h3 id="confusing-tools">confusing tools</h3>

<p>Even though a lot of DNS stuff is hidden, there are a lot of ways to figure out
what&rsquo;s going on by using <code>dig</code>.</p>

<p>For example, you can use <code>dig +norecurse</code> to figure out if a given DNS resolver
has a particular record in its cache. <code>8.8.8.8</code> seems to return a <code>SERVFAIL</code>
response if the response isn&rsquo;t cached.</p>

<p>here&rsquo;s what that looks like for <code>google.com</code></p>

<pre><code>$ dig +norecurse  @8.8.8.8 google.com
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 11653
;; flags: qr ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;google.com.			IN	A

;; ANSWER SECTION:
google.com.		21	IN	A	172.217.4.206

;; Query time: 57 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Fri Jul 28 10:50:45 EDT 2023
;; MSG SIZE  rcvd: 55
</code></pre>

<p>and for <code>homestarrunner.com</code>:</p>

<pre><code>$ dig +norecurse  @8.8.8.8 homestarrunner.com
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: SERVFAIL, id: 55777
;; flags: qr ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;homestarrunner.com.		IN	A

;; Query time: 52 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Fri Jul 28 10:51:01 EDT 2023
;; MSG SIZE  rcvd: 47
</code></pre>

<p>Here you can see we got a normal <code>NOERROR</code> response for <code>google.com</code> (which is
in <code>8.8.8.8</code>&rsquo;s cache) but a <code>SERVFAIL</code> for <code>homestarrunner.com</code> (which isn&rsquo;t).
This doesn&rsquo;t mean there&rsquo;s no DNS record <code>homestarrunner.com</code> (there is!), it&rsquo;s
just not cached).</p>

<p>But this output is really confusing to read if you&rsquo;re not used to it! Here are a few things that I think are weird about it:</p>

<ol>
<li>the headings are weird (there&rsquo;s <code>-&gt;&gt;HEADER&lt;&lt;-</code>, <code>flags:</code>, <code>OPT PSEUDOSECTION:</code>, <code>QUESTION SECTION:</code>, <code>ANSWER SECTION:</code>)</li>
<li>the spacing is weird (why is the no newline between <code>OPT PSEUDOSECTION</code> and <code>QUESTION SECTION</code>?)</li>
<li><code>MSG SIZE  rcvd: 47</code> is weird (are there other fields in <code>MSG SIZE</code> other than <code>rcvd</code>? what are they?)</li>
<li>it says that there&rsquo;s 1 record in the ADDITIONAL section but doesn&rsquo;t show it, you have to somehow magically know that the &ldquo;OPT PSEUDOSECTION&rdquo; record is actually in the additional section</li>
</ol>

<p>In general <code>dig</code>&rsquo;s output has the feeling of a script someone wrote in an adhoc
way that grew organically over time and not something that was intentionally
designed.</p>

<h3 id="dealing-with-confusing-tools">dealing with confusing tools</h3>

<p>some ideas for improving on confusing tools:</p>

<ul>
<li><strong>explain the output</strong>. For example I wrote <a href="https://jvns.ca/blog/2021/12/04/how-to-use-dig/">how to use dig</a> explaining how <code>dig</code>&rsquo;s
output works and how to configure it to give you a shorter output by default</li>
<li><strong>make new, more friendly tools</strong>. For example for DNS there&rsquo;s
<a href="https://github.com/ogham/dog">dog</a> and <a href="https://github.com/mr-karan/doggo">doggo</a> and <a href="https://dns-lookup.jvns.ca/">my dns lookup tool</a>. I think these are really cool but
personally I don&rsquo;t use them because sometimes I want to do something a little
more advanced (like using <code>+norecurse</code>) and as far as I can tell neither
<code>dog</code> nor <code>doggo</code> support <code>+norecurse</code>. I&rsquo;d rather use 1 tool for everything,
so I stick to <code>dig</code>. Replacing the breadth of functionality of <code>dig</code> is a
huge undertaking.</li>
<li><strong>make dig&rsquo;s output a little more friendly</strong>. If I were better at C programming,
I might try to write a <code>dig</code> pull request that adds a <code>+human</code> flag to dig
that formats the long form output in a more structured and readable way,
maybe something like this:</li>
</ul>

<pre><code>$ dig +human +norecurse  @8.8.8.8 google.com 
HEADER:
  opcode: QUERY
  status: NOERROR
  id: 11653
  flags: qr ra
  records: QUESTION: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

QUESTION SECTION:
  google.com.			IN	A

ANSWER SECTION:
  google.com.		21	IN	A	172.217.4.206
  
ADDITIONAL SECTION:
  EDNS: version: 0, flags:; udp: 512

EXTRA INFO:
  Time: Fri Jul 28 10:51:01 EDT 2023
  Elapsed: 52 msec
  Server: 8.8.8.8:53
  Protocol: UDP
  Response size: 47 bytes
</code></pre>

<p>This makes the structure of the DNS response more clear &ndash; there&rsquo;s the header, the
question, the answer, and the additional section.</p>

<p>And it&rsquo;s not &ldquo;dumbed down&rdquo; or anything! It&rsquo;s the exact same information, just
formatted in a more structured way. My biggest frustration with alternative DNS
tools that they often remove information in the name of clarity. And though
there&rsquo;s definitely a place for those tools, I want to see all the information!
I just want it to be presented clearly.</p>

<p>We&rsquo;ve learned a lot about how to design more user friendly command line tools
in the last 40 years and I think it would be cool to apply some of that
knowledge to some of our older crustier tools.</p>

<h3 id="dig-yaml">dig +yaml</h3>

<p>One quick note on dig: newer versions of dig do have a <code>+yaml</code> output format
which feels a little clearer to me, though it&rsquo;s too verbose for my taste (a
pretty simple DNS response doesn&rsquo;t fit on my screen)</p>

<h3 id="weird-gotchas">weird gotchas</h3>

<p>DNS has some weird stuff that&rsquo;s relatively common to run into, but pretty hard
to learn about if nobody tells you what&rsquo;s going on. A few examples (there are more in <a href="https://jvns.ca/blog/2022/01/15/some-ways-dns-can-break/">some ways DNS can break</a>:</p>

<ul>
<li>negative caching! (which I talk about in <a href="https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/">this talk</a>) It
took me probably 5 years to realize that I shouldn&rsquo;t visit a domain that
doesn&rsquo;t have a DNS record yet, because then the <strong>nonexistance</strong> of that
record will be cached, and it gets cached for HOURS, and it&rsquo;s really
annoying.</li>
<li>differences in <code>getaddrinfo</code> implementations: until <a href="https://www.theregister.com/2023/05/16/alpine_linux_318/">early 2023</a>, <code>musl</code> didn&rsquo;t support TCP DNS</li>
<li>resolvers that ignore TTLs: if you set a TTL on your DNS records (like &ldquo;5
minutes&rdquo;), some resolvers will ignore those TTLs completely and cache the
records for longer, like maybe 24 hours instead</li>
<li>if you configure nginx wrong (<a href="https://jvns.ca/blog/2022/01/15/some-ways-dns-can-break/#problem-nginx-caching-dns-records-forever">like this</a>), it&rsquo;ll cache DNS records forever.</li>
<li>how <a href="https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html">ndots</a> can make your Kubernetes DNS slow</li>
</ul>

<h3 id="dealing-with-weird-gotchas">dealing with weird gotchas</h3>

<p>I don&rsquo;t have as good answers here as I would like to, but knowledge about weird
gotchas is extremely hard won (again, it took me years to figure out negative
caching!) and it feels very silly to me that people have to rediscover them for
themselves over and over and over again.</p>

<p>A few ideas:</p>

<ul>
<li>It&rsquo;s incredibly helpful when people call out gotchas when explaining a topic. For example (leaving
DNS for a moment), Josh Comeau&rsquo;s Flexbox intro explains this <a href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#the-minimum-size-gotcha-11">minimum size gotcha</a>
which I ran into SO MANY times for several years before finally finding an
explanation of what was going on.</li>
<li>I&rsquo;d love to see more community collections of common gotchas. For bash,
<a href="https://www.shellcheck.net/">shellcheck</a> is an incredible collection of bash
gotchas.</li>
</ul>

<p>One tricky thing about documenting DNS gotchas is that different people are
going to run into different gotchas &ndash; if you&rsquo;re just configuring DNS for your
personal domain once every 3 years, you&rsquo;re probably going to run into different
gotchas than someone who administrates DNS for a domain with heavy traffic.</p>

<p>A couple of more quick reasons:</p>

<h3 id="infrequent-exposure">infrequent exposure</h3>

<p>A lot of people only deal with DNS extremely infrequently. And of course if you
only touch DNS every 3 years it&rsquo;s going to be harder to learn!</p>

<p>I think cheat sheets (like &ldquo;here are the steps to changing your nameservers&rdquo;)
can really help with this.</p>

<h3 id="it-s-hard-to-experiment-with">it&rsquo;s hard to experiment with</h3>

<p>DNS can be scary to experiment with &ndash; you don&rsquo;t want to mess up your domain.
We built <a href="https://messwithdns.net/">Mess With DNS</a> to make this one a little easier.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now</h3>

<p>I&rsquo;d love to hear other thoughts about what makes DNS (or your favourite
mysterious technology) hard to learn.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lima: a nice way to run Linux VMs on Mac]]></title>
    <link href="https://jvns.ca/blog/2023/07/10/lima--a-nice-way-to-run-linux-vms-on-mac/"/>
    <updated>2023-07-10T09:23:08+00:00</updated>
    <id>https://jvns.ca/blog/2023/07/10/lima--a-nice-way-to-run-linux-vms-on-mac/</id>
    <content type="html"><![CDATA[

<p>Hello! Here&rsquo;s a new entry in the &ldquo;cool software julia likes&rdquo; section.</p>

<p>A little while ago I started using a Mac, and one of my biggest
frustrations with it is that often I need to run Linux-specific software. For
example, the <a href="https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/">nginx playground</a> I
posted about the other day only works on Linux because it uses Linux namespaces (via <code>bubblewrap</code>)
to sandbox nginx. And I&rsquo;m working on another playground right now that uses bubblewrap too.</p>

<p>This post is very short, it&rsquo;s just to say that Lima seems nice and much simpler
to get started with than Vagrant.</p>

<h3 id="enter-lima">enter Lima!</h3>

<p>I was complaining about this to a friend, and they mentioned
<a href="https://lima-vm.io/">Lima</a>, which stands for <strong>Li</strong>nux on <strong>Ma</strong>c. I&rsquo;d heard
of <a href="https://github.com/abiosoft/colima">colima</a> (another way to run Linux
containers on Mac), but I hadn&rsquo;t realized that Lima also just lets you run VMs.</p>

<p>It was surprisingly simple to set up. I just had to:</p>

<ol>
<li>Install Lima (I did <code>nix-env -iA nixpkgs.lima</code> but you can also install it with <code>brew install lima</code>)</li>
<li>Run <code>limactl start default</code> to start the VM</li>
<li>Run <code>lima</code> to get a shell</li>
</ol>

<p>That&rsquo;s it! By default it mounts your home directory as read-only inside the VM</p>

<p>There&rsquo;s a config file in <code>~/.lima/default/lima.yaml</code>, but I haven&rsquo;t needed to change it yet.</p>

<h3 id="some-nice-things-about-lima">some nice things about Lima</h3>

<p>Some things I appreciate about Lima (as opposed to Vagrant which I&rsquo;ve used in the past and found kind of frustrating) are:</p>

<ol>
<li>it provides a default config</li>
<li>it automatically downloads a Ubuntu 22.04 image to use in the VM (which is what I would have probably picked anyway)</li>
<li>it mounts my entire home directory inside the VM, which I really like as a default choice (it feels very seamless)</li>
</ol>

<p>I think the paradigm of &ldquo;I have a single chaotic global Linux VM which I use
for all my projects&rdquo; might work better for me than super carefully configured
per-project VMs. Though I&rsquo;m sure that you can have carefully configured
per-project VMs with Lima too if you want, I&rsquo;m just only using the <code>default</code> VM.</p>

<h3 id="problem-1-i-don-t-know-how-to-mount-directories-read-write">problem 1: I don&rsquo;t know how to mount directories read-write</h3>

<p>I wanted to have my entire home directory mounted read-only, but have some
subdirectories (like <code>~/work/nginx-playground</code>) mounted read-write. I did some
research and here&rsquo;s what I found:</p>

<ul>
<li>a comment on <a href="https://github.com/lima-vm/lima/issues/873">this github issue</a> says that you can use <a href="https://github.com/lima-vm/lima/blob/master/docs/vmtype.md#vz">mountType: &ldquo;virtiofs&rdquo; and vmType: &ldquo;vz&rdquo;</a> to mount subdirectories of your home directory read-write</li>
<li>the Lima version packaged in nix 23.05 doesn&rsquo;t seem to support <code>vmType: vz</code> (though I could be wrong about this)</li>
</ul>

<p>Maybe I&rsquo;ll figure out how to mount directories read-write later, I&rsquo;m not too
bothered by working around it for now.</p>

<h3 id="problem-2-networking">problem 2: networking</h3>

<p>I&rsquo;m trying to set up some weird networking stuff (<a href="https://jvns.ca/blog/2022/09/06/send-network-packets-python-tun-tap/">this tun/tap setup</a>)
in Lima and while it appeared to work at first, actually the <code>tun</code> network
device seems to be unreliable in a weird way for reasons I don&rsquo;t understand.</p>

<p>Another weird Lima networking thing: here&rsquo;s what gets printed out when I ping a machine:</p>

<pre><code>$ ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
ping: Warning: time of day goes back (-7148662230695168869us), taking countermeasures
ping: Warning: time of day goes back (-7148662230695168680us), taking countermeasures
64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms
wrong data byte #16 should be 0x10 but was 0x0
#16	0 6 0 1 6c 55 ad 64 0 0 0 0 72 95 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b
#48	1c 1d 1e 1f 20 21 22 23
ping: Warning: time of day goes back (-6518721232815721329us), taking countermeasures
64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)
wrong data byte #16 should be 0x10 but was 0x0
#16	0 6 0 2 6d 55 ad 64 0 0 0 0 2f 9d 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b
#48	1c 1d 1e 1f 20 21 22 23
ping: Warning: time of day goes back (-4844789546316441458us), taking countermeasures
64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)
wrong data byte #16 should be 0x10 but was 0x0
#16	0 6 0 3 6e 55 ad 64 0 0 0 0 69 b3 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b
#48	1c 1d 1e 1f 20 21 22 23
ping: Warning: time of day goes back (-3834857329877608539us), taking countermeasures
64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)
wrong data byte #16 should be 0x10 but was 0x0
#16	0 6 0 4 6f 55 ad 64 0 0 0 0 6c c0 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b
#48	1c 1d 1e 1f 20 21 22 23
ping: Warning: time of day goes back (-2395394298978302982us), taking countermeasures
64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)
wrong data byte #16 should be 0x10 but was 0x0
#16	0 6 0 5 70 55 ad 64 0 0 0 0 65 d3 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b
#48	1c 1d 1e 1f 20 21 22 23
</code></pre>

<p>This seems to be a <a href="https://github.com/lima-vm/lima/issues/193">known issue with ICMP</a>.</p>

<h3 id="why-not-use-containers">why not use containers?</h3>

<p>I wanted a VM and not a Linux container because:</p>

<ol>
<li>the playground runs on a VM in production, not in a container, and generally
it&rsquo;s easier to develop in a similar environment to production</li>
<li>all of my playgrounds use Linux namespaces, and I don&rsquo;t know how to create a
namespace inside a container. Probably you can but I don&rsquo;t feel like
figuring it out and it seems like an unnecessary distraction.</li>
<li>on Mac you need to run containers inside a Linux VM anyway, so I&rsquo;d rather
use a VM directly and not introduce another unnecessary layer</li>
</ol>

<h3 id="orbstack-seems-nice-too">OrbStack seems nice too</h3>

<p>After I wrote this, a bunch of people commented to say that
<a href="https://orbstack.dev/">OrbStack</a> is great. I was struggling with the
networking in Lima (like I mentioned above) so I tried out OrbStack and the network does seem to be better.</p>

<p><code>ping</code> acts normally, unlike in Lima:</p>

<pre><code>$ ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=113 time=19.8 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=113 time=15.9 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=113 time=23.1 ms
64 bytes from 8.8.8.8: icmp_seq=4 ttl=113 time=22.7 ms
</code></pre>

<p>The setup steps for OrbStack are:</p>

<ol>
<li>Download OrbStack from the website</li>
<li>In the GUI, create a VM</li>
<li>Run <code>orb</code></li>
<li>That&rsquo;s it</li>
</ol>

<p>So it seems equally simple to set up.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Some other notes:</p>

<ul>
<li>It looks like Lima works on Linux too</li>
<li>a bunch of people on Mastodon also said <a href="https://github.com/abiosoft/colima">colima</a> (built on top of Lima) is a nice Docker alternative on Mac for running Linux containers</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open sourcing the nginx playground]]></title>
    <link href="https://jvns.ca/blog/2023/07/08/open-sourcing-the-nginx-playground/"/>
    <updated>2023-07-08T09:52:27+00:00</updated>
    <id>https://jvns.ca/blog/2023/07/08/open-sourcing-the-nginx-playground/</id>
    <content type="html"><![CDATA[

<p>Hello! In 2021 I released a small playground for testing nginx configurations
called <a href="https://nginx-playground.wizardzines.com/">nginx playground</a>. There&rsquo;s a
<a href="https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/">blog post about it here</a>.</p>

<p>This is an extremely short post to say that at the time I didn&rsquo;t make it open source,
but I am making it open source now. It&rsquo;s not a lot of code but maybe it&rsquo;ll be
interesting to someone, and maybe someone will even build on it to make more
playgrounds! I&rsquo;d love to see an HAProxy playground or something in a similar vein.</p>

<p>Here&rsquo;s <a href="https://github.com/jvns/nginx-playground/">the github repo</a>. The
frontend is in <code>static/</code> and the backend is in <code>api/</code>. The README is mostly an
extended apology for the developer experience and note that the project is
unmaintained. But I did test that the build instructions work!</p>

<h3 id="why-didn-t-i-open-source-this-before">why didn&rsquo;t I open source this before?</h3>

<p>I&rsquo;m not very good at open source. Some of the problems I have with open sourcing things are:</p>

<ul>
<li>I dislike (and am very bad at) maintaining open source projects &ndash; I usually
ignore basically all feature requests and most bug reports and then feel bad about it.
I handed off maintainership to both of the open source projects that I
started (<a href="https://github.com/rbspy/rbspy">rbspy</a> and <a href="https://github.com/rust-bpf/rust-bcc">rust-bcc</a>) to other people who are doing a MUCH better job than I ever did.</li>
<li>Sometimes the developer experience for the project is pretty bad</li>
<li>Sometimes there&rsquo;s configuration in the project (like the <code>fly.toml</code> or the
analytics I have set up) which don&rsquo;t really make sense for other people to
copy</li>
</ul>

<h3 id="new-approach-don-t-pretend-i-m-going-to-improve-it">new approach: don&rsquo;t pretend I&rsquo;m going to improve it</h3>

<p>In the past I&rsquo;ve had some kind of belief that I&rsquo;m going to improve the problems
with my code later. But I haven&rsquo;t touched this project in more than a year and
I think it&rsquo;s unlikely I&rsquo;m going to go back to it unless it breaks in some dramatic way.</p>

<p>So instead of pretending I&rsquo;m going to improve things, I decided to just:</p>

<ul>
<li>tell people in the README that the project is unmaintained</li>
<li>write down all the security caveats I know about</li>
<li>test the build instructions I wrote to make sure that they work (on a fresh machine, even!)</li>
<li>explain (but do not fix!!) some of the messy parts of the project</li>
</ul>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Maybe I will open source more of my tiny projects in the future, we&rsquo;ll see!
Thanks to <a href="https://www.changeset.nyc/">Sumana Harihareswara</a> for helping me
think through this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New zine: How Integers and Floats Work]]></title>
    <link href="https://jvns.ca/blog/2023/06/23/new-zine--how-integers-and-floats-work/"/>
    <updated>2023-06-23T09:27:16+00:00</updated>
    <id>https://jvns.ca/blog/2023/06/23/new-zine--how-integers-and-floats-work/</id>
    <content type="html"><![CDATA[

<p>Hello! On Wednesday, we released a new zine: <strong>How Integers and Floats Work</strong>!</p>

<p>You can get it for $12 here:
<a href="https://wizardzines.com/zines/integers-floats">https://wizardzines.com/zines/integers-floats</a>, or get
an <a href="https://wizardzines.com/zines/all-the-zines/">13-pack of all my zines here</a>.</p>

<p>Here&rsquo;s the cover:</p>

<div align="center">
<a href="https://wizardzines.com/zines/integers-floats"><img width="600px" src="https://wizardzines.com/zines/integers-floats/cover.png"></a>
</div>

<h3 id="the-table-of-contents">the table of contents</h3>

<p>Here&rsquo;s the table of contents!</p>

<p><a href="https://wizardzines.com/zines/integers-floats/toc.png">
  <img width="600px" src="https://wizardzines.com/zines/integers-floats/toc.png"></a></p>

<p>Now let&rsquo;s talk about some of the motivations for writing this zine!</p>

<h3 id="motivation-1-demystify-binary">motivation 1: demystify binary</h3>

<p>I wrote this zine because I used to find binary data really impenetrable. There
are all these 0s and 1s! What does it mean?</p>

<p>But if you look at any binary file format, most of it is integers! For example,
if you look at the DNS parsing in <a href="https://implement-dns.wizardzines.com/">Implement DNS in a Weekend</a>, it&rsquo;s all about encoding and
decoding a bunch of integers (plus some ASCII strings, which arguably are also arrays of integers).</p>

<p>So I think that learning how integers work in depth is a really nice way to get
started with understanding binary file formats. The zine also talks about some
other tricks for encoding binary data into integers with binary operations and
bit flags.</p>

<h3 id="motivation-2-explain-floating-point">motivation 2: explain floating point</h3>

<p>The second motivation was to explain floating point. Floating point is pretty
weird! (see [examples of floating point problems]()
for a very long list)</p>

<p>And almost all explanations of floating point I&rsquo;ve read have been really math
and notation heavy in a way that I find pretty unpleasant and confusing, even
though I love math more than most people (I did a pure math degree) and am
pretty good at it.</p>

<p>We spent weeks working on a clearer explanation of floating point with minimal
math jargon and lots of pictures and I think we got there. Here&rsquo;s one example page, on
the floating point number line:</p>

<p><img src="https://wizardzines.com/zines/integers-floats/samples/2-floating-point.png"></p>

<h3 id="it-comes-with-a-playground-memory-spy">it comes with a playground: memory spy!</h3>

<p>One of my favourite ways to learn about how my computer represents things in
memory has been to use a debugger to look at the memory of a real program.</p>

<p>But C debuggers like gdb are pretty hard to use at first! So
<a href="https://marieflanagan.com/">Marie</a> and I made a playground called <a href="https://memory-spy.wizardzines.com/">Memory Spy</a>. It runs a C debugger behind the
scenes, but it provides a much simpler interface &ndash; there are a bunch of
very simple example C programs, and you can just click on each line to view how
the variable on that line is represented in memory.</p>

<p>Here&rsquo;s a screenshot:</p>

<div align="center">
<img src="https://jvns.ca/images/memory-spy.png" width="400px">
</div>

<p>Memory Spy is inspired by Philip Guo&rsquo;s great <a href="https://pythontutor.com/">Python Tutor</a>.</p>

<h3 id="float-exposed-is-great">float.exposed is great</h3>

<p>When doing demos and research for this zine, I found myself reaching for
<a href="https://float.exposed/">float.exposed</a> a lot to show how numbers are encoded
in floating point. It&rsquo;s by <a href="https://ciechanow.ski/">Bartosz Ciechanowski</a>, who has tons of other great visualizations on his site.</p>

<p>I loved it so much that I made a clone called <a href="https://integer.exposed">integer.exposed</a> for
integers (with permission), so that people could look at integers in a similar way.</p>

<h3 id="some-blog-posts-i-wrote-along-the-way">some blog posts I wrote along the way</h3>

<p>Here are a few blog posts I wrote while thinking about how to write this zine:</p>

<ul>
<li><a href="https://jvns.ca/blog/2023/01/13/examples-of-floating-point-problems/">examples of floating point problems</a></li>
<li><a href="https://jvns.ca/blog/2023/01/18/examples-of-problems-with-integers/">examples of problems with integers</a></li>
<li><a href="https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/">some possible reasons for 8-bit bytes</a></li>
</ul>

<h3 id="you-can-get-a-print-copy-shipped-to-you">you can get a print copy shipped to you!</h3>

<p>There&rsquo;s always been the option to print the zines yourself on your home
printer.</p>

<p>But this time there&rsquo;s a new option too: you can get a print copy shipped to
you! (just click on the &ldquo;print version&rdquo; link on <a href="https://wizardzines.com/zines/integers-floats/">this page</a>)</p>

<p>The only caveat is print orders will ship in <strong>August</strong> &ndash; I
need to wait for orders to come in to get an idea of how many I should print
before sending it to the printer.</p>

<h3 id="people-who-helped-with-this-zine">people who helped with this zine</h3>

<p>I don&rsquo;t make these zines by myself!</p>

<p>I worked with <a href="https://marieflanagan.com/">Marie LeBlanc Flanagan</a> every
morning for 5 months to clarify explanations and build <a href="https://memory-spy.wizardzines.com">memory spy</a>.</p>

<p>The cover is by Vladimir Kašiković, Gersande La Flèche did copy editing, Dolly
Lanuza did editing, another friend did technical review.</p>

<p><a href="https://karpinski.org/">Stefan Karpinski</a> gave a talk 10 years ago at the Recurse Center (I even <a href="https://jvns.ca/blog/2013/11/13/day-27-magic-testing-functions/">blogged about it at the time</a>)
which was the first explanation of floating point that ever made any sense to
me. He also explained how signed integers work to me in a Mastodon post a few
months ago, when I was in the middle of writing the zine.</p>

<p>And finally, I want to thank all the beta readers &ndash; 60 of you read the zine and left
comments about what was confusing, what was working, and ideas for how to make
it better. It made the end product so much better.</p>

<h3 id="thank-you">thank you</h3>

<p>As always: if you&rsquo;ve bought zines in the past, thank you for all your support
over the years. I couldn&rsquo;t do this without you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some blogging myths]]></title>
    <link href="https://jvns.ca/blog/2023/06/05/some-blogging-myths/"/>
    <updated>2023-06-05T07:30:34+00:00</updated>
    <id>https://jvns.ca/blog/2023/06/05/some-blogging-myths/</id>
    <content type="html"><![CDATA[

<p>A few years ago I gave a short talk (<a href="https://jvns.ca/blog/2020/12/10/day-24--a-short-talk-about-blogging-myths/">slides</a>)
about myths that discourage people from blogging. I was chatting with a friend
about blogging the other day and it made me want to write up that talk as a
blog post.</p>

<p>here are the myths:</p>

<ul>
<li><a href="#myth-you-need-to-be-original">myth: you need to be original</a></li>
<li><a href="#myth-you-need-to-be-an-expert">myth: you need to be an expert</a></li>
<li><a href="#myth-posts-need-to-be-100-correct">myth: posts need to be 100% correct</a></li>
<li><a href="#myth-writing-boring-posts-is-bad">myth: writing boring posts is bad</a></li>
<li><a href="#myth-you-need-to-explain-every-concept">myth: you need to explain every concept</a></li>
<li><a href="#myth-page-views-matter">myth: page views matter</a></li>
<li><a href="#myth-more-material-is-always-better">myth: more material is always better</a></li>
<li><a href="#myth-everyone-should-blog">myth: everyone should blog</a></li>
</ul>

<h3 id="myth-you-need-to-be-original">myth: you need to be original</h3>

<p>This is probably the one I hear the most often &ndash; &ldquo;Someone has written about
this before! Who&rsquo;s going to care about what I have to say?&ldquo;.</p>

<p>The main way I think about this personally is:</p>

<ol>
<li>identify something I personally have found confusing or interesting</li>
<li>write about it</li>
</ol>

<p>The idea is that if I found it confusing, lots of other people probably did
too, even though the information might theoretically be out there on the
internet somewhere. Just because there is information on the internet, it
doesn&rsquo;t get magically teleported into people&rsquo;s brains!</p>

<p>I sometimes store up things that I find confusing for many months or years &ndash;
for example right now I&rsquo;m confused about some specific details of how Docker
networking works on Mac, but I haven&rsquo;t figured it out enough to be able to
write about it. If I ever figure it out to my satisfaction I&rsquo;ll probably write
a blog post.</p>

<p>Sometimes when I write a blog post, someone will link me to a great existing
explanation of the thing that I hadn&rsquo;t seen. I try to think of this as a good
thing &ndash; it means that I get a new resource that I couldn&rsquo;t find, and maybe
other people find out about it too. Often I&rsquo;ll update the blog post to link
to it.</p>

<p>A couple of other notes about this one:</p>

<ul>
<li>technology changes, and the details matter. Maybe the exact details about how to do something have changed in the last 5 years, and there isn&rsquo;t much written about the situation in 2023!</li>
<li>personal stories are really valuable. For example I love my friend Mikkel&rsquo;s <a href="https://mikkel.ca/blog/git-is-my-buddy-effective-solo-developer/">Git is my buddy</a> post about how he uses Git. It&rsquo;s not the same way that I use it, and I like seeing his approach.</li>
</ul>

<h3 id="a-bit-more-about-my-love-for-personal-stories">a bit more about my love for personal stories</h3>

<p>I think the reason I keep writing these blog posts encouraging people to blog
is that I <em>love</em> reading people&rsquo;s personal stories about how they do stuff with
computers, and I want more of them. For example, I started using a Mac
recently, and I&rsquo;ve been very annoyed by the lack of tracing tools like strace.</p>

<p>So I would love to read a story about how someone is using tracing tools to debug on
their Mac in 2023! I found <a href="https://bryce.is/writing/code/2016/07/30/debugging-using-system-calls.html">one from 2016</a>,
but I think the situation with system integrity protection has changed since
then and the instructions don&rsquo;t work for me.</p>

<p>That&rsquo;s just one example, but there are a million other things on computers that
I do not know how to do, where I would love to read 1 person&rsquo;s story of exactly
how they did it in 2023.</p>

<h3 id="myth-you-need-to-be-an-expert">myth: you need to be an expert</h3>

<p>The second myth is that you need to be an expert in the thing you&rsquo;re writing
about. If you&rsquo;ve been reading this blog, you probably know that I&rsquo;ve
written a lot of &ldquo;hey, I just learned this!&rdquo; posts over the years, where I:</p>

<ol>
<li>Learn an interesting thing (&ldquo;hey, I didn&rsquo;t know how gdb works, that&rsquo;s cool!&rdquo;)</li>
<li>Write a short blog post about what I learned (<a href="https://jvns.ca/blog/2016/08/10/how-does-gdb-work/">how does gdb work?</a>)</li>
</ol>

<p>You actually just need to know 1-2 interesting things that the reader doesn&rsquo;t.
And if you just learned the thing yesterday, it&rsquo;s certain that lots of other
people don&rsquo;t know it either.</p>

<h3 id="myth-posts-need-to-be-100-correct">myth: posts need to be 100% correct</h3>

<p>I try to my make my posts <em>mostly</em> correct, and I&rsquo;ve gotten a bit better at
that over time.</p>

<p>My main strategy here is to just add qualifiers like &ldquo;My understanding is..&rdquo; or
&ldquo;I think..&rdquo; before statements that I&rsquo;m not totally sure of. This saves a lot of
time fact checking statements that I&rsquo;m honestly not sure how to fact check most
of the time.</p>

<p>Some examples of &ldquo;I think&hellip;s&rdquo; from  my past blog posts:</p>

<blockquote>
<p>I think people are replacing &ldquo;how many golf balls can fit in the Empire State Building&rdquo; with more concrete [interview] questions about estimating program runtime and space requirements.</p>

<p>I think the most important thing with bridges is to set up the route tables correctly. So far my understanding is that there are 2 route table entries you need to set: &hellip;</p>

<p>Etsy uses PHP, which I think means they can&rsquo;t have long-lived persistent TCP connections</p>

<p>I think the MTU on my local network is 1500 bytes.</p>
</blockquote>

<p>I still don&rsquo;t know if all of those statements are true (is it true that PHP
programs can&rsquo;t have long-lived persistent TCP connections? maybe not!), so the
qualifiers are useful. I don&rsquo;t really know anything about PHP so I don&rsquo;t have
much interest in fact checking that PHP statement &ndash; I&rsquo;m happy to leave it as
an &ldquo;I think&rdquo; and potentially correct later it if someone tells me it&rsquo;s wrong.</p>

<p>I do tend to overdo the &ldquo;I think that&hellip;&rdquo; statements a bit (bad habit!) and
sometimes I need to edit them out when actually it&rsquo;s something I&rsquo;m 100% sure
of.</p>

<h3 id="myth-writing-boring-posts-is-bad">myth: writing boring posts is bad</h3>

<p>The reality of publishing things on the internet is that interesting things get
boosted, and boring things get ignored. So people are basically guaranteed to
think your posts are much more interesting that they actually are, because
they&rsquo;re more likely to see your interesting posts.</p>

<p>Also it&rsquo;s hard to guess in advance what people will think is interesting, so I
try to not worry too much about predicting that in advance.  I really
Darius Kazemi&rsquo;s <a href="https://www.youtube.com/watch?v=l_F9jxsfGCw">How I Won The Lottery</a> talk on this topic about
how putting things on the internet is like buying lots of lottery tickets, and
the best way to &ldquo;win&rdquo; is to make a lot of stuff.</p>

<h3 id="myth-you-need-to-explain-every-concept">myth: you need to explain every concept</h3>

<p>It&rsquo;s common for people writing advanced posts (like &ldquo;how malloc works&rdquo;) to try
to include very basic definitions for beginners.</p>

<p>The problem is that you end up writing something that feels like it wasn&rsquo;t
written for <strong>anyone</strong>: beginners will get confused (it&rsquo;s very hard to bring
someone from &ldquo;I have no idea what memory allocation is&rdquo; to &ldquo;in depth notes
about the internals of malloc&rdquo; in a single blog post), and more advanced
readers will be bored and put off by the overly basic explanations.</p>

<p>I found that the easiest way to start was to <strong>pick one person and write for them</strong>.</p>

<p>You can pick a friend, a coworker, or just a past version of yourself. Writing
for just 1 person might feel insufficiently general (&ldquo;what about all the other
people??&ldquo;) but writing that’s easy to understand for 1 person (other than you!)
has a good chance of being easy to understand for many other people as well.</p>

<h3 id="writing-has-gotten-harder-as-i-get-more-experienced">writing has gotten harder as I get more experienced</h3>

<p>Someone who read this mentioned that they feel like writing has gotten harder as they get more experienced, and I feel the same way.</p>

<p>I think this is because the gap between me and who I&rsquo;m writing for has gotten a
bigger over time, and so it gets a little harder for me to relate to people who
know less about the topic. I think on the balance having more experience makes
my writing better (I have more perspective!), but it feels harder.</p>

<p>I don&rsquo;t have any advice to give about this right now. I just want to
acknowledge that it&rsquo;s hard because someone who read a draft of this mentioned it.</p>

<h3 id="myth-page-views-matter">myth: page views matter</h3>

<p>I&rsquo;ve looked at page view analytics a lot in my life, and I&rsquo;ve never really gotten anything out of it. Comments like this one mean a lot more to me:</p>

<blockquote>
<p>Hey, @b0rk. Just wanted to let you know that <a href="https://jvns.ca/blog/2018/09/01/learning-skills-you-can-practice/">this post</a> really helped me to improve my skill of understanding a complex concept. Thanks! :)</p>
</blockquote>

<p>If it helps one person, I figure I&rsquo;ve won. And probably it helped 10 other people who didn&rsquo;t say anything too!</p>

<h3 id="myth-more-material-is-always-better">myth: more material is always better</h3>

<p>I appreciate the work that goes into extremely deep dive blog posts, but
honestly they&rsquo;re not really my thing. I&rsquo;d rather read something short, learn a
couple of new things, and move on.</p>

<p>So that&rsquo;s how I approach writing as well. I&rsquo;ll share a couple of interesting
things and then leave anything extra for another post. For me this works well
because short posts take less time to write.</p>

<p>This one is obviously a personal preference: short posts aren&rsquo;t &ldquo;better&rdquo;
either, I just like them more.</p>

<p>But I often see people get tripped up by wanting to include EVERYTHING in their
blog post and then never publishing anything and I think it&rsquo;s worth considering just
making the post shorter and publishing it.</p>

<h3 id="some-notes-on-pedantic-annoying-comments">some notes on pedantic/annoying comments</h3>

<p>Someone who read a draft of this mentioned struggling with comments that are
pedantic or annoying or mean or argumentative. That one&rsquo;s definitely not a
myth, I&rsquo;ve read a lot of comments like that about my work. (as well as a lot
more comments where people are being constructive, but those ones
aren&rsquo;t the problem)</p>

<p>A few notes on how I deal with it:</p>

<ul>
<li>The &ldquo;don&rsquo;t read the comments&rdquo; advice has never worked for me, for better or
for worse. I read all of them.</li>
<li>I don&rsquo;t reply to them. Even if they&rsquo;re <a href="https://xkcd.com/386/">wrong</a>. I dislike arguing on the
internet and I&rsquo;m extremely bad at it, so it&rsquo;s not a good use of my time.</li>
<li>Sometimes I can learn something new from the comment, and I try to take that
as a win, even if the thing is kind of minor or the comment is phrased in a
way that I find annoying.</li>
<li>Sometimes I&rsquo;ll update the post to fix mistakes.</li>
<li>I&rsquo;ve sometimes found it helpful to reinterpret people being mad as people being
confused or curious. I wrote a <a href="https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/">toy DNS resolver</a> once and some of the commenters
were upset that I didn&rsquo;t handle parsing the DNS packet. At the time I thought
this was silly (I thought DNS parsing was really straightforward and that it was obvious
how to do it) but I realized that maybe the commenters didn&rsquo;t think it was
easy or obvious, and wanted to know how do it. Which makes sense! It&rsquo;s not
obvious! Those comments partly inspired
<a href="https://implement-dns.wizardzines.com/">implement DNS in a weekend</a>, which focuses much more heavily on the parsing aspects.</li>
</ul>

<p>As with everything I don&rsquo;t think this is the &ldquo;best&rdquo; way to deal with
pedantic/annoying comments, it&rsquo;s just what I do.</p>

<h3 id="myth-everyone-should-blog">myth: everyone should blog</h3>

<p>I sometimes see advice to the effect of &ldquo;blogging is great! public speaking is
great! everyone should do it! build your Personal Brand!&ldquo;.</p>

<p>Blogging isn&rsquo;t for everyone. Tons of amazing developers don&rsquo;t have blogs or
personal websites at all. I write because it&rsquo;s fun for me and it helps me
organize my thoughts.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>Probably I&rsquo;ll write another meta post about blogging in a couple of years since
apparently that&rsquo;s what I do :)</p>

<p><small>Thanks to Ed, Jeff, Brian, Hazem, Zachary, and Miccah for reading a draft of this</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New playground: memory spy]]></title>
    <link href="https://jvns.ca/blog/2023/05/25/new-playground--memory-spy/"/>
    <updated>2023-05-25T08:05:31+00:00</updated>
    <id>https://jvns.ca/blog/2023/05/25/new-playground--memory-spy/</id>
    <content type="html"><![CDATA[

<p>Hello! Today we&rsquo;re releasing a new playground called &ldquo;memory spy&rdquo;. It lets you run C programs
and see how their variables are represented in memory. It&rsquo;s designed to be
accessible to folks who don&rsquo;t know C &ndash; it comes with bunch of extremely simple
example C programs that you can poke at. Here&rsquo;s the link:</p>

<div style="margin: 1em 0" align="center">
&gt;&gt; <a href="https://memory-spy.wizardzines.com">Memory Spy</a> &lt;&lt;
</div>

<p>This is a companion to the &ldquo;how integers and floats work&rdquo; <a href="https://wizardzines.com">zine</a> we&rsquo;ve been
working on, so the goal is mostly to look at how number types (integers and
floats) are represented.</p>

<h3 id="why-spy-on-memory">why spy on memory?</h3>

<p>How computers actually represent variables can seem kind of abstract, so  I
wanted to make it easy for folks to see how a real computer actually represents
variables in memory.</p>

<h3 id="why-is-it-useful-to-look-at-c">why is it useful to look at C?</h3>

<p>You might be wondering &ndash; I don&rsquo;t write C! Why should I care how C programs
represent variables in memory?</p>

<p>In this playground I&rsquo;m mostly interested in showing people how integers and
floats are represented. And low-level languages generally all represent
integers and floats in the same way &ndash; a 32-bit unsigned int is going to be the
same in C, C++, Rust, Go, Swift, etc. The exact name of the type is different,
but the representation is the same.</p>

<p>In higher-level languages like Python it&rsquo;s a little different, but under the
hood a <code>float</code> in Python contains a C <code>double</code>, so the C representation is
still pretty relevant.</p>

<h3 id="you-don-t-have-to-know-c">you don&rsquo;t have to know C</h3>

<p>It uses C because C is the language where it&rsquo;s the most straightforward to map
between &ldquo;the code in your program&rdquo; and &ldquo;what&rsquo;s in your computer&rsquo;s memory&rdquo;.</p>

<p>But if you&rsquo;re not comfortable with C, this playground is still for you! We put
together a bunch of example programs where you can run them and look at each
variable&rsquo;s value.</p>

<p>None of the example programs use any fancy features of C &ndash; a lot of the code
is extremely simple, like <code>char byte = 'a';</code>. So you should be mostly
able to understand what&rsquo;s going on even if you don&rsquo;t know C at all.</p>

<h3 id="how-does-it-work">how does it work?</h3>

<p>Behind the scenes, there&rsquo;s a server that:</p>

<ul>
<li>compiles the program with <code>clang</code></li>
<li>runs the program with the C debugger <code>lldb</code> (using a Python lldb script)</li>
<li>returns a JSON file with the values of the variable on every line, as an array of bytes</li>
</ul>

<p>Then the frontend formats the array of bytes so you can look at it. The display
logic isn&rsquo;t very fancy &ndash; ultimately it&rsquo;s a pretty thin wrapper around lldb.</p>

<h3 id="some-limitations">some limitations</h3>

<p>The two main limitations I can think of right now are:</p>

<ul>
<li>there&rsquo;s no support for loops (it&rsquo;ll run them, but it&rsquo;ll only tell you the value of the variable the first time through the loop)</li>
<li>it only supports defining one variable per line</li>
</ul>

<p>There are probably more, it&rsquo;s a very simple project.</p>

<h3 id="the-inspiration">the inspiration</h3>

<p><a href="https://pythontutor.com/">Python Tutor</a> by Philip Guo was a huge inspiration. It has a different focus &ndash; it also lets you step through programs in a
debugger, but it&rsquo;s more focused on helping the user build a mental model for
how variables and control flow work.</p>

<h3 id="what-about-security">what about security?</h3>

<p>In general my approach to running arbitrary untrusted code is 20% sandboxing
and 80% making sure that it&rsquo;s an extremely low value attack target so it&rsquo;s not
worth trying to break in.</p>

<p>Programs are terminated after 1 second of runtime, they run in a container with
no network access, and the machine they&rsquo;re running on has no sensitive data on
it and a very small CPU.</p>

<h3 id="some-notes-on-the-tech-stack">some notes on the tech stack</h3>

<p>The backend is in Go, plus a Python script to script the interactions with
lldb. (here&rsquo;s <a href="https://gist.github.com/jvns/7f1eff7cdda26412cc8df280a1641fd4">the source for the lldb script</a> and <a href="https://gist.github.com/jvns/14b8f65537004a56013260d9219ef36f">the source for the Go server right now</a>). I&rsquo;m
using <a href="https://jvns.ca/blog/2022/06/28/some-notes-on-bubblewrap/">bubblewrap</a>
to sandbox lldb.</p>

<p>As always the frontend is using Vue. You can see the frontend source with &ldquo;view
source&rdquo; if you want.</p>

<p>The main fancy thing that happens on the frontend is that I use <a href="https://tree-sitter.github.io/tree-sitter/">tree sitter</a> to figure out which lines
of the code have variables defined on them.</p>

<h3 id="some-design-notes">some design notes</h3>

<p>As usual these days, I built this project with <a href="https://marieflanagan.com/">Marie Claire LeBlanc Flanagan</a>. I think the
design decision I&rsquo;m the happiest with is how we handled navigating the program you&rsquo;re running.
Instead of using next/previous arrows to step through the code one line at a
time, you can just click on a line to view its variables.</p>

<p>This &ldquo;click on a line&rdquo; design wouldn&rsquo;t make sense in a normal debugger context
because usually you have loops and a line might be run more than once. But our
focus here isn&rsquo;t on control flow, and none of the example programs have loops.</p>

<p>The other thing I&rsquo;m happy with is the decision to use regular links like (<code>&lt;a href=&quot;#example=hexadecimal&quot;&gt;</code>) for all the navigation. There&rsquo;s an
<code>onhashchange</code> Javascript event that takes care of making sure we update the
page to match the new URL.</p>

<p>I think there were more design struggles but I forget what they were right now.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Here&rsquo;s the link again:</p>

<div style="margin: 1em 0" align="center">
&gt;&gt; <a href="https://memory-spy.wizardzines.com">Memory Spy</a> &lt;&lt;
</div>

<p>Let me know on Twitter or Mastodon if you notice any problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing "Implement DNS in a Weekend"]]></title>
    <link href="https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/"/>
    <updated>2023-05-12T07:04:32+00:00</updated>
    <id>https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;m excited to announce a project I&rsquo;ve been working on for a long time:
a free guide to implementing your own DNS resolver in a weekend.</p>

<p>The whole thing is about 200 lines of Python, including implementing all of the
binary DNS parsing from scratch. Here&rsquo;s the link:</p>

<div align="center" style="margin: 1em 0">
&gt;&gt; <a href="https://implement-dns.wizardzines.com">Implement DNS in a Weekend</a> &lt;&lt;
</div>

<p>This project is a fun way to learn:</p>

<ul>
<li>How to parse a binary network protocol like DNS</li>
<li>How DNS works behind the scenes (what&rsquo;s actually happening when you make a DNS query?)</li>
</ul>

<p>The testers have reported that it takes around 2-4 hours to do in Python.</p>

<h3 id="what-s-a-dns-resolver">what&rsquo;s a DNS resolver?</h3>

<p>A DNS resolver is a program that knows how to figure out what the IP address
for a domain is. Here’s what the command line interface of the resolver you&rsquo;ll
write looks like:</p>

<pre><code>$ python3 resolve.py example.com
93.184.216.34
</code></pre>

<h3 id="implementing-dns-gives-me-an-amazing-sense-of-confidence">implementing DNS gives me an amazing sense of confidence</h3>

<p>In <a href="https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/">Learning DNS in 10 years</a>, I
talked about how having implemented a toy version of DNS myself from scratch gives
me an unparalleled sense of confidence in my understanding of DNS.</p>

<p>So this guide is my attempt to share that sense of confidence with you all.</p>

<p>Also, if you&rsquo;ve bought <a href="https://wizardzines.com/zines/dns">How DNS Works</a>, I think
this guide is a nice companion &ndash; you can implement your own DNS
resolver to solidify your understanding of the concepts in the zine.</p>

<h3 id="it-s-a-jupyter-notebook">it&rsquo;s a Jupyter notebook</h3>

<p>In this guide, I wanted to mix code that you could run with explanations. I
struggled to figure out the right format for months, and then I finally thought
of using a <a href="https://jupyter.org/">Jupyter notebook</a>! This meant that I could easily check that all of
the code actually ran.</p>

<p>I used <a href="https://jupyterbook.org">Jupyter Book</a> to convert the Jupyter notebooks
into a website. It reruns the notebook before converting it to HTML, so I could
easily guarantee that all of the code actually runs and outputs what it says
that it outputs. I ended up hacking the theme a lot to make it more minimal, as
well as doing some terrible things with Beautiful Soup to get a table of
contents that shows you the global TOC as well as the page&rsquo;s local section
headings all in one place.</p>

<p>You can also download the Jupyter notebooks and run them on your own computer
if you&rsquo;d like, using the &ldquo;download the code&rdquo; button on the <a href="https://implement-dns.wizardzines.com/">homepage</a>.</p>

<h3 id="why-python">why Python?</h3>

<p>I used Python for this guide instead of a lower-level language like Go or Rust
to make it more approachable &ndash; when I started learning networking 10 years
ago, I didn&rsquo;t really know any systems languages well, and I found them kind of
intimidating. Implementing <a href="https://jvns.ca/blog/2013/10/31/day-20-scapy-and-traceroute/">traceroute using scapy in Python</a>  felt
much less scary.</p>

<p>You can very easily pack/unpack binary data in Python with <code>struct.pack</code> and
<code>struct.unpack</code>, so Python being a higher-level language doesn&rsquo;t really cause
any problems.</p>

<p>The idea is that you can either follow the guide in Python (which is the
easiest mode), or if you want a bigger challenge, you can translate the code to
any language you&rsquo;d like. (Go? Javascript? Rust? Bash? Lua? Ruby?)</p>

<h3 id="only-the-standard-library">only the standard library</h3>

<p>It was important to me to really show how to implement DNS &ldquo;from scratch&rdquo;, so
the guide only uses a few very basic standard library modules: <code>struct</code>,
<code>socket</code>, <code>io</code>, <code>random</code>, and <code>dataclasses</code>.</p>

<p>Here&rsquo;s what we use each module for:</p>

<ul>
<li><code>random</code> is used for generating DNS query IDs</li>
<li><code>socket</code> is used to make a UDP connection</li>
<li><code>struct</code> is used for converting to/from binary (<code>struct.pack</code> and <code>struct.unpack</code>)</li>
<li><code>dataclasses</code> are used to make serializing / deserializing records a little more ergonomic</li>
<li><code>io</code> is used for <code>BytesIO</code>, which gives us a reader interface which stores a
pointer to how much of the packet we&rsquo;ve read so far. If I were implementing
DNS in a language that didn&rsquo;t have this kind of reader interface, I might
implement my own.</li>
</ul>

<h3 id="it-includes-some-bonus-exercises">it includes some bonus exercises</h3>

<p>The toy DNS resolver is obviously missing a bunch of important features, so
I&rsquo;ve added some exercises at the end with examples of features you could add
(and bugs you could fix) to make it a little more like a &ldquo;real&rdquo; DNS resolver.</p>

<p>This list isn&rsquo;t particularly exhaustive though, and I&rsquo;d love to hear other
ideas for relatively-easy-to-implement DNS resolver features I&rsquo;ve missed.</p>

<h3 id="next-goal-tls">next goal: TLS</h3>

<p>I&rsquo;ve actually written toy implementations of a bunch of other network protocols
in Python (ICMP, UDP, TCP, HTTP, and TLS), and I&rsquo;m hoping to release &ldquo;Implement
TLS in a weekend&rdquo; at some point.</p>

<p>No promises though &ndash; I have another zine to finish writing first (on all the
surprising things about how integers and floats work on computers), and a toy
TLS implementation is quite a bit more involved than a toy DNS implementation.</p>

<h3 id="thanks-to-the-beta-testers">thanks to the beta testers</h3>

<p>Thanks to everyone (Atticus, Miccah, Enric, Ben, Ben, Maryanne, Adam, Jordan,
and anyone else I missed) who tested this guide and reported confusing or
missing explanations, mistakes, and typos.</p>

<p>Also a huge thanks to my friend Allison Kaptur who designed the first &ldquo;Domain
Name Saturday&rdquo; workshop with me at the Recurse Center in 2020.</p>

<p>The name was inspired by <a href="https://raytracing.github.io/">Ray Tracing in One Weekend</a>.</p>

<h3 id="here-s-the-link-again">here&rsquo;s the link again</h3>

<p>Here&rsquo;s the link to the guide again if you&rsquo;d like to try it out:</p>

<div align="center" style="margin: 1em 0">
&gt;&gt; <a href="https://implement-dns.wizardzines.com">Implement DNS in a Weekend</a> &lt;&lt;
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New talk: Learning DNS in 10 years]]></title>
    <link href="https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/"/>
    <updated>2023-05-08T09:53:29+00:00</updated>
    <id>https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/</id>
    <content type="html"><![CDATA[

<p>Here&rsquo;s a keynote I gave at <a href="https://www.rubyconfmini.com/">RubyConf Mini</a> last year: Learning DNS in 10 years.
It&rsquo;s about strategies I use to learn hard things. I just noticed that they&rsquo;d
released the video the other day, so I&rsquo;m just posting it now even though I gave
the talk 6 months ago.</p>

<p>Here&rsquo;s the video, as well as the slides and a transcript of (roughly) what I
said in the talk.</p>

<h3 id="the-video">the video</h3>

<iframe width="560" height="315" src="https://www.youtube.com/embed/tsxjNsFu_2g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

<h3 id="the-transcript">the transcript</h3>

<style>
.container{
  display:flex;
}
.slide {
  width:40%;
  border-bottom: 2px #ccc dashed;
  padding: 10px 0px;
}

.slide img {
  width: 100%;
}
.content{
  width:60%;
  align-items:center;
  padding:20px;
}
@media (max-width: 480px) 
{
  .container{
    display:block;
  }
  .slide, .content {
    width:100%;
  }
}
</style>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-01.png"><img src="https://jvns.ca/images/2022-railsconf/slide-01.png"></a>
</div>
<div class="content">
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-02.png"><img src="https://jvns.ca/images/2022-railsconf/slide-02.png"></a>
</div>
<div class="content">
You all got this zine (<a href="https://wizardzines.com/zines/dns/">How DNS Works</a>) in your swag bags -- thanks to RubyConf for printing it!


</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-03.png"><img src="https://jvns.ca/images/2022-railsconf/slide-03.png"></a>
</div>
<div class="content">
But this talk is
not really about DNS. I mean, this is a Ruby conference, right? So this talk is
really about learning hard things, and DNS is an example of something that was
hard for me to learn. </div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-04.png"><img src="https://jvns.ca/images/2022-railsconf/slide-04.png"></a>
</div>
<div class="content">
It took me maybe 16 years from the first time
that like I bought a domain name and set up my DNS records to when I really
felt like I understood how the system worked.

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-05.png"><img src="https://jvns.ca/images/2022-railsconf/slide-05.png"></a>
</div>
<div class="content">
And one thing I want to say at the beginning of this talk, is that I think that
taking like 16 years to learn something like DNS is kind of normal. The idea
that "I should understand this already" is a bit silly. For me, I was doing
other stuff for most of the 16 years! There was other stuff I wanted to learn.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-06.png"><img src="https://jvns.ca/images/2022-railsconf/slide-06.png"></a>
</div>
<div class="content">
And so, this talk is not about how you should learn about any particular
thing. I don't care if you learn how DNS works! It's really about how to
approach learning something hard that's a priority for you to learn.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-07.png"><img src="https://jvns.ca/images/2022-railsconf/slide-07.png"></a>
</div>
<div class="content">
<p>
So, we're going to talk about learning through
a series of tiny deep dives. My favorite way of learning things is to do
nothing, most of the time. 
</p>

<p>
That's why it takes 10 years.
</p>

<p>
So for six months I'll do nothing and then like I'll furiously learn something
for maybe 30 minutes or three hours or an afternoon. And then I'll declare
success and go back to doing nothing for months. I find this works really well
for me.
</p>




</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-08.png"><img src="https://jvns.ca/images/2022-railsconf/slide-08.png"></a>
</div>
<div class="content">
<p>
Here are some of the strategies we're going to talk about for doing these tiny deep dives
</p>

<p>
First, we're going to start briefly by talking about what DNS is.
</p>


<p>
Next, we're going to talk about spying on DNS.
</p>
<p>
Then we're gonna talk about being confused, which is my main mode. (I'm always confused about something!)
</p>
<p>
Then we'll talk about reading the specification, we'll going to
do some experiments, and we're going to implement our own terrible version
of DNS.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-09.png"><img src="https://jvns.ca/images/2022-railsconf/slide-09.png"></a>
</div>
<div class="content">
And so what's DNS really briefly? DNS stands for the Domain Name System. And
every time you go to a website like <code>www.example.com</code>, your browser
needs to look up that website's IP address. So DNS translates
domain names into IP addresses. It looks up other information about domain
names too, but we're mostly just going to talk about IP addresses today.

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-10.png"><img src="https://jvns.ca/images/2022-railsconf/slide-10.png"></a>
</div>
<div class="content">
I want to briefly sell why I think DNS is cool, because we're going to be
talking about it a lot. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-11.png"><img src="https://jvns.ca/images/2022-railsconf/slide-11.png"></a>
</div>
<div class="content">
One cool thing about DNS is that it's this invisible system that controls the
entire internet.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-12.png"><img src="https://jvns.ca/images/2022-railsconf/slide-12.png"></a>
</div>
<div class="content">
<p>
For example, you're on your phone, you're using Google Maps, it needs to know,
where is maps.google.com, right? Or on your
computer, where's reddit.com? What's the IP address? And if we
didn't have DNS, the entire internet
would collapse. 
</p>

<p>
I think it's fun to learn how this behind the scenes stuff works. 
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-13.png"><img src="https://jvns.ca/images/2022-railsconf/slide-13.png"></a>
</div>
<div class="content">

<p>
The other thing about DNS I find interesting is that it's really old. There's
this document (<a href="https://datatracker.ietf.org/doc/html/rfc1035">RFC
1035</a>) which defines how DNS works, that was written in 1987. And if
you take that document and you write a program that works
the way that documents says to work, your program will work. And I think
that's kind of wild, right? 
</p>


<p>
The basics haven't changed since before I was born. So if you're a little slow
about learning about it, that's ok: it's not going to change out from under
you.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-14.png"><img src="https://jvns.ca/images/2022-railsconf/slide-14.png"></a>
</div>
<div class="content">
Next I want to talk about spying on DNS, which is one of my favorite ways to
learn about things. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-15.png"><img src="https://jvns.ca/images/2022-railsconf/slide-15.png"></a>
</div>
<div class="content">
I'm going to talk about two spy tools for DNS: dig and wireshark.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-16.png"><img src="https://jvns.ca/images/2022-railsconf/slide-16.png"></a>
</div>
<div class="content">
dig is a tool for making DNS queries. We talked about you know, how your
browser needs to look up the IP address for <code>maps.google.com</code>. We
can do that in dig!
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-dig.png"><img src="https://jvns.ca/images/2022-railsconf/demo-dig-small.png"></a>
</div>
<div class="content">
When we run <code>dig maps.google.com</code>, it prints out 5 fields.  Let's
talk about what those 5 fields are.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-17.png"><img src="https://jvns.ca/images/2022-railsconf/slide-17.png"></a>
</div>
<div class="content">
<p>
I've used example.com instead of maps.google.com on this slide, but the fields
are the same. Let's talk about 4 of them:
</p>

<p> We have the domain name, no big deal </p>
<p> The Time To Live, which is how long to cache that record for so this is a one day </p>
<p> You have the record type, A stands for address because this is an IP address </p>
<p> And you have the content, which is the IP address </p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-18.png"><img src="https://jvns.ca/images/2022-railsconf/slide-18.png"></a>
</div>
<div class="content">
But I think that the funniest field in a DNS record
is this field in the middle, IN, which stands for INternet. I guess in 1987, they thought that we might be on a lot of
different networks. So they made an option for it. In reality, we're all on the
internet. And every DNS query has class set to "internet". There are a couple of
others query classes (CHAOS and HESIOD), which truly almost nobody uses.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-dig2.png"><img src="https://jvns.ca/images/2022-railsconf/demo-dig2-small.png"></a>
</div>
<div class="content">
We can also kind of poke around on the
internet with Dig. We've talked about A records to look up IP addresses. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-dig3.png"><img src="https://jvns.ca/images/2022-railsconf/demo-dig3-small.png"></a>
</div>
<div class="content">
<p>
But there are
other kinds of records like TXT records. So we're going to look at a TXT record
really quickly just because I think this is very fun. We're going to look at twitter.com's TXT records.
</p>

<p>
So TXT records are something that people use for domain verification, for
example to prove to Google that you own twitter.com. 
</p>

<p>
So what you can do is you can set this DNS
record <code>google-site-verification</code>. Google will tell you what to set
it to, you'll set it, and then Google will believe you.
</p>

<p>
I think it's kind of fun that you can
like kind of poke around with DNS and see that Twitter is using
Miro or Canva or Mixpanel, that's all public. It's like a little peek into what
people are doing inside their companies
</p>


</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-dig4.png"><img src="https://jvns.ca/images/2022-railsconf/demo-dig4-small.png"></a>
</div>
<div class="content">
 
Oh, the other thing about dig is that by default, dig's output looks like
this, which is very ugly and unreadable. There's a lot of nonsense here.

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-19.png"><img src="https://jvns.ca/images/2022-railsconf/slide-19.png"></a>
</div>
<div class="content">

So dig has a configuration file, where you can put <code>+noall +answer </code> and
then your dig responses look much nicer (like they did in the screenshots
above) instead of having a lot of nonsense in them. Whenever possible, I try to
make my tools behave in a more human way.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-20.png"><img src="https://jvns.ca/images/2022-railsconf/slide-20.png"></a>
</div>
<div class="content">
The other thing I want to talk about is Wireshark, which
is my favorite computer networking tool in the universe for spying on 
all things computer networks. In this case, DNS queries. So let's go look at
Wireshark.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-21.png"><img src="https://jvns.ca/images/2022-railsconf/slide-21.png"></a>
</div>
<div class="content">
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-wireshark1.png"><img src="https://jvns.ca/images/2022-railsconf/demo-wireshark1-small.png"></a>
</div>
<div class="content">
When we make a DNS query like this and look up example.com, Wireshark can capture it.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-wireshark2.png"><img src="https://jvns.ca/images/2022-railsconf/demo-wireshark2-small.png"></a>
</div>
<div class="content">
When you 
start looking in the guts of things, I think it can be a bit scary at first. Like
what do all these numbers? It kind of seems
like a lot. So when I'm looking at something new, I try to start by looking at stuff
that I understand. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-wireshark3.png"><img src="https://jvns.ca/images/2022-railsconf/demo-wireshark3-small.png"></a>
</div>
<div class="content">
For example, I know that example.com is a domain name,
right? So we should able to use Wireshark to go find that domain name in the
DNS query. If we click into the "query" part of the DNS packet, we can see 3
fields that we recognize. First, the domain name.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-wireshark4.png"><img src="https://jvns.ca/images/2022-railsconf/demo-wireshark4-small.png"></a>
</div>
<div class="content">
We can also see the type ("A")
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-wireshark5.png"><img src="https://jvns.ca/images/2022-railsconf/demo-wireshark5-small.png"></a>
</div>
<div class="content">
And the third one is the class which
is INternet, which is always the same. What I find comforting here is that in
the query, there are really only 2 important fields: a DNS query is just saying "I want
the IP address for example.com". There's just two fields. And that that always
makes me feel a little bit better about understanding something. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-22.png"><img src="https://jvns.ca/images/2022-railsconf/slide-22.png"></a>
</div>
<div class="content">
A quick caveat: your browser might be using encrypted DNS and spying on your
DNS queries with Wireshark will not work if your DNS is encrypted. But there's
lots of non-encrypted DNS to spy on.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-23.png"><img src="https://jvns.ca/images/2022-railsconf/slide-23.png"></a>
</div>
<div class="content">
The second thing I want to talk about for learning new things is to
notice when you're confused about something.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-24.png"><img src="https://jvns.ca/images/2022-railsconf/slide-24.png"></a>
</div>
<div class="content">

I want to tell you a story, "the case of the mysterious caching", of something
that happened to me with DNS that really confused me.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-25.png"><img src="https://jvns.ca/images/2022-railsconf/slide-25.png"></a>
</div>
<div class="content">

First, I want to talk to you a little
bit about how DNS works a little bit more. So on the left here, you have your
browser. And when your browser makes a DNS query, it asks a server called a
resolver. And all you need to know about the resolver is that it's cache, which
as we know is like the worst thing in computer science. So the resolver is a cache,
and it gets its information from the source of truth, which has the real answers.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-26.png"><img src="https://jvns.ca/images/2022-railsconf/slide-26.png"></a>
</div>
<div class="content">
So your browser talks to a resolver, which is a cache.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-27.png"><img src="https://jvns.ca/images/2022-railsconf/slide-27.png"></a>
</div>
<div class="content">
At the time of this story, I had this mental model for like how I thought about
DNS, which is that if I set a TTL (the cache time) of 5 minutes when configuring my DNS records,
then I would never have to wait more than five minutes. Something you need to
know about me is that I'm a very impatient person. And I hate waiting. So this
model was mostly working for me at the time, though there are a few other very
important caveats that we're not going to get into.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-28.png"><img src="https://jvns.ca/images/2022-railsconf/slide-28.png"></a>
</div>
<div class="content">

But one day I was setting up a new subdomain for some new project. Let's say it
was new.jvns.ca. So I set it up. I made its DNS records, and I refreshed the
page. And it wasn't working. So I figured, that's fine, my model says, I only
have to wait five minutes, right? Because that's what I was used to. But I
waited five minutes and still didn't work.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-29.png"><img src="https://jvns.ca/images/2022-railsconf/slide-29.png"></a>
</div>
<div class="content">
And I was like, oh, no. My mental model was broken! I did not feel good.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-30.png"><img src="https://jvns.ca/images/2022-railsconf/slide-30.png"></a>
</div>
<div class="content">

And often when this happens to me, and I think for most of us, if something
weird happens with a computer, you let it go, right? You might decide okay, I
don't have time to go into a deep investigation here. I'll just wait longer. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-31.png"><img src="https://jvns.ca/images/2022-railsconf/slide-31.png"></a>
</div>
<div class="content">
But sometimes I
have a lot of energy, and maybe I'm feeling mad, like "the computer
can't beat me today"! Because there's a reason that this is happening, right? And I
want to find out what it is. So this day for some reason. I had a lot
of energy. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-32.png"><img src="https://jvns.ca/images/2022-railsconf/slide-32.png"></a>
</div>
<div class="content">
So I started Googling furiously. And I found a useful comment on Stack
Overflow.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-33.png"><img src="https://jvns.ca/images/2022-railsconf/slide-33.png"></a>
</div>
<div class="content">
The Stack Overflow comment talked about something called negative caching.
What's that?
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-34.png"><img src="https://jvns.ca/images/2022-railsconf/slide-34.png"></a>
</div>
<div class="content">

<p>
And so here's what it said might be going on. The first time I opened the
website (before the DNS records had been set up), the DNS servers returned a
negative answer, saying hey,this domain doesn't exist yet. The code for that is
NXDOMAIN, which is like a 404 for DNS.
</p>

<p>
And the resolver cached that negative NXDOMAIN response. So the fact that it
didn't exist was cached.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-35.png"><img src="https://jvns.ca/images/2022-railsconf/slide-35.png"></a>
</div>
<div class="content">
So my next question was: how long do I have to wait for the cache to expire? 
This brings us to a another learning technique.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-36.png"><img src="https://jvns.ca/images/2022-railsconf/slide-36.png"></a>
</div>
<div class="content">

I think like maybe the
most upsetting learning technique to me is to read a very boring
technical document. I'm like very impatient. I kind of hate
reading boring things. And so when I read something very boring, I like to
bring a specific question. So in this case, I had a specific question, which is
how long do I have to wait for the cache to expire?
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-37.png"><img src="https://jvns.ca/images/2022-railsconf/slide-37.png"></a>
</div>
<div class="content">
<p>
In networking, everything has a specification. The boring technical documents
are called RFC is for request for comments. I find this name a bit funny,
because for DNS, some of the main RFCs are RFC 1034 and 1035. These were written in 1987,
and the comment period ended in 1987. You can definitely no longer make
comments. But anyway, that's what they're called.
</p>

<p>
I personally kind of love
RFCs because they're like the ultimate answer to many questions. There's a
great series of HTTP RFCs, 9110 to 9114. DNS actually has a million
different RFCs, it's very upsetting, but the answers are often there. So I went
looking. And I think I went looking because when I read comments on
StackOverflow, I don't always trust them. How do I know if they're accurate? So
I wanted to go to an authoritative source.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-38.png"><img src="https://jvns.ca/images/2022-railsconf/slide-38.png"></a>
</div>
<div class="content">
So I found this document called RFC 2308. In section 3, it has this very boring
sentence, the TTL of this record is set to the minimum of the minimum field of the
SOA record and the TTL of the SOA itself. It indicates how long a resolver may
cache the negative answer. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-39.png"><img src="https://jvns.ca/images/2022-railsconf/slide-39.png"></a>
</div>
<div class="content">
<p>
So, um, ok, cool. What does that mean, right? Luckily, we only have one
question: I don't need to read the entire boring document. I just need to like
analyze this one sentence and figure it out.
</p>

<p>
So it's saying that the cache time depends on two fields. I want to show you
the actual data it's talking about, the SOA record.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-negative-caching.png"><img src="https://jvns.ca/images/2022-railsconf/demo-negative-caching-small.png"></a>
</div>
<div class="content">

Let's look at what happens when we run <code>dig +all asdfasdfasdfasdfasdf.jvns.ca</code>

It says that the domain doesn't exist, NXDOMAIN. But it also returns this
record called the SOA record, which has some domain metadata. And there are two
fields here that are relevant.

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-40.png"><img src="https://jvns.ca/images/2022-railsconf/slide-40.png"></a>
</div>
<div class="content">

<p>
Here. I put this on a slide to try to make it a little bit clearer. This slide
is a bit messed up, but there's this field at the end that's called the MINIMUM
field, and there's the TTL, time to live of the record, that I've tried to
circle.
</p>

<p>
And what it's saying is that if a record doesn't exist, the amount of time the
resolver should cache "it doesn't exist" for is the minimum of those two numbers.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-41.png"><img src="https://jvns.ca/images/2022-railsconf/slide-41.png"></a>
</div>
<div class="content">

In this case, both of those numbers are 10800. So that's how long have to
wait. We have to wait 10,800 seconds. That's 3 hours.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-42.png"><img src="https://jvns.ca/images/2022-railsconf/slide-42.png"></a>
</div>
<div class="content">

<p>
And so I waited three hours and then everything worked. And I found this
kind of fun to know because often like if you look up DNS advice it will
say something like, if something has gone wrong, you need to wait 48 hours. And I
do not want to wait 48 hours! I hate waiting. So I love it when I
can like use my brain to figure out that I can wait for less time.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-43.png"><img src="https://jvns.ca/images/2022-railsconf/slide-43.png"></a>
</div>
<div class="content">


<p>Sometimes when I find my mental model is broken, it feels like I don't know
anything</p>

<p>
But in this case, and I think in a lot of cases, there's often just a few
things I'm missing? Like this negative caching thing is like kind of weird, but
it really was the one thing I was missing. There are a few more important facts about how
DNS caching works that I haven't mentioned, but I haven't run into more
problems I didn't understand since then. Though I'm sure there's something I
don't know.
</p>


<p>
So sometimes learning one small thing really can solve all your problems.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-44.png"><img src="https://jvns.ca/images/2022-railsconf/slide-44.png"></a>
</div>
<div class="content">

I want to say briefly that there's a solution to this negative caching problem.
We talked about how like if you visit a domain that's nonexistent, it gets
cached. The solution is if you haven't set up your domain's DNS, don't visit
the domain! Only visit it after you set it up. So I've learned to do that and
now I almost never have this problem anymore. It's great.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-45.png"><img src="https://jvns.ca/images/2022-railsconf/slide-45.png"></a>
</div>
<div class="content">
The next thing I want to talk about is doing experiments.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-46.png"><img src="https://jvns.ca/images/2022-railsconf/slide-46.png"></a>
</div>
<div class="content">

<p>
So let's say we want to do some experiments with caching. 
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-47.png"><img src="https://jvns.ca/images/2022-railsconf/slide-47.png"></a>
</div>
<div class="content">
<p>
I think most people don't want to make experimental changes to their domain
names, because they're worried about breaking something. Which I think is very understandable.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-48.png"><img src="https://jvns.ca/images/2022-railsconf/slide-48.png"></a>
</div>
<div class="content">
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-mess1.png"><img src="https://jvns.ca/images/2022-railsconf/demo-mess1-small.png"></a>
</div>
<div class="content">

<p>
Because I was really into DNS, I wanted to experiment with DNS. And I also
wanted other people to experiment with DNS without having to worry about
breaking something. So I made this little website with my friend, Marie, called
<a href="https://messwithdns.net">Mess with DNS</a>
</p>

<p>
The idea is,  if you don't want to do that DNS experiments on your domain, you
can do them on my domain. And if you mess something up, it's my problem, it's
not your problem. And there have been no problems, so that's
fine.
</p>

<p>
So let's use Mess With DNS to do a little DNS experimentation
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-mess2.png"><img src="https://jvns.ca/images/2022-railsconf/demo-mess2-small.png"></a>
</div>
<div class="content">

The way this works is you get a little subdomain. This one is
chair131.messwithdns.com. And then you can make DNS records on it and try
things out. Here we're making a record for test.char131.messwithdns.net, with
type A, the IP 7.7.7.7, and TTL 3000 seconds. 
        </div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-49.png"><img src="https://jvns.ca/images/2022-railsconf/slide-49.png"></a>
</div>
<div class="content">
What we would expect to see is that if we make a query to the resolver, then it
asks kind of like the source of truth, which we control. And we should expect
the resolver to make only one query, because it's cached. So I want to do an
experiment and see if it's true that we get only 1 query.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-mess3.png"><img src="https://jvns.ca/images/2022-railsconf/demo-mess3-small.png"></a>
</div>
<div class="content">
So I'm going to make a few queries for it, with <code>dig @1.1.1.1 test.chair131.messwithdns.com</code>. 
I've queried it a bunch of times, maybe 10 or 20.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-mess4.png"><img src="https://jvns.ca/images/2022-railsconf/demo-mess4-small.png"></a>
</div>
<div class="content">

<p>
Oh, cool. This isn't what I expected to see. This is fun, though, that's great.
We made about 20 queries for that DNS record. The server logs all queries it
receives, so we can count them.
Our server got 1, 2, 3, 4, 5, 6, 7, 8 queries. That's kind of fun. 8 is less than 20.
</p>

<p>
One reason I like to do demos live on stage is that sometimes what I what
happens isn't exactly what I think will happen. When I do this exact experiment
at home, I just get 1 query to the resolver.
</p>

<p>
So we only saw like eight queries here. And I assume that this is
because the resolver, 1.1.1.1, we're talking to has more than one
independent cache, I guess there are 8 caches. This makes sense to me because
Cloudflare's network is distributed -- the exact machines I'm talking to here
in Providence are not the same as the ones in Montreal.
<p>
<p>
This is interesting because it complicates your idea about how caching works a
little bit, right? Like maybe a given DNS resolver actually has like eight
caches and which one you get is random, and you're not always talking
to the same one. I think that's what's going on here.
<p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-mess5.png"><img src="https://jvns.ca/images/2022-railsconf/demo-mess5-small.png"></a>
</div>
<div class="content">
We can also do the same experiment, but ask Google's resolver, 8.8.8.8, instead
of Cloudflare's resolver.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-mess6.png"><img src="https://jvns.ca/images/2022-railsconf/demo-mess6-small.png"></a>
</div>
<div class="content">
And we're seeing a similar thing here to what we saw with Cloudflare, there are
maybe 4 independent caches.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-50.png"><img src="https://jvns.ca/images/2022-railsconf/slide-50.png"></a>
</div>
<div class="content">
We could also do an experiment with negative caching, but no, I'm not going to
do this demo. Sorry. I could just see it going downhill. The problem is that
there's too many different caches, and I really want there to be one cache, but
there's like seven. That's fine, let's move on.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-51.png"><img src="https://jvns.ca/images/2022-railsconf/slide-51.png"></a>
</div>
<div class="content">
Now I'm going to talk
about my favorite strategy for learning about stuff, which is to
write my own very bad version of the thing. And I want to say that writing my
very bad implementation gives me a really unreasonable amount of confidence. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-52.png"><img src="https://jvns.ca/images/2022-railsconf/slide-52.png"></a>
</div>
<div class="content">
So you might think that writing DNS software is complicated, right? But it's
easier than you might think, as long as you keep your expectations low.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-53.png"><img src="https://jvns.ca/images/2022-railsconf/slide-53.png"></a>
</div>
<div class="content">
To make the DNS queries, the first thing we need to do is we need to
make a network connection. Let's do that.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-54.png"><img src="https://jvns.ca/images/2022-railsconf/slide-54.png"></a>
</div>
<div class="content">
These four lines of Ruby connect to 8.8.8.8, the Google DNS resolver, on UDP
port 53. Now we're like halfway there. So after we've made a connection, 
we need to send Google a DNS query. You might be thinking, Julia, I
don't know how to write a DNS query.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-55.png"><img src="https://jvns.ca/images/2022-railsconf/slide-55.png"></a>
</div>
<div class="content">
But there's no problem. We can copy one from something else that knows what a
DNS query looks like. AKA Wireshark.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-write1.png"><img src="https://jvns.ca/images/2022-railsconf/demo-write1-small.png"></a>
</div>
<div class="content">
So if I right click on this DNS query, it's very small, but I'm clicking on
"copy", and then "copy as hex stream".
You might not know what this means yet, but this is a DNS query. And
you might think that like, Hey, you can't just copy and paste something and
then send the exact same thing and it'll reply, but you can. And it works.

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-56.png"><img src="https://jvns.ca/images/2022-railsconf/slide-56.png"></a>
</div>
<div class="content">

Here's what the code looks like to send this hex string we copied and pasted to 8.8.8.8.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-write2.png"><img src="https://jvns.ca/images/2022-railsconf/demo-write2-small.png"></a>
</div>
<div class="content">
So we take this like hex string that we copy and pasted, and paste it into our
tiny Ruby program, and use `.pack` to convert into a string of bytes and send it.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-write3.png"><img src="https://jvns.ca/images/2022-railsconf/demo-write3-small.png"></a>
</div>
<div class="content">
Now we run the Ruby program.

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-write4.png"><img src="https://jvns.ca/images/2022-railsconf/demo-write4-small.png"></a>
</div>
<div class="content">
<p>
Let's go to Wireshark and look for the packet we just sent. And we can see it there! There's some other noise in between, so I'll stop the capture.
</p>

<p>
We can see that it's the same packet because the query ID matches, B962.
</p>

<p>
So we sent a query to Google the answer server and we got a response right? It
was like this is totally legitimate. There's no problem. It doesn't know that we copied and pasted it and that we have no idea what it means!
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-57.png"><img src="https://jvns.ca/images/2022-railsconf/slide-57.png"></a>
</div>
<div class="content">
But we do want to know what this means, right? And so we'll take this hex string and split it into 2 parts. 
The first part is the header. And the second part is the
question, which contains the actual domain name we're looking up. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-58.png"><img src="https://jvns.ca/images/2022-railsconf/slide-58.png"></a>
</div>
<div class="content">

<p>
We're going to see how to construct these in Ruby, but first 
I want to talk about what a byte is for
one second. So this (b9) is the hexadecimal representation of a byte. The way
I like to look at figure out what that means is just type it into IRB, if
you type in 0xB9 it'll print out, that's the number 184.
</p>
<p>
So the question is 12 bytes
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-59.png"><img src="https://jvns.ca/images/2022-railsconf/slide-59.png"></a>
</div>
<div class="content">

Those 12 bytes correspond
six numbers, which are two bytes each. So the first number is the thing
<code>b962</code> which is the query ID. The next number is the flags, which
basically in this case, means like this is a query like hello, I have a
question. And then there's four more sections, the number of questions and then
the number of answers. We do not have any answers. We only have a question. So
we're saying, hello, I have one question. That's what the header means.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-60.png"><img src="https://jvns.ca/images/2022-railsconf/slide-60.png"></a>
</div>
<div class="content">

<p>
And the way that we can do this in Ruby, is we can make a little array that has the
query ID, and then these numbers which
correspond to the other the other header fields, the flags and then 1 for 1
question, and then three zeroes for each of the 3 sections of answers.
</p>


<p>
And then we need to tell Ruby how to take these like six numbers and
then represent them as bytes. So n here means each
of these is supposed to represent it as two bytes, and it also means to use big endian byte order.
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-61.png"><img src="https://jvns.ca/images/2022-railsconf/slide-61.png"></a>
</div>
<div class="content">
Now let's talk about the question.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-62.png"><img src="https://jvns.ca/images/2022-railsconf/slide-62.png"></a>
</div>
<div class="content">
<p>
I broke up the question section here. There are two parts
you might recognize from <code>example.com</code>: there's example, and com. 
The way it works is that first you have a number (like 7), and then a
7-character string, like "example". The number tells you how many characters to
expect in each part of the domain name. So it's 7, example, 3, com, 0.
</p>

<p>
And then at the end, you
have two more fields for the type and the class. Class 1 is code for
"internet". And type 1 is code for "IP address", because we want to look up the
IP address. is
</p>

</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-63.png"><img src="https://jvns.ca/images/2022-railsconf/slide-63.png"></a>
</div>
<div class="content">
So we can write a little bit of code to do this. If we want to translate
example.com into seven example three column zero, can like split the domain on
a dot and then like get its length and concatenate that together and put a 0 on
the end. It's just a little bit of Ruby. how to encode a domain name. 
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-64.png"><img src="https://jvns.ca/images/2022-railsconf/slide-64.png"></a>
</div>
<div class="content">
And then we can wrap all this up
together where we make a random query ID. And then you make
the header, encode the domain name, and then we add the type
and the class, 1 and 1, and then we can just
concatenate everything together and that's our query.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-65.png"><img src="https://jvns.ca/images/2022-railsconf/slide-65.png"></a>
</div>
<div class="content">
There's definitely more work to do here to print out the response, but I wrote
a 120-line Ruby script that parses the response too, and I want to show you a quick demo of it working.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/demo-write7.png"><img src="https://jvns.ca/images/2022-railsconf/demo-write7-small.png"></a>
</div>
<div class="content">

What domain should we look up>. rubyconfmini.com. All right, let's do it. Hey, it works! </div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-66.png"><img src="https://jvns.ca/images/2022-railsconf/slide-66.png"></a>
</div>
<div class="content">

I have a blog post that breaks down the
whole thing on my blog, <a href="https://jvns.ca/blog/2022/11/06/making-a-dns-query-in-ruby-from-scratch/">Making
a DNS query in Ruby from scratch</a>. It talks about how to decode the
response.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-67.png"><img src="https://jvns.ca/images/2022-railsconf/slide-67.png"></a>
</div>
<div class="content">
We're at the end! Let's do a recap.
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-68.png"><img src="https://jvns.ca/images/2022-railsconf/slide-68.png"></a>
</div>
<div class="content">

Okay. Let's go over the ways we've talked about learning things!

<p>
First, spy on it. I find that when I look at things like
to see like really what's happening under the hood, and when I look at like,
what's in the bytes, you know what's going on? It's often like not as
complicated as I think. Like, oh, there's just the domain name and the
type. It really makes me feel far more confident that I understand that thing.
</p>

<p>
I try to notice when I'm confused, and I want to say again, that 
noticing when you're confused is something that like we don't
always have time for right? It's something to do when you have the energy. For
example there's this weird DNS query I saw in one of the demos today that I
don't understand, but I ignored it because, well, I'm giving a talk. But maybe one day I'll feel like looking at it.
</p>

<p>
We talked about reading the specification, which, there are few times I feel
like more powerful than when I'm in like a discussion with someone, and I KNOW that I have the right answer because, well, I read the specification!
It's a really nice way to feel certain. 
</p>

<p>
I love to do experiments to check that my understanding of stuff is right. And
often I learn that my understanding of something is wrong! I had an example in
this talk that I was going to include and I did an experiment to check that
that example was true, and it wasn't! And now I know that. I love that
experiments on computers are very fast and cheap and usually have no
consequences.
</p>

<p>
And then the last thing we talked about and truly my favorite, but the most
work is like implementing your own terrible version. For me,
the confidence I get from writing like a terrible DNS implementation that works
on 11 different domain names is unmatched. If my thing works at all, I feel like,
wow, you can't tell me that I don't know how DNS works! I implemented it! And
it doesn't matter if my implementation is "bad" because I know that it works!
I've tested it. I've seen it with my own eyes. And I think that just feels
amazing. And there are also no consequences because you're never going to run
it in production. So it doesn't matter if it's terrible. It just exists to give
you huge amounts of confidence in yourself. And I think that's really nice.
</p>
</div>
</div>

<div class="container">
<div class="slide">
<a href="https://jvns.ca/images/2022-railsconf/slide-69.png"><img src="https://jvns.ca/images/2022-railsconf/slide-69.png"></a>
</div>
<div class="content">
That's all for me. Thank you for listening.
</div>
</div>

<h3 id="thanks-to-the-organizers">thanks to the organizers!</h3>

<p>Thanks to the RubyConf Mini organizers for doing such a great job with the
conference &ndash; it was the first conference I&rsquo;d been to since 2019, and I had a
great time.</p>

<h3 id="a-quick-plug-for-how-dns-works">a quick plug for &ldquo;How DNS Works&rdquo;</h3>

<p>If you liked this talk and want to to spend <em>less</em> than 10 years learning about
how DNS works, I spent 6 months condensing everything I know about DNS into 28
pages. It&rsquo;s here and you can get it for $12: <a href="https://wizardzines.com/zines/dns/">How DNS Works</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New playground: integer.exposed]]></title>
    <link href="https://jvns.ca/blog/2023/04/19/new-playground-integer-exposed/"/>
    <updated>2023-04-19T09:35:29+00:00</updated>
    <id>https://jvns.ca/blog/2023/04/19/new-playground-integer-exposed/</id>
    <content type="html"><![CDATA[

<p>Hello! For the last few months we&rsquo;ve been working on a zine about how integers
and floating point numbers work. Whenever I make a zine I like to release a
playground to go with it, like <a href="https://messwithdns.net/">mess with dns</a> for the DNS zine or the <a href="https://sql-playground.wizardzines.com/">sql playground</a>.</p>

<p>For this one, I made a simple playground called <a href="https://integer.exposed">integer.exposed</a>, inspired by
Bartosz Ciechanowski&rsquo;s <a href="https://float.exposed">float.exposed</a>.</p>

<p>It&rsquo;s a lot less elaborate than Mess With DNS, so I&rsquo;ll keep this blog post short.</p>

<h3 id="the-inspiration-float-exposed">the inspiration: float.exposed</h3>

<p>I did a couple of talks about how integers and floating point work last month,
and in the talk about floating point I found myself CONSTANTLY referring to
this site called <a href="https://float.exposed/">Float Exposed</a> by Bartosz Ciechanowski to demonstrate various things. (Aside: If you haven&rsquo;t seen
Ciechanowski&rsquo;s incredible <a href="https://ciechanow.ski/archives/">interactive explainers</a> on bicycles, mechanical watches,
lenses, the internal combustion engine, and more, you should check them out!)</p>

<p>Here&rsquo;s what it it looks like:</p>

<p><img src="https://jvns.ca/images/float-exposed.png"></p>

<p>Things I&rsquo;ve done with it:</p>

<ul>
<li>Increment the significand of a float (to show people how close together successive floats are)</li>
<li>Show special values like <a href="https://float.exposed/0x7ff8000000000000">NaN</a> and <a href="https://float.exposed/0x7ff0000000000000">infinity</a>, and show how if you change the bits in NaN, it&rsquo;s still NaN</li>
<li>Go to a <a href="https://float.exposed/0x43abc16d674ec801">large integer value</a> and show how the distance between floats is very large</li>
<li>Show how you get drastically different precision for <a href="https://float.exposed/0x4b189680">one million as a 32-bit float</a> and as a <a href="https://float.exposed/0x416312d000000000">64-bit float</a> (try incrementing the significand for each one!)</li>
</ul>

<p>and lots more! It&rsquo;s an incredible way to get hands on with floats and improve your intuition around how they work.</p>

<h3 id="float-exposed-but-for-integers">float.exposed, but for integers</h3>

<p>Integers aren&rsquo;t as complicated as floats, but there are some nonobvious things
about them: you have signed integers and unsigned integers, you have
endianness, and there are some weird operations like right/left shift. So when
I was talking about integers, I found myself wanting a similar website to
<a href="https://float.exposed">float.exposed</a> to demonstrate things.</p>

<p>So with permission, I put one together at <a href="https://integer.exposed">integer.exposed</a>. Here&rsquo;s a screenshot:</p>

<p><img src="https://jvns.ca/images/int-exposed.png" style="height: 400px"></p>

<p>The UI is a little different: integers don&rsquo;t have many different parts the way
floating point numbers do, so there&rsquo;s a single row of buttons that you can use
to do various operations on the integer.</p>

<p>A note on byte order: Like float.exposed, it uses a big endian byte order,
because I think it&rsquo;s more intuitive to read. But you do have to keep in mind
that on most computers the bytes will actually be in the reverse order.</p>

<h3 id="some-interesting-things-to-try">some interesting things to try</h3>

<p>Here are some things I think are fun to try:</p>

<ol>
<li><strong>signed integers</strong>: Look at how <a href="https://integer.exposed/#0xff">-1</a> is
represented. Increment and decrement it a few times and see how the signed
and unsigned values change. Do the same with
<a href="https://integer.exposed/#0x80">-128</a>. Also look at how -1 is represented as
a 16/32/64-bit integer.</li>
<li><strong>signed/unsigned right shift</strong>: Similarly with <a href="https://integer.exposed/#0xffff">-1</a>: try out signed right shift (also known as &ldquo;arithmetic right shift&rdquo;) and see how the result is different from unsigned right shift (aka &ldquo;logical right shift&rdquo;).</li>
<li><strong>counting in binary</strong>: Start at <a href="https://integer.exposed/#0x00">0</a> and increment a bunch of times and watch the binary value count up.</li>
<li><strong>not</strong>: Take any number (like <a href="https://integer.exposed/#0x7b">123</a>) and NOT it. See how <code>NOT</code> is almost exactly the same as negation, but not quite.</li>
<li><strong>swap the byte order</strong>. Take a number like <a href="https://integer.exposed/#0x4e61bc00">12345678</a> and see how if you swap the byte order, the result is an unrecognizably different number.</li>
<li>look at how <a href="https://integer.exposed/#0x00000800">powers of 2 are represented</a></li>
</ol>

<h3 id="the-tech-stack">the tech stack</h3>

<p>As usual for me it uses Vue.js. If you want to see how it works you can just
view source &ndash; it&rsquo;s only two files, <code>index.html</code> and <code>script.js</code>.</p>

<p>I took a bunch of the CSS from <a href="https://float.exposed">float.exposed</a>.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Let me know if you notice any bugs! I might add more features, but I want to keep it pretty simple.</p>

<p>I&rsquo;ve also built another more involved playground that I&rsquo;m hoping to release and
write up soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A list of programming playgrounds]]></title>
    <link href="https://jvns.ca/blog/2023/04/17/a-list-of-programming-playgrounds/"/>
    <updated>2023-04-17T09:37:08+00:00</updated>
    <id>https://jvns.ca/blog/2023/04/17/a-list-of-programming-playgrounds/</id>
    <content type="html"><![CDATA[

<p>I really like using (and making!) programming playgrounds, and I got thinking
the other day about how I didn&rsquo;t have a great list of playgrounds to refer to. So I
<a href="https://mastodon-thread-view.jvns.ca/#110135675722500447">asked on Mastodon</a>
for links to cool playgrounds.</p>

<p>Here&rsquo;s what I came up with. I&rsquo;d love to know what I missed.</p>

<ul>
<li>Compilers: <a href="https://godbolt.org/">godbolt compiler explorer</a> by Matt Godbolt</li>
<li>Shaders: <a href="https://www.shadertoy.com/">shadertoy</a> by Inigo Quilez and Pol Jeremias</li>
<li>Arduino / IoT: <a href="https://wokwi.com/">wokwi</a> from CodeMagic</li>
<li>CSS/HTML/JS: <a href="https://codepen.io/">CodePen</a> by Chris Coyier, Alex Vasquez, and team</li>
<li>CSS/HTML/JS: <a href="https://jsfiddle.net/">JSFiddle</a> by Oskar Krawczyk and Piotr Zalewa</li>
<li>CSS/HTML/JS: <a href="https://flems.io">flems</a> by Rasmus Porsager (saves all state in the URL)</li>
<li>regular expressions:

<ul>
<li>for many languages: <a href="https://regex101.com/">regex101</a> by Firas Dib</li>
<li>for Ruby: <a href="https://rubular.com/">Rubular</a> by Michael Lovitt</li>
<li>for JS/PCRE: <a href="https://regexr.com/">regexr</a> by gskinner</li>
<li>for Python: <a href="https://pythex.org/">Pythex</a> by Gabriel Rodríguez</li>
</ul></li>
<li>DNS: <a href="https://messwithdns.net/">Mess With DNS</a> by Julia Evans and Marie Flanagan</li>
<li>DNS: <a href="https://dns-lookup.jvns.ca/">DNS lookup tool</a> by Julia Evans</li>
<li>nginx: <a href="https://nginx-playground.wizardzines.com">nginx playground</a> by Julia Evans</li>
<li>varnish: <a href="https://fiddle.fastly.dev/">fastly fiddle</a> from fastly</li>
<li>SQLite: <a href="https://sqlime.org/">sqlime</a> by Anton Zhiyanov (lets you load arbitrary SQLite databases)</li>
<li>SQL: <a href="https://www.db-fiddle.com/">DB fiddle</a> from Status200</li>
<li>SQL: <a href="https://sql-playground.wizardzines.com">sql playground</a> by Julia Evans</li>
<li>Postgres: <a href="https://www.crunchydata.com/developers/tutorials">postgres playground</a> from Crunchydata (runs postgres in the browser!)</li>
<li>Git: <a href="https://ohmygit.org/">oh my git</a> by blinry and bleeptrack</li>
<li>.NET bytecode: <a href="https://sharplab.io/">SharpLab</a> by Andrey Shchekin</li>
<li>Python bytecode: <a href="https://www.dis-this.com/">dis this</a> by Pamela Fox</li>
</ul>

<h4 id="data-formats">data formats</h4>

<ul>
<li>Floating point: <a href="https://float.exposed">Float Exposed</a> by Bartosz Ciechanowski</li>
<li>Unicode: <a href="https://www.fontspace.com/unicode/analyzer">Unicode analyzer</a> from fontspace</li>
<li>Unicode: <a href="https://www.babelstone.co.uk/Unicode/whatisit.html">What unicode character is this?</a> from babelstone</li>
<li>ASN.1 certificates: <a href="https://lapo.it/asn1js/">ASN.1 JavaScript debugger</a> by Lapo Luchini</li>
<li>SVG: <a href="https://fffuel.co/sssvg/">sssvg (interactive SVG reference)</a> from <a href="https://fffuel.co/">fffuel</a> (lots of other cool tools there)</li>
<li>CBOR: <a href="https://cbor.me/">CBOR playground</a></li>
<li>JSON: <a href="https://jsoneditoronline.org/">JSON editor online</a> by Jos de Jong</li>
<li>cron: <a href="https://crontab.guru/">crontab guru</a> from cronitor</li>
</ul>

<h4 id="programming-languages">programming languages</h4>

<ul>
<li>official playgrounds:

<ul>
<li><a href="https://go.dev/play/">Go</a></li>
<li><a href="https://play.rust-lang.org/">Rust</a></li>
<li><a href="https://try.ruby-lang.org/">Ruby</a></li>
<li><a href="https://www.typescriptlang.org/play">Typescript</a></li>
<li><a href="https://play.haskell.org/">Haskell</a>, <a href="https://dotnet.microsoft.com/en-us/learn/dotnet/in-browser-tutorial/1">C#</a>, <a href="https://elm-lang.org/try">Elm</a>, <a href="https://play.kotlinlang.org/">Kotlin</a>, <a href="https://scastie.scala-lang.org/">Scala</a>, <a href="https://ocaml.org/play">OCaml</a>, <a href="https://play.crystal-lang.org/">Crystal</a>, <a href="https://svelte.dev/repl/">Svelte</a></li>
</ul></li>
<li>unofficial playgrounds:

<ul>
<li>PHP: <a href="https://3v4l.org/">3v4l</a> by Sjon Hortensius</li>
<li>Python/JS/C/C++/Java: <a href="https://pythontutor.com/">Python Tutor</a> by Philip Guo</li>
<li>Javascript: <a href="https://jsconsole.com/">JS Console</a> by @rem</li>
<li>many languages: <a href="https://riju.codes">riju</a> by Radon Rosborough</li>
<li>many languages: <a href="https://replit.com/languages/bash">replit</a></li>
<li>others: <a href="https://jqplay.org/">jqplay</a> for jq, <a href="https://tryapl.org/">tryapl</a> for APL</li>
</ul></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a custom site for zine feedback]]></title>
    <link href="https://jvns.ca/blog/2023/03/31/zine-feedback-site/"/>
    <updated>2023-03-31T08:51:30+00:00</updated>
    <id>https://jvns.ca/blog/2023/03/31/zine-feedback-site/</id>
    <content type="html"><![CDATA[

<p>Hello! A few years I wrote a post called <a href="https://jvns.ca/blog/2020/11/07/a-new-way-i-m-getting-feedback-on-my-zines--beta-readers-/">A new way I&rsquo;m getting feedback on my posts: beta readers!</a>
about how I&rsquo;d started using beta readers.</p>

<p>The basic strategy for getting feedback there was to email people a PDF and ask
for feedback. This was kind of inefficient, and so over the past couple of
years, I&rsquo;ve worked a lot with <a href="https://marieflanagan.com/">Marie Flanagan</a> to
improve the process. In this post we&rsquo;ll talk about:</p>

<ul>
<li>the custom site we built to handle all of the feedback</li>
<li>how (and why) we designed that site</li>
<li>the specific categories of feedback we ask for (and why we chose those categories)</li>
</ul>

<p>The site isn&rsquo;t open source, this post is just about the process of building and
using it. There are some screenshots further down.</p>

<p>First, let&rsquo;s talk about some problems with the original process.</p>

<h3 id="problem-1-managing-the-feedback-was-awkward">problem 1: managing the feedback was awkward</h3>

<p>The original process for getting feedback from beta readers was to send an
email to people asking them for feedback, and then semi-manually collate the
replies.</p>

<p>For each comment I got, I needed to figure out whether I wanted to address it
or not, and then mark it as completed once it was handled.</p>

<p>I originally handled this by:</p>

<ul>
<li>making a Trello card for each page of the zine</li>
<li>adding each comment to the Trello card for the appropriate page (either manually or with a Python script)</li>
<li>checking off the comments when they were handled</li>
</ul>

<p>This kind of worked, but it wasn&rsquo;t great. I could only ask at most 10 people for
feedback because the overhead of managing all the replies was just too much for
me.</p>

<h3 id="problem-2-the-feedback-wasn-t-categorized">problem 2: the feedback wasn&rsquo;t categorized</h3>

<p>The second problem I ran into was that the feedback wasn&rsquo;t really categorized
or tagged in any way, and this made it much harder to decide what I should do
about each piece of feedback.</p>

<p>For example &ndash; one comment I got was &ldquo;CSS often seems random to me&rdquo;. Is the
person suggesting that I explain more about CSS on the page? Do they want to be
convinced that CSS <em>isn&rsquo;t</em> random? Do they think CSS is a bad example of the
thing I&rsquo;m trying to illustrate? Are they confused about why I&rsquo;m bringing up CSS
at all? Without more context, it&rsquo;s hard to tell.</p>

<p>There was also lots of feedback that I could easily understand and incorporate,
but I really wanted to set more guidelines so that people could give me the
kind of feedback I needed.</p>

<h3 id="the-inspiration-help-this-book">the inspiration: Help This Book</h3>

<p>In 2021, I read a great book called <a href="http://writeusefulbooks.com/">Write Useful
Books</a> by Rob Fitzpatrick. One of the main
suggestions in the book was to gather feedback early and often from beta readers.</p>

<p>But their way to get feedback wasn&rsquo;t just &ldquo;email people and have them write you
back!&rdquo; It came with a custom website for readers to comment on in-progress books called
<a href="https://helpthisbook.com/">Help This Book</a>.</p>

<p>Here&rsquo;s a screenshot of Help This Book, from their homepage:</p>

<p><img src="https://jvns.ca/images/help-this-book.png"></p>

<p>In this screenshot, the reader has highlighted a sentence and is being prompted
for what kind of feedback they want to provide. After they click on an icon
(like &ldquo;Confusing&rdquo;, they&rsquo;ll be able to type in their comment).</p>

<h3 id="but-help-this-book-didn-t-work-with-images">but Help This Book didn&rsquo;t work with images</h3>

<p>My zines aren&rsquo;t text, so this kind of Google Docs-style interface where you
highlight text wouldn&rsquo;t really work for me.</p>

<p>So in 2021 I asked Marie if they would help me build a custom site to collect
feedback on zines, very heavily inspired by Help This Book.</p>

<p>The hardest parts were:</p>

<ol>
<li>Deciding the categories of feedback we wanted to ask for from readers</li>
<li>Designing the site</li>
</ol>

<p>As usual, actually writing the code was the easy part, so I&rsquo;m not going to talk
about that.</p>

<h3 id="categories-help-guide-people-s-feedback">categories help guide people&rsquo;s feedback</h3>

<p>Before I talk about the feedback categories we chose, I want to talk about why
feedback categories are so important.</p>

<p>In the &ldquo;Help This Book&rdquo; interface (and in the interface of the tool we build),
the categories help guide people&rsquo;s feedback &ndash; before someone even starts
writing, they need to click on a category for the feedback.</p>

<p>This is helpful for a few reasons:</p>

<ol>
<li>It helps remove types of feedback we don&rsquo;t want. For example, there&rsquo;s no
category for &ldquo;this is a typo&rdquo;, because we don&rsquo;t want people to point out
typos &ndash; that&rsquo;s the copy editor&rsquo;s job :)</li>
<li>It guides people to phrase their feedback in a form that&rsquo;s easier to take
action on. For example: &ldquo;I love this&rdquo; feedback generally doesn&rsquo;t require any
action, but if someone says &ldquo;This is confusing&rdquo;, we probably need to clarify
something.</li>
<li>We can easily group similar kinds of feedback together and deal with them
all at once. For example, if a bunch of people have left &ldquo;Confusing&rdquo;
feedback on a page, we can look at that all at once.</li>
</ol>

<h3 id="how-we-started-read-existing-feedback">How we started: read existing feedback</h3>

<p>We figured out the categories by looking at feedback I&rsquo;d gotten on previous
zines and trying to categorize it. Here are the 5 categories we ended up with.</p>

<h3 id="category-1-i-learned-something">category 1: &ldquo;I learned something&rdquo;</h3>

<p>The whole goal of the zines is to teach people things, so &ldquo;I learned
something!&rdquo; is kind of the gold star. If we&rsquo;re getting this kind of feedback,
we&rsquo;re doing our job.</p>

<h3 id="category-2-i-love-this">category 2: &ldquo;I love this&rdquo;</h3>

<p>We noticed a lot of feedback where the person didn&rsquo;t specifically say that they
learned anything, but just seemed to like the page.</p>

<p>I was originally kind of against this category (&ldquo;the point is for people to
learn things!&ldquo;), but we ended up including this because there was a lot of this
type of feedback and I&rsquo;m super happy we did.</p>

<p>It&rsquo;s always very encouraging to see all the hearts, and usually we just take it
as a signal that we should keep that page.</p>

<h3 id="category-3-i-have-a-question">category 3: &ldquo;I have a question&rdquo;</h3>

<p>The idea here is to gather specific questions about something the reader didn&rsquo;t
understand. For example, here are some of the excellent questions readers left on
early drafts of the <a href="https://wizardzines.com/zines/dns">How DNS Works</a>:</p>

<ul>
<li>what is a &ldquo;domain&rdquo;?</li>
<li>why do we need to map a domain name to an IP address?</li>
<li>are these <em>all</em> the DNS record types?</li>
<li>are the DNS query and response between resolver (function) and resolver (server) the exact same format as between resolver (server) and authoritative nameservers?</li>
<li>do authoritative nameservers push updates to resolvers or do resolvers &ldquo;check&rdquo; frequently to update their caches?</li>
<li>does my local computer cache DNS query responses at all?</li>
<li>is the resolver built into the browser or is this a server the browser knows to go and query?</li>
</ul>

<p>Questions aren&rsquo;t always a bad thing &ndash; sometimes the question indicates that
the reader understood the topic well, is curious, and has some followup
questions that are outside of the scope of the zine.</p>

<p>But lot of these questions were definitely questions that we wanted the zine to
answer, and we mostly took them as a sign that the explanations needed to be
improved.</p>

<h3 id="category-4-i-m-confused">category 4: &ldquo;I&rsquo;m confused&rdquo;</h3>

<p>This was a category we actually didn&rsquo;t have in our first version. But we
noticed that we were getting a lot of suggestions that essentially amounted to
&ldquo;I&rsquo;m confused&rdquo;.</p>

<p>What we realized was &ndash; sometimes an explanation is <em>so</em> confusing that the
reader isn&rsquo;t able to formulate a specific question about what they don&rsquo;t
understand. Figuring out a specific question is hard, especially if the
explanation you&rsquo;re reading isn&rsquo;t very clear!</p>

<p>A few great examples of &ldquo;I&rsquo;m confused&rdquo; feedback on &ldquo;How DNS Works&rdquo;:</p>

<ul>
<li>I don&rsquo;t get the last section in the response record, the &ldquo;glue records&rdquo;</li>
<li>This section is over my head&hellip;</li>
<li>I would really appreciate some kind of simple index on what types of NS records exist and how they relate.</li>
<li>I didn&rsquo;t see where SOA records were defined. Did I miss something earlier or later?</li>
<li>I was confused here by the server word again, due to it being able to refer to a resolver / nameserver. In this case, server =&gt; resolver</li>
</ul>

<p>People also leave a lot of feedback of the form &ldquo;I was initially confused by X, but then I figured it out&rdquo;, which is great.</p>

<h3 id="category-5-i-have-a-suggestion">category 5: &ldquo;I have a suggestion&rdquo;</h3>

<p>The last category is a kind of catchall &ldquo;other&rdquo; category for anything that
doesn&rsquo;t fit in the others. We usually ask people not to point out typos or
mistakes, but sometimes people do anyway, which is fine.</p>

<h3 id="we-listen-to-learners-not-experts">we listen to learners, not experts</h3>

<p>The goal is to get beta reader feedback from people who are trying to learn the
material, not from experts.</p>

<p>Because of this, we&rsquo;ll almost always prioritize &ldquo;I&rsquo;m confused&rdquo; or &ldquo;I have a
question&rdquo; feedback over &ldquo;I have a suggestion&rdquo; feedback, unless the person
leaving the suggestion is someone who I know and whose judgement I trust.</p>

<p>If beta readers are learning things and they&rsquo;re not too confused  &ndash; we&rsquo;re
doing our job! It&rsquo;s working!</p>

<p>Technical review and copy editing come at the end of the process, and I&rsquo;m not
going to talk about them in this post.</p>

<h3 id="a-gif-of-the-zine-feedback-site">a gif of the zine feedback site</h3>

<p>Here&rsquo;s what the feedback site looks like as a beta reader:</p>

<p><img src="https://jvns.ca/images/zine-feedback.gif"></p>

<p>Here&rsquo;s a screenshot of all the feedback categories:</p>

<p><img src="https://jvns.ca/images/feedback-categories.png" style="width: 400px"></p>

<h3 id="the-admin-interface">the admin interface</h3>

<p>Next, there&rsquo;s an admin interface where I</p>

<ul>
<li>check off comments as they&rsquo;re handled</li>
<li>add my own comments</li>
</ul>

<p>I&rsquo;m going to share a couple of examples of pages from the admin section, one
where I think the feedback is more positive than the other.</p>

<p>Both of these pages are from a VERY early draft, and they&rsquo;ve already been edited quite a bit :)</p>

<h3 id="a-good-page">a &ldquo;good&rdquo; page</h3>

<p>I&rsquo;ve blurred out all the comments, but the important thing here is the emojis:
there are a couple of lightbulbs (&ldquo;I learned something!&rdquo;) and a couple of
hearts (&ldquo;I love this!&rdquo;).</p>

<p>Even without reading anything, this tells me that this page has some promise &ndash;
there are definitely things to be improved, but people like it.</p>

<p><img src="https://jvns.ca/images/feedback-good-page.png"></p>

<h3 id="positive-emojis-are-incredibly-helpful">positive emojis are incredibly helpful</h3>

<p>Being able to quickly scan through the zine and say &ldquo;okay, this has 10 hearts
and 7 lightbulbs, obviously people love this page&rdquo; is amazing: it makes it
really easy to tell when a page is working.</p>

<p>This is good because:</p>

<ul>
<li>it tells us what we <em>don&rsquo;t</em> need to work on</li>
<li>it&rsquo;s motivating (&ldquo;we&rsquo;re getting somewhere! people like this!&rdquo;)</li>
</ul>

<h3 id="a-bad-page">a &ldquo;bad&rdquo; page</h3>

<p>Next, here&rsquo;s an example of another page in the admin interface where things
aren&rsquo;t going so well.</p>

<p>You&rsquo;ll notice this page only has question marks and suggestions. (the ones in
purple are comments that I wrote, the ones in blue are from readers)</p>

<p>The comments are blurred out, but several of them are about how the Rust panel
seems arbitrary. That was something I kind of knew already, but hearing it from
readers is really helpful and helps me know that I should prioritize fixing it.</p>

<p><img src="https://jvns.ca/images/feedback-bad-page.png"></p>

<h3 id="confusion-emojis-are-also-super-helpful">confusion emojis are also super helpful</h3>

<p>If we see a lot of &ldquo;I&rsquo;m confused&rdquo; and &ldquo;I have a suggestion&rdquo; emojis on a page, that&rsquo;s also very useful!</p>

<p>Sometimes we&rsquo;ll react to that by totally rewriting or deleting a page, and then
doing another round of feedback to see if the problems have been fixed.</p>

<p>&ldquo;I have a question&rdquo; emojis aren&rsquo;t always a bad thing &ndash; sometimes the question
indicates that the reader understood the topic well, is curious, and has some
followup questions that are outside of the scope of the zine.</p>

<h3 id="pages-with-no-feedback">pages with no feedback</h3>

<p>There are usually one or two pages that get no comments at all from beta readers. A couple of ways we handle this:</p>

<ul>
<li>ask a trusted friend for their take on the page</li>
<li>post it to Mastodon or Twitter and see what the comments are like</li>
<li>follow our gut (&ldquo;no, I think this is important, let&rsquo;s keep it&rdquo;)</li>
</ul>

<h2 id="overall-feedback">overall feedback</h2>

<p>Readers can also enter overall feedback at the end. Here&rsquo;s what that looks like
in the admin interface (again blurred out).</p>

<p>This is a super useful section &ndash; sometimes people will leave comments here
like &ldquo;I didn&rsquo;t really understand X&rdquo;, and it&rsquo;ll make it clear that we really need
to improve the explanation of X.</p>

<p><img src="https://jvns.ca/images/overall-feedback.png"></p>

<h3 id="the-tech-stack">the tech stack</h3>

<p>I said earlier that writing the code was the easy part so I won&rsquo;t talk about the code too much. Here are a few facts about the tech stack though. It has:</p>

<ul>
<li>a Go backend (which becomes a static binary)</li>
<li>a SQLite database</li>
<li>a Vue.js frontend</li>
<li>a DigitalOcean server</li>
</ul>

<p>some more notes on how it works:</p>

<ul>
<li>all of the zine pages are committed into the Git repository and compiled into
the Go binary. (It might be smarter to store them in the database instead,
but I didn&rsquo;t do that, maybe one day!)</li>
<li>the pages are password-protected, and I email people the password when
I ask them for feedback</li>
<li>when I want to deploy, I rebuild the Go binary locally (using <a href="https://github.com/jvns/tinybuild">tinybuild</a>), scp it to the
DigitalOcean server, and restart the systemd process.</li>
</ul>

<p>It&rsquo;s not open source and nobody else can use it because it&rsquo;s very heavily
customized to my use case, completely undocumented, and I made the questionable
design choice to store all of the zine pages in the git repository :). I
occasionally think about improving it so that other people can use it, but I
think there&rsquo;s a strong change I will never feel motivated to do that.</p>

<h3 id="having-a-dedicated-site-for-feedback-has-made-a-huge-difference">having a dedicated site for feedback has made a huge difference</h3>

<p>We originally built this site in summer 2021, and so far have used it for <a href="https://wizardzines.com/zines/dns/">How DNS Works</a>, <a href="https://wizardzines.com/zines/debugging-guide/">The Pocket Guide to Debugging</a>, and the currently-in-progress zine on how computers represent data in binary in memory.</p>

<p>It&rsquo;s made it possible to get feedback from dozens of people instead of just 3
or 4, and I think it&rsquo;s really improved the zines&rsquo; quality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some possible reasons for 8-bit bytes]]></title>
    <link href="https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/"/>
    <updated>2023-03-07T06:51:58+00:00</updated>
    <id>https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/</id>
    <content type="html"><![CDATA[

<p>I&rsquo;ve been working on a zine about how computers represent thing in binary, and
one question I&rsquo;ve gotten a few times is &ndash; why does the x86 architecture use 8-bit bytes? Why not
some other size?</p>

<p>With any question like this, I think there are two options:</p>

<ol>
<li>It&rsquo;s a historical accident, another size (like 4 or 6 or 16 bits) would work just as well</li>
<li>8 bits is objectively the Best Option for some reason, even if history had played out differently we would still use 8-bit bytes</li>
<li>some mix of 1 &amp; 2</li>
</ol>

<p>I&rsquo;m not super into computer history (I like to use computers a lot more than I
like reading about them), but I am always curious if there&rsquo;s an essential
reason for why a computer thing is the way it is today, or whether it&rsquo;s mostly
a historical accident. So we&rsquo;re going to talk about some computer history.</p>

<p>As an example of a historical accident: DNS has a <code>class</code> field which has 5
possible values (&ldquo;internet&rdquo;, &ldquo;chaos&rdquo;, &ldquo;hesiod&rdquo;, &ldquo;none&rdquo;, and &ldquo;any&rdquo;). To me that&rsquo;s
a clear example of a historical accident &ndash; I can&rsquo;t imagine that we&rsquo;d define
the class field the same way if we could redesign DNS today without worrying about backwards compatibility. I&rsquo;m
not sure if we&rsquo;d use a class field at all!</p>

<p>There aren&rsquo;t any definitive answers in this post, but I asked <a href="https://social.jvns.ca/@b0rk/109976810279702728">on Mastodon</a> and
here are some potential reasons I found for the 8-bit byte. I think the answer
is some combination of these reasons.</p>

<h3 id="what-s-the-difference-between-a-byte-and-a-word">what&rsquo;s the difference between a byte and a word?</h3>

<p>First, this post talks about &ldquo;bytes&rdquo; and &ldquo;words&rdquo; a lot. What&rsquo;s the difference between a byte and a word? My understanding is:</p>

<ul>
<li>the <strong>byte size</strong> is the smallest unit you can address. For example in a program on my machine <code>0x20aa87c68</code> might be the address of one byte, then <code>0x20aa87c69</code> is the address of the next byte.</li>
<li>The <strong>word size</strong> is some multiple of the byte size. I&rsquo;ve been confused about
this for years, and the Wikipedia definition is incredibly vague (&ldquo;a word is
the natural unit of data used by a particular processor design&rdquo;). I
originally thought that the word size was the same as your register size (64
bits on x86-64). But according to section 4.1 (&ldquo;Fundamental Data Types&rdquo;) of the <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html">Intel architecture manual</a>,
on x86 a word is 16 bits even though the registers are 64 bits. So I&rsquo;m
confused &ndash; is a word on x86 16 bits or 64 bits? Can it mean both, depending
on the context? What&rsquo;s the deal?</li>
</ul>

<p>Now let&rsquo;s talk about some possible reasons that we use 8-bit bytes!</p>

<h3 id="reason-1-to-fit-the-english-alphabet-in-1-byte">reason 1: to fit the English alphabet in 1 byte</h3>

<p><a href="https://en.wikipedia.org/wiki/IBM_System/360">This Wikipedia article</a> says that the IBM System/360 introduced the 8-bit byte in 1964.</p>

<p>Here&rsquo;s a <a href="https://www.youtube.com/watch?v=9oOCrAePJMs&amp;t=140s">video interview with Fred Brooks (who managed the project)</a> talking about why. I&rsquo;ve transcribed some of it here:</p>

<blockquote>
<p>&hellip; the six bit bytes [are] really better for scientific computing and the 8-bit byte ones are really better for commercial computing and each one can be made to work for the other.
So it came down to an executive decision and I decided for the 8-bit byte, Jerry&rsquo;s proposal.</p>

<p>[&hellip;.]</p>

<p>My most important technical decision in my IBM career was to go with the 8-bit byte for the 360.
And on the basis of I believe character processing was going to become important as opposed to decimal digits.</p>
</blockquote>

<p>It makes sense that an 8-bit byte would be better for text processing: 2^6 is
64, so 6 bits wouldn&rsquo;t be enough for lowercase letters, uppercase letters, and symbols.</p>

<p>To go with the 8-bit byte, System/360 also introduced the <a href="https://en.wikipedia.org/wiki/EBCDIC">EBCDIC</a> encoding, which is an 8-bit character encoding.</p>

<p>It looks like the next important machine in 8-bit-byte history was the
<a href="https://en.wikipedia.org/wiki/Intel_8008">Intel 8008</a>, which was built to be
used in a computer terminal (the Datapoint 2200). Terminals need to be able to
represent letters as well as terminal control codes, so it makes sense for them
to use an 8-bit byte.
<a href="https://archive.computerhistory.org/resources/text/2009/102683240.05.02.acc.pdf">This Datapoint 2200 manual from the Computer History Museum</a>
says on page 7 that the Datapoint 2200 supported ASCII (7 bit) and EBCDIC (8 bit).</p>

<h3 id="why-was-the-6-bit-byte-better-for-scientific-computing">why was the 6-bit byte better for scientific computing?</h3>

<p>I was curious about this comment that the 6-bit byte would be better for scientific computing. Here&rsquo;s a quote from <a href="https://archive.computerhistory.org/resources/access/text/2013/05/102702492-05-01-acc.pdf">this interview from Gene Amdahl</a>:</p>

<blockquote>
<p>I wanted to make it 24 and 48 instead of 32 and 64, on the basis that this
would have given me a more rational floating point system, because in floating
point, with the 32-bit word, you had to keep the exponent to just 8 bits for
exponent sign, and to make that reasonable in terms of numeric range it could
span, you had to adjust by 4 bits instead of by a single bit. And so it caused
you to lose some of the information more rapidly than you would with binary
shifting</p>
</blockquote>

<p>I don&rsquo;t understand this comment at all &ndash; why does the exponent have to be 8 bits
if you use a 32-bit word size? Why couldn&rsquo;t you use 9 bits or 10 bits if you
wanted? But it&rsquo;s all I could find in a quick search.</p>

<h3 id="why-did-mainframes-use-36-bits">why did mainframes use 36 bits?</h3>

<p>Also related to the 6-bit byte: a lot of mainframes used a 36-bit word size. Why? Someone pointed out
that there&rsquo;s a great explanation in the Wikipedia article on <a href="https://en.wikipedia.org/wiki/36-bit_computing">36-bit computing</a>:</p>

<blockquote>
<p>Prior to the introduction of computers, the state of the art in precision
scientific and engineering calculation was the ten-digit, electrically powered,
mechanical calculator&hellip; These calculators had a column of keys for each digit,
and operators were trained to use all their fingers when entering numbers, so
while some specialized calculators had more columns, ten was a practical limit</p>

<p>Early binary computers aimed at the same market therefore often used a 36-bit
word length. This was long enough to represent positive and negative integers
to an accuracy of ten decimal digits (35 bits would have been the minimum)</p>
</blockquote>

<p>So this 36 bit thing seems to based on the fact that log_2(20000000000) is 34.2. Huh.</p>

<p>My guess is that the reason for this is in the 50s, computers were
extremely expensive. So if you wanted your computer to support ten decimal
digits, you&rsquo;d design so that it had exactly enough bits to do that, and no
more.</p>

<p>Today computers are way faster and cheaper, so if you want to represent ten
decimal digits for some reason you can just use 64 bits &ndash; wasting a little bit
of space is usually no big deal.</p>

<p>Someone else mentioned that some of these machines with 36-bit word sizes let
you choose a byte size &ndash; you could use 5 or 6 or 7 or 8-bit bytes, depending
on the context.</p>

<h3 id="reason-2-to-work-well-with-binary-coded-decimal">reason 2: to work well with binary-coded decimal</h3>

<p>In the 60s, there was a popular integer encoding called binary-coded decimal (or <a href="https://en.wikipedia.org/wiki/Binary-coded_decimal">BCD</a> for short) that
encoded every decimal digit in 4 bits.</p>

<p>For example, if you wanted to encode the number 1234, in BCD that would be something like:</p>

<pre><code>0001 0010 0011 0100
</code></pre>

<p>So if you want to be able to easily work with binary-coded decimal, your byte
size should be a multiple of 4 bits, like 8 bits!</p>

<h3 id="why-was-bcd-popular">why was BCD popular?</h3>

<p>This integer representation seemed really weird to me &ndash; why not just use
binary, which is a much more efficient way to store integers? Efficiency was really important in early computers!</p>

<p>My best guess about why is that early computers didn&rsquo;t have displays the same way we do
now, so the contents of a byte were mapped directly to on/off lights.</p>

<p>Here&rsquo;s a <a href="https://commons.wikimedia.org/wiki/File:IBM-650-panel.jpg">picture from Wikipedia of an IBM 650 with some lights on its display</a> (<a href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a>):</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/ad/IBM-650-panel.jpg"></p>

<p>So if you want people to be relatively able to easily read off a decimal number
from its binary representation, this makes a lot more sense. I think today BCD
is obsolete because we have displays and our computers can convert numbers
represented in binary to decimal for us and display them.</p>

<p>Also, I wonder if BCD is where the term &ldquo;nibble&rdquo; for 4 bits comes from &ndash; in
the context of BCD, you end up referring to half bytes a lot (because every
digits is 4 bits). So it makes sense to have a word for &ldquo;4 bits&rdquo;, and people
called 4 bits a nibble. Today &ldquo;nibble&rdquo; feels to me like an archaic term though &ndash;
I&rsquo;ve definitely never used it except as a fun fact (it&rsquo;s such a fun word!). The Wikipedia article on <a href="https://en.wikipedia.org/wiki/Nibble">nibbles</a> supports this theory:</p>

<blockquote>
<p>The nibble is used to describe the amount of memory used to store a digit of
a number stored in packed decimal format (BCD) within an IBM mainframe.</p>
</blockquote>

<p>Another reason someone mentioned for BCD was <strong>financial calculations</strong>. Today
if you want to store a dollar amount, you&rsquo;ll typically just use an integer
amount of cents, and then divide by 100 if you want the dollar part. This is no
big deal, division is fast. But apparently in the 70s dividing an integer
represented in binary by 100 was very slow, so it was worth it to redesign how
you represent your integers to avoid having to divide by 100.</p>

<p>Okay, enough about BCD.</p>

<h3 id="reason-3-8-is-a-power-of-2">reason 3: 8 is a power of 2?</h3>

<p>A bunch of people said it&rsquo;s important for a CPU&rsquo;s byte size to be a power of 2.
I can&rsquo;t figure out whether this is true or not though, and I wasn&rsquo;t satisfied with the explanation that &ldquo;computers use binary so powers of 2 are good&rdquo;. That seems very plausible but I wanted to dig deeper.
And historically there have definitely been lots of machines that used byte sizes that weren&rsquo;t powers of 2, for example (from <a href="https://retrocomputing.stackexchange.com/questions/7937/last-computer-not-to-use-octets-8-bit-bytes">this retro computing stack exchange thread</a>):</p>

<ul>
<li>Cyber 180 mainframes used 6-bit bytes</li>
<li>the Univac 1100 / 2200 series used a 36-bit word size</li>
<li>the PDP-8 was a 12-bit machine</li>
</ul>

<p>Some reasons I heard for why powers of 2 are good that I haven&rsquo;t understood yet:</p>

<ul>
<li>every bit in a word needs a bus, and you want the number of buses to be a power of 2 (why?)</li>
<li>a lot of circuit logic is susceptible to divide-and-conquer techniques (I think I need an example to understand this)</li>
</ul>

<p>Reasons that made more sense to me:</p>

<ul>
<li>it makes it easier to design <strong>clock dividers</strong> that can measure &ldquo;8 bits were
sent on this wire&rdquo; that work based on halving &ndash; you can put 3 halving clock
dividers in series. <a href="https://poly.nomial.co.uk/">Graham Sutherland</a> told me about this and made this really cool
<a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWcMBMcUHYMGZIA4UA2ATmIxAUgpABZsKBTAWjDACgwEknsUQ08tQQKgU2AdxA8+I6eAyEoEqb3mK8VMAqWSNakHsx9Iywxj6Ea-c0oBKUy-xpUWYGc-D9kcftCQo-URgEZRQERSMnKkiTSTDFLQjw62NlMBorRP5krNjwDP58fMztE04kdKsRFBQqoqoQyUcRVhl6tLdCwVaonXBO2s0Cwb6UPGEPXmiPPLHhIrne2Y9q8a6lcpAp9edo+r7tkW3c5WPtOj4TyQv9G5jlO5saMAibPOeIoppm9oAPEEU2C0-EBaFoThAAHoUGx-mA8FYgfNESgIFUrNDYVtCBBttg8LiUPR0VCYWhyD0Wp0slYACIASQAamTIORFqtuucQAzGTQ2OTaD9BN8Soo6Uy8PzWQ46oImI4aSB6QA5ZTy9EuVQjPLq3q6kQmAD21Beome0qQMHgkDIhHCYVEfCQ9BVbGNRHAiio5vIltg8Ft9stXg99B5MPdFK9tDAFqg-rggcIDui1i23KZfPd3WjPuoVoDCiDjv4gjDErYQA">simulator of clock dividers</a> showing what these clock dividers look like. That site (Falstad) also has a bunch of other example circuits and it seems like a really cool way to make circuit simulators.</li>
<li>if you have an instruction that zeroes out a specific bit in a byte, then if
your byte size is 8 (2^3), you can use just 3 bits of your instruction to
indicate which bit. x86 doesn&rsquo;t seem to do this, but the <a href="http://www.chebucto.ns.ca/~af380/z-80-h.htm">Z80&rsquo;s bit testing instructions</a> do.</li>
<li>someone mentioned that some processors use <a href="https://en.wikipedia.org/wiki/Carry-lookahead_adder">Carry-lookahead adders</a>, and they work
in groups of 4 bits. From some quick Googling it seems like there are a wide
variety of adder circuits out there though.</li>
<li><strong>bitmaps</strong>: Your computer&rsquo;s memory is organized into pages (usually of size 2^n). It
needs to keep track of whether every page is free or not. Operating systems
use a bitmap to do this, where each bit corresponds to a page and is 0 or 1
depending on whether the page is free. If you had a 9-bit byte, you would
need to divide by 9 to find the page you&rsquo;re looking for in the bitmap.
Dividing by 9 is slower than dividing by 8, because dividing by powers of 2
is always the fastest thing.</li>
</ul>

<p>I probably mangled some of those explanations pretty badly: I&rsquo;m pretty far out
of my comfort zone here. Let&rsquo;s move on.</p>

<h3 id="reason-4-small-byte-sizes-are-good">reason 4: small byte sizes are good</h3>

<p>You might be wondering &ndash; well, if 8-bit bytes were better than 4-bit bytes,
why not keep increasing the byte size? We could have 16-bit bytes!</p>

<p>A couple of reasons to keep byte sizes small:</p>

<ol>
<li>It&rsquo;s a waste of space &ndash; a byte is the minimum unit you can address, and if
your computer is storing a lot of ASCII text (which only needs 7 bits), it
would be a pretty big waste to dedicate 12 or 16 bits to each character when
you could use 8 bits instead.</li>
<li>As bytes get bigger, your CPU needs to get more complex. For example you need one bus line per bit. So I guess simpler is better.</li>
</ol>

<p>My understanding of CPU architecture is extremely shaky so I&rsquo;ll leave it at
that. The &ldquo;it&rsquo;s a waste of space&rdquo; reason feels pretty compelling to me though.</p>

<h3 id="reason-5-compatibility">reason 5: compatibility</h3>

<p>The Intel 8008 (from 1972) was the precursor to the 8080 (from 1974), which was the precursor to the
8086 (from 1976) &ndash; the first x86 processor. It seems like the 8080 and the
8086 were really popular and that&rsquo;s where we get our modern x86 computers.</p>

<p>I think there&rsquo;s an &ldquo;if it ain&rsquo;t broke don&rsquo;t fix it&rdquo; thing going on here &ndash; I
assume that 8-bit bytes were working well, so Intel saw no need to change the
design. If you keep the same 8-bit byte, then you can reuse more of your
instruction set.</p>

<p>Also around the 80s we start getting network protocols like TCP
which use 8-bit bytes (usually called &ldquo;octets&rdquo;), and if you&rsquo;re going to be
implementing network protocols, you probably want to be using an 8-bit byte.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>It seems to me like the main reasons for the 8-bit byte are:</p>

<ol>
<li>a lot of early computer companies were American, the most commonly used language in the US is English</li>
<li>those people wanted computers to be good at text processing</li>
<li>smaller byte sizes are in general better</li>
<li>7 bits is the smallest size you can fit all English characters + punctuation in</li>
<li>8 is a better number than 7 (because it&rsquo;s a power of 2)</li>
<li>once you have popular 8-bit computers that are working well, you want to keep the same design for compatibility</li>
</ol>

<p>Someone pointed out that <a href="https://web.archive.org/web/20170403014651/http://archive.computerhistory.org/resources/text/IBM/Stretch/pdfs/Buchholz_102636426.pdf">page 65 of this book from 1962</a>
talking about IBM&rsquo;s reasons to choose an 8-bit byte basically says the same thing:</p>

<blockquote>
<ol>
<li>Its full capacity of 256 characters was considered to be sufficient for the great majority of applications.</li>
<li>Within the limits of this capacity, a single character is represented by a
single byte, so that the length of any particular record is not dependent on
the coincidence of characters in that record.</li>
<li>8-bit bytes are reasonably economical of storage space</li>
<li>For purely numerical work, a decimal digit can be represented by only 4
bits, and two such 4-bit bytes can be packed in an 8-bit byte. Although such
packing of numerical data is not essential, it is a common practice in
order to increase speed and storage efficiency. Strictly speaking, 4-bit
bytes belong to a different code, but the simplicity of the 4-and-8-bit
scheme, as compared with a combination 4-and-6-bit scheme, for example,
leads to simpler machine design and cleaner addressing logic.</li>
<li>Byte sizes of 4 and 8 bits, being powers of 2, permit the computer designer
to take advantage of powerful features of binary addressing and indexing to
the bit level (see Chaps. 4 and 5 ) .</li>
</ol>
</blockquote>

<p>Overall this makes me feel like an 8-bit byte is a pretty natural choice if
you&rsquo;re designing a binary computer in an English-speaking country.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How do Nix builds work?]]></title>
    <link href="https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/"/>
    <updated>2023-03-03T11:19:25+00:00</updated>
    <id>https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/</id>
    <content type="html"><![CDATA[

<p>Hello! For some reason after the last <a href="https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/">nix post</a> I got nerdsniped by trying to understand how Nix builds
work under the hood, so here&rsquo;s a quick exploration I did today. There are probably some mistakes in here.</p>

<p>I started by <a href="https://social.jvns.ca/@b0rk/109954253779465018">complaining on Mastodon</a>:</p>

<blockquote>
<p>are there any guides to nix that start from the bottom up (for example
starting with <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/generic/setup.sh">this bash script</a>
and then working up the layers of abstraction) instead of from the top down?</p>

<p>all of the guides I&rsquo;ve seen start by describing the nix programming language
or other abstractions, and I&rsquo;d love to see a guide that starts with concepts I
already understand like compiler flags, linker flags, Makefiles, environment
variables, and bash scripts</p>
</blockquote>

<p>Ross Light wrote a great blog post in response called <a href="https://www.zombiezen.com/blog/2023/03/connecting-bash-to-nix/">Connecting Bash to Nix</a>, that shows how to compile a basic C program without using most of Nix&rsquo;s standard machinery.</p>

<p>I wanted to take this a tiny bit further and compile a slightly more
complicated C program.</p>

<h3 id="the-goal-compile-a-c-program-without-using-nix-s-standard-machinery">the goal: compile a C program, without using Nix&rsquo;s standard machinery</h3>

<p>Our goal is to compile a C program called <code>paperjam</code>. This is a real C program
that wasn&rsquo;t in the Nix repository already. I already figured out how to
compile it in <a href="https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/">this post</a> by copying and pasting a bunch of stuff I didn&rsquo;t understand, but this time I wanted to do
it in a more principled way where I actually understand more of the steps.</p>

<p>We&rsquo;re going to avoid using most of Nix&rsquo;s helpers for compiling C programs.</p>

<p>The plan is to start with an almost empty build script, and then resolve errors
until we have a working build.</p>

<h3 id="first-what-s-a-derivation">first: what&rsquo;s a derivation?</h3>

<p>I said that we weren&rsquo;t going to talk about too many Nix abstractions (and we won&rsquo;t!), but understanding what a derivation is really helped me.</p>

<p>Everything I read about Nix talks about derivations all the time, but I was
really struggling to figure out what a derivation <em>is</em>. It turns out that <code>derivation</code>
is a function in the Nix language. But not just any function! The whole point of the Nix language seems to be to
to call this function. The <a href="https://nixos.org/manual/nix/stable/language/derivations.html">official documentation for the <code>derivation</code> function</a> is actually extremely clear. Here&rsquo;s what I took away:</p>

<p><code>derivation</code> takes a bunch of keys and values as input. There are 3 required keys:</p>

<ol>
<li><code>system</code>: the system, for example <code>x86_64-darwin</code></li>
<li><code>name</code>: the name of the package you&rsquo;re building</li>
<li><code>builder</code>: a program (usually a bash script) that runs the build</li>
</ol>

<p>Every other key is an arbitrary string that gets passed as an environment
variable to the <code>builder</code> shell script.</p>

<h3 id="derivations-automatically-build-all-their-inputs">derivations automatically build all their inputs</h3>

<p>A derivation doesn&rsquo;t just call a shell script though! Let&rsquo;s say I reference another derivation called <code>pkgs.qpdf</code> in my script.</p>

<p>Nix will:</p>

<ul>
<li>automatically build the <code>qpdf</code> package</li>
<li>put the resulting output directory somewhere like <code>/nix/store/4garxzr1rpdfahf374i9p9fbxnx56519-qpdf-11.1.0</code></li>
<li>expand <code>pkgs.qpdf</code> into that output directory (as a string), so that I can reference it in my build script</li>
</ul>

<p>The derivation function does some other things (described in the
<a href="https://nixos.org/manual/nix/stable/language/derivations.html">documentation</a>), but &ldquo;it builds all of its inputs&rdquo; is all we really need to know
for now.</p>

<h3 id="step-1-write-a-derivation-file">step 1: write a derivation file</h3>

<p>Let&rsquo;s write a very simple build script and call the <code>derivation</code> function. These don&rsquo;t work yet,
but I found it pretty fun to go through all the errors, fix them one at a time,
and learn a little more about how Nix works by fixing them.</p>

<p>Here&rsquo;s the build script (<code>build_paperjam.sh</code>). This just unpacks the tarball and runs <code>make install</code>.</p>

<pre><code>#!/bin/bash

tar -xf &quot;$SOURCE&quot;
cd paperjam-1.2 
make install
</code></pre>

<p>And here&rsquo;s the Nix code calling the <code>derivation</code> function (in <code>paperjam.nix</code>). This calls the core <code>derivation</code> function, without too much magic.</p>

<pre><code>let pkgs = import (fetchTarball &quot;https://github.com/NixOS/nixpkgs/archive/4d2b37a84fad1091b9de401eb450aae66f1a741e.tar.gz&quot;) {};

builtins.derivation {
  name = &quot;paperjam-fake&quot;;
  builder = ./build-paperjam.sh;
  system = builtins.currentSystem;

  SOURCE = pkgs.fetchurl {
    url = &quot;https://mj.ucw.cz/download/linux/paperjam-1.2.tar.gz&quot;;
    hash = &quot;sha256-0AziT7ROICTEPKaA4Ub1B8NtIfLmxRXriW7coRxDpQ0&quot;;
  };

}
</code></pre>

<p>The main things here are:</p>

<ul>
<li><code>fetchurl</code> (which downloads an url and puts the path in to the <code>SOURCE</code> environment variable)</li>
<li><code>pkgs</code> (which lets us depend on other Nix packages from the central repository). I don&rsquo;t totally understand this but I&rsquo;m already in a pretty deep rabbit hole so we&rsquo;re going to leave that for now.</li>
</ul>

<p><code>SOURCE</code> evaluates to a string &ndash; it&rsquo;s the path to the downloaded source tarball.</p>

<h3 id="problem-1-tar-command-not-found">problem 1: <code>tar: command not found</code></h3>

<p>Nix needs you to declare all the dependencies for your builds. It forces this
by removing your <code>PATH</code> environment variable so that you have no binaries in
your PATH at all.</p>

<p>This is pretty easy to fix: we just need to edit our <code>PATH</code>.</p>

<p>I added this to <code>paperjam.nix</code> to get <code>tar</code>, <code>gzip</code>, and <code>make</code>:</p>

<pre><code>  PATH = &quot;${pkgs.gzip}/bin:${pkgs.gnutar}/bin:${pkgs.gnumake}/bin&quot;;
</code></pre>

<h3 id="problem-2-we-need-a-compiler">problem 2: we need a compiler</h3>

<p>Next, we had this error:</p>

<pre><code>g++ -O2 -Wall -Wextra -Wno-parentheses -std=gnu++11 -g -DVERSION='&quot;1.2&quot;' -DYEAR='&quot;2022&quot;' -DBUILD_DATE='&quot;&quot;' -DBUILD_COMMIT='&quot;&quot;'   -c -o paperjam.o paperjam.cc
make: g++: No such file or directory
</code></pre>

<p>So we need to put a compiler in our PATH. For some reason I felt like using <code>clang++</code> to compile, not <code>g++</code>. To do that I need to make 2 changes to <code>paperjam.nix</code>:</p>

<ol>
<li>Add the line <code>CXX=&quot;clang++&quot;;</code></li>
<li>Add <code>${pkgs.clang}/bin</code> to my <code>PATH</code></li>
</ol>

<h3 id="problem-3-missing-header-files">problem 3: missing header files</h3>

<p>The next error was:</p>

<pre><code> &gt; ./pdf-tools.h:13:10: fatal error: 'qpdf/QPDF.hh' file not found
 &gt; #include &lt;qpdf/QPDF.hh&gt;
</code></pre>

<p>Makes sense: everything is isolated, so it can&rsquo;t access my system header files.
Figuring out how to handle this was a little more confusing though.</p>

<p>It turns out that the way Nix handles header files is that it has a shell
script wrapper around <code>clang</code>. So when you run <code>clang++</code>, you&rsquo;re actually
running a shell script.</p>

<p>On my system, the <code>clang++</code> wrapper script was at <code>/nix/store/d929v59l9a3iakvjccqpfqckqa0vflyc-clang-wrapper-11.1.0/bin/clang++</code>. I searched that file for <code>LDFLAGS</code> and found that it uses 2 environment variables:</p>

<ol>
<li><code>NIX_LDFLAGS_aarch64_apple_darwin</code></li>
<li><code>NIX_CFLAGS_COMPILE_aarch64_apple_darwin</code></li>
</ol>

<p>So I figured I needed to put all the arguments to clang in the <code>NIX_CFLAGS</code> variable and all the linker arguments in <code>NIX_LDFLAGS</code>. Great! Let&rsquo;s do that.</p>

<p>I added these 2 lines to my <code>paperjam.nix</code>, to link the <code>libpaper</code> and <code>qpdf</code> libraries:</p>

<pre><code>NIX_LDFLAGS_aarch64_apple_darwin = &quot;-L ${pkgs.qpdf}/lib   -L ${pkgs.libpaper}/lib&quot;;
NIX_CFLAGS_COMPILE_aarch64_apple_darwin = &quot;-isystem ${pkgs.qpdf}/include   -isystem ${pkgs.libpaper}/include&quot;;
</code></pre>

<p>And that worked!</p>

<h3 id="problem-4-missing-c-abi">problem 4: missing <code>c++abi</code></h3>

<p>The next error was:</p>

<pre><code>&gt; ld: library not found for -lc++abi
</code></pre>

<p>Not sure what this means, but I searched for &ldquo;abi&rdquo; in the Nix packages and fixed it by adding <code>-L ${pkgs.libcxxabi}/lib</code> to my <code>NIX_LDFLAGS</code> environment variable.</p>

<h3 id="problem-5-missing-iconv">problem 5: missing iconv</h3>

<p>Here&rsquo;s the next error:</p>

<pre><code>&gt; Undefined symbols for architecture arm64:
&gt;   &quot;_iconv&quot;, referenced from: ...
</code></pre>

<p>I started by adding <code>-L ${pkgs.libiconv}/lib</code> to my <code>NIX_LDFLAGS</code> environment variable, but that didn&rsquo;t fix it. Then I spent a while going around in circles and being confused.</p>

<p>I eventually figured out how to fix this by taking a working version of the <code>paperjam</code> build that I&rsquo;d made before
and editing my <code>clang++</code> wrapper file to print out all of its environment
variables. The <code>LDFLAGS</code> environment variable in the working version was different from mine: it had <code>-liconv</code> in it.</p>

<p>So I added <code>-liconv</code> to <code>NIX_LDFLAGS</code> as well and that fixed it.</p>

<h3 id="why-doesn-t-the-original-makefile-have-liconv">why doesn&rsquo;t the original Makefile have <code>-liconv</code>?</h3>

<p>I was a bit puzzled by this <code>-liconv</code> thing though: the original Makefile links
in <code>libqpdf</code> and <code>libpaper</code> by passing <code>-lqpdf -lpaper</code>. So why doesn&rsquo;t it link in iconv, if it requires the
iconv library?</p>

<p>I think the reason for this is that the original Makefile assumed that you were
running on Linux and using glibc, and glibc includes these iconv functions by
default. But I guess Mac OS libc doesn&rsquo;t include iconv, so we need to
explicitly set the linker flag <code>-liconv</code> to add the iconv library.</p>

<h3 id="problem-6-missing-codesign-allocate">problem 6: missing <code>codesign_allocate</code></h3>

<p>Time for the next error:</p>

<pre><code>libc++abi: terminating with uncaught exception of type std::runtime_error: Failed to spawn codesign_allocate: No such file or directory
</code></pre>

<p>I guess this is some kind of Mac code signing thing. I used <code>find /nix/store -name codesign_allocate</code> to find <code>codesign_allocate</code> on my system. It&rsquo;s at
<code>/nix/store/a17dwfwqj5ry734zfv3k1f5n37s4wxns-cctools-binutils-darwin-973.0.1/bin/codesign_allocate</code>.</p>

<p>But this doesn&rsquo;t tell us what the package is called &ndash; we need to be able to refer to it as <code>${pkgs.XXXXXXX}</code> and <code>${pkgs.cctools-binutils-darwin}</code> doesn&rsquo;t work.</p>

<p>I couldn&rsquo;t figure out a way go from a Nix folder to the name of the package, but I ended up poking around and finding out that it was called <code>pkgs.darwin.cctools</code>.</p>

<p>So I added <code>${pkgs.darwin.cctools}/bin</code> to the <code>PATH</code>.</p>

<h3 id="problem-7-missing-a2x">problem 7: missing <code>a2x</code></h3>

<p>Easy, just add <code>${pkgs.asciidoc}/bin</code> to the <code>PATH</code>.</p>

<h4 id="problem-8-missing-install">problem 8: missing <code>install</code></h4>

<pre><code>make: install: No such file or directory
</code></pre>

<p>Apparently <code>install</code> is a program? This turns out to be in <code>coreutils</code>, so we add <code>${pkgs.coreutils}/bin</code> to the <code>PATH</code>. Adding <code>coreutils</code> also fixes some other warnings I was seeing about missing commands like <code>date</code>.</p>

<h3 id="problem-9-can-t-create-usr-local-bin-paperjam">problem 9: can&rsquo;t create /usr/local/bin/paperjam</h3>

<p>This took me a little while to figure out because I&rsquo;m not very familiar with make. The Makefile has a <code>PREFIX</code> of <code>/usr/local</code>, but we want it to be the program&rsquo;s output directory in <code>/nix/store/</code></p>

<p>I edited the <code>build-paperjam.sh</code> shell script to say:</p>

<pre><code>make install PREFIX=&quot;$out&quot;
</code></pre>

<p>and everything worked! Hooray!</p>

<h3 id="our-final-configuration">our final configuration</h3>

<p>Here&rsquo;s the final <code>paperjam.nix</code>. It&rsquo;s not so different from what we started with &ndash; we just added 4 environment variables.</p>

<pre><code>let pkgs = import (fetchTarball &quot;https://github.com/NixOS/nixpkgs/archive/ae8bdd2de4c23b239b5a771501641d2ef5e027d0.tar.gz&quot;) {};
in

builtins.derivation {
  name = &quot;paperjam-fake&quot;;
  builder = ./build-paperjam.sh;
  system = builtins.currentSystem;

  SOURCE = pkgs.fetchurl {
    url = &quot;https://mj.ucw.cz/download/linux/paperjam-1.2.tar.gz&quot;;
    hash = &quot;sha256-0AziT7ROICTEPKaA4Ub1B8NtIfLmxRXriW7coRxDpQ0&quot;;
  };

  CXX=&quot;clang++&quot;;
  PATH = &quot;${pkgs.gzip}/bin:${pkgs.gnutar}/bin:${pkgs.gnumake}/bin:${pkgs.clang}/bin:${pkgs.darwin.cctools}/bin:${pkgs.asciidoc}/bin:${pkgs.coreutils}/bin:${pkgs.bash}/bin&quot;;
  NIX_LDFLAGS_aarch64_apple_darwin = &quot;-L ${pkgs.qpdf}/lib   -L ${pkgs.libpaper}/lib -L ${pkgs.libcxxabi}/lib -liconv -L ${pkgs.libiconv}/lib &quot;;
  NIX_CFLAGS_COMPILE_aarch64_apple_darwin = &quot;-isystem ${pkgs.qpdf}/include   -isystem ${pkgs.libpaper}/include&quot;;
}
</code></pre>

<p>And here&rsquo;s the final <code>build-paperjam.sh</code> build script. Here we just needed to edit the <code>make install</code> line to set the <code>PREFIX</code>.</p>

<pre><code>#!/bin/bash

tar -xf &quot;$SOURCE&quot;
cd paperjam-1.2
make install PREFIX=&quot;$out&quot;
</code></pre>

<h3 id="let-s-look-at-our-compiled-derivation">let&rsquo;s look at our compiled derivation!</h3>

<p>Now that we understand this configuration a little better, let&rsquo;s talk about
what <code>nix-build</code> is doing a little more.</p>

<p>Behind the scenes, <code>nix-build paperjam.nix</code> actually runs <code>nix-instantiate</code> and <code>nix-store --realize</code>:</p>

<pre><code>$ nix-instantiate paperjam.nix
/nix/store/xp8kibpll55s0bm40wlpip51y7wnpfs0-paperjam-fake.drv
$ nix-store --realize /nix/store/xp8kibpll55s0bm40wlpip51y7wnpfs0-paperjam-fake.drv
</code></pre>

<p>I think what this means is that <code>paperjam.nix</code> get compiled to some
intermediate representation (also called a derivation?), and then the Nix
runtime takes over and is in charge of actually running the build scripts.</p>

<p>We can look at this <code>.drv</code> intermediate representation with <code>nix show-derivation</code></p>

<pre><code>{
  &quot;/nix/store/xp8kibpll55s0bm40wlpip51y7wnpfs0-paperjam-fake.drv&quot;: {
    &quot;outputs&quot;: { &quot;out&quot;: { &quot;path&quot;: &quot;/nix/store/bcnyqizvcysqc1vy382wfx015mmwn3bd-paperjam-fake&quot; }
    },
    &quot;inputSrcs&quot;: [ &quot;/nix/store/pbjj91f0qr8g14k58m744wdl9yvr2f5k-build-paperjam.sh&quot; ],
    &quot;inputDrvs&quot;: {
      &quot;/nix/store/38sikqcggyishxbgi2xnyrdsnq928gqx-asciidoc-10.2.0.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/3llc749f9pn0amlb9vgwsi22hin7kmz4-libcxxabi-11.1.0.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/a8ny8lrbpyn15wdxk3v89f4bdr08a38a-libpaper-1.1.28.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/d888pj9lll12s5qx11v850g1vd4h3vxq-cctools-port-973.0.1.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/gkpdv7xl39x9yxch0wjarq19mmv7j1pm-bash-5.2-p15.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/hwx16m7hmkp2rcik8h67nnyjp52zj849-gnutar-1.34.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/kqqwffajj24fmagxqps3bjcbrglbdryg-gzip-1.12.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/lnrxa45bza18dk8qgqjayqb65ilfvq2n-qpdf-11.2.0.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/rx7a5401h44dqsasl5g80fl25jqqih8r-gnumake-4.4.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/sx8blaza5822y51abdp3353xkdcbkpkb-coreutils-9.1.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/v3b7r7a8ipbyg9wifcqisf5vpy0c66cs-clang-wrapper-11.1.0.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/wglagz34w1jnhr4xrfdk0g2jghbk104z-paperjam-1.2.tar.gz.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/y9mb7lgqiy38fbi53m5564bx8pl1arkj-libiconv-50.drv&quot;: [ &quot;out&quot; ]
    },
    &quot;system&quot;: &quot;aarch64-darwin&quot;,
    &quot;builder&quot;: &quot;/nix/store/pbjj91f0qr8g14k58m744wdl9yvr2f5k-build-paperjam.sh&quot;,
    &quot;args&quot;: [],
    &quot;env&quot;: {
      &quot;CXX&quot;: &quot;clang++&quot;,
      &quot;NIX_CFLAGS_COMPILE_aarch64_apple_darwin&quot;: &quot;-isystem /nix/store/h25d99pd3zln95viaybdfynfq82r2dqy-qpdf-11.2.0/include   -isystem /nix/store/agxp1hx267qk1x79dl4jk1l5cg79izv1-libpaper-1.1.28/include&quot;,
      &quot;NIX_LDFLAGS_aarch64_apple_darwin&quot;: &quot;-L /nix/store/h25d99pd3zln95viaybdfynfq82r2dqy-qpdf-11.2.0/lib   -L /nix/store/agxp1hx267qk1x79dl4jk1l5cg79izv1-libpaper-1.1.28/lib -L /nix/store/awkb9g93ci2qy8yg5jl0zxw46f3xnvgv-libcxxabi-11.1.0/lib -liconv -L /nix/store/nmphpbjn8hhq7brwi9bw41m7l05i636h-libiconv-50/lib &quot;,
      &quot;PATH&quot;: &quot;/nix/store/90cqrp3nxbcihkx4vswj5wh85x5klaga-gzip-1.12/bin:/nix/store/siv9312sgiqwsjrdvj8lx0mr3dsj3nf5-gnutar-1.34/bin:/nix/store/yy3fdgrshcblwx0cfp76nmmi24szw89q-gnumake-4.4/bin:/nix/store/cqag9fv2gia03nzcsaygan8fw1ggdf4g-clang-wrapper-11.1.0/bin:/nix/store/f16id36r9xxi50mgra55p7cf7ra0x96k-cctools-port-973.0.1/bin:/nix/store/x873pgpwqxkmyn35jvvfj48ccqav7fip-asciidoc-10.2.0/bin:/nix/store/vhivi799z583h2kf1b8lrr72h4h3vfcx-coreutils-9.1/bin:/nix/store/0q1jfjlwr4vig9cz7lnb5il9rg0y1n84-bash-5.2-p15/bin&quot;,
      &quot;SOURCE&quot;: &quot;/nix/store/6d2fcw88d9by4fz5xa9gdpbln73dlhdk-paperjam-1.2.tar.gz&quot;,
      &quot;builder&quot;: &quot;/nix/store/pbjj91f0qr8g14k58m744wdl9yvr2f5k-build-paperjam.sh&quot;,
      &quot;name&quot;: &quot;paperjam-fake&quot;,
      &quot;out&quot;: &quot;/nix/store/bcnyqizvcysqc1vy382wfx015mmwn3bd-paperjam-fake&quot;,
      &quot;system&quot;: &quot;aarch64-darwin&quot;
    }
  }
}
</code></pre>

<p>This feels surprisingly easy to understand &ndash; you can see that there are a
bunch of environment variables, our bash script, and the paths to our inputs.</p>

<h3 id="the-compilation-helpers-we-re-not-using-stdenv">the compilation helpers we&rsquo;re not using: <code>stdenv</code></h3>

<p>Normally when you build a package with Nix, you don&rsquo;t do all of this stuff
yourself. Instead, you use a helper called <code>stdenv</code>, which seems to have two parts:</p>

<ol>
<li>a function called <code>stdenv.mkDerivation</code> which takes some arguments and generates a bunch of environment variables (it seems to be <a href="https://nixos.org/manual/nixpkgs/stable/#chap-stdenv">documented here</a>)</li>
<li>a 1600-line bash build script (<a href="https://github.com/NixOS/nixpkgs/blob/fc2bfe1cdc910104e6df52c5dc449e8f855c66b7/pkgs/stdenv/generic/setup.sh">setup.sh</a>) that consumes those environment variables. This is like our <code>build-paperjam.sh</code>, but much more generalized.</li>
</ol>

<p>Together, these two tools:</p>

<ul>
<li>add <code>LDFLAGS</code> automatically for each C library you depend on</li>
<li>add <code>CFLAGS</code> automatically so that you can get your header files</li>
<li>run <code>make</code></li>
<li>depend on clang and coreutils and bash and other core utilities so that you don&rsquo;t need to add them yourself</li>
<li>set <code>system</code> to your current system</li>
<li>let you easily add custom bash code to run at various phases of your build</li>
<li>maybe also manage versions somehow? Not sure about this one.</li>
</ul>

<p>and probably lots more useful things I don&rsquo;t know about yet</p>

<h3 id="let-s-look-at-the-derivation-for-jq">let&rsquo;s look at the derivation for <code>jq</code></h3>

<p>Let&rsquo;s look at one more compiled derivation, for <code>jq</code>. This is quite long but there
are some interesting things in here. I wanted to look at this because I wanted to see what a more typical derivation generated by <code>stdenv.mkDerivation</code> looked like.</p>

<pre><code>$ nix show-derivation /nix/store/q9cw5rp0ibpl6h4i2qaq0vdjn4pyms3p-jq-1.6.drv
{
  &quot;/nix/store/q9cw5rp0ibpl6h4i2qaq0vdjn4pyms3p-jq-1.6.drv&quot;: {
    &quot;outputs&quot;: {
      &quot;bin&quot;: { &quot;path&quot;: &quot;/nix/store/vabn35a2m2qmfi9cbym4z50bwq94fdzm-jq-1.6-bin&quot; },
      &quot;dev&quot;: { &quot;path&quot;: &quot;/nix/store/akda158i8gr0v0w397lwanxns8yrqldy-jq-1.6-dev&quot; },
      &quot;doc&quot;: { &quot;path&quot;: &quot;/nix/store/6qimafz8q88l90jwrzciwc27zhjwawcl-jq-1.6-doc&quot; },
      &quot;lib&quot;: { &quot;path&quot;: &quot;/nix/store/3wzlsin34l1cs70ljdy69q9296jnvnas-jq-1.6-lib&quot; },
      &quot;man&quot;: { &quot;path&quot;: &quot;/nix/store/dl1xf9w928jai5hvm5s9ds35l0m26m0k-jq-1.6-man&quot; },
      &quot;out&quot;: { &quot;path&quot;: &quot;/nix/store/ivzm5rrr7riwvgy2xcjhss6lz55qylnb-jq-1.6&quot; }
    },
    &quot;inputSrcs&quot;: [
      &quot;/nix/store/6xg259477c90a229xwmb53pdfkn6ig3g-default-builder.sh&quot;,
      &quot;/nix/store/jd98q1h1rxz5iqd5xs8k8gw9zw941lj6-fix-tests-when-building-without-regex-supports.patch&quot;
    ],
    &quot;inputDrvs&quot;: {
      &quot;/nix/store/0lbzkxz56yhn4gv5z0sskzzdlwzkcff8-autoreconf-hook.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/6wh5w7hkarfcx6fxsdclmlx097xsimmg-jq-1.6.tar.gz.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/87a32xgqw85rxr1fx3c5j86y177hr9sr-oniguruma-6.9.8.drv&quot;: [ &quot;dev&quot; ],
      &quot;/nix/store/gkpdv7xl39x9yxch0wjarq19mmv7j1pm-bash-5.2-p15.drv&quot;: [ &quot;out&quot; ],
      &quot;/nix/store/xn1mjk78ly9wia23yvnsyw35q1mz4jqh-stdenv-darwin.drv&quot;: [ &quot;out&quot; ]
    },
    &quot;system&quot;: &quot;aarch64-darwin&quot;,
    &quot;builder&quot;: &quot;/nix/store/0q1jfjlwr4vig9cz7lnb5il9rg0y1n84-bash-5.2-p15/bin/bash&quot;,
    &quot;args&quot;: [
      &quot;-e&quot;,
      &quot;/nix/store/6xg259477c90a229xwmb53pdfkn6ig3g-default-builder.sh&quot;
    ],
    &quot;env&quot;: {
      &quot;__darwinAllowLocalNetworking&quot;: &quot;&quot;,
      &quot;__impureHostDeps&quot;: &quot;/bin/sh /usr/lib/libSystem.B.dylib /usr/lib/system/libunc.dylib /dev/zero /dev/random /dev/urandom /bin/sh&quot;,
      &quot;__propagatedImpureHostDeps&quot;: &quot;&quot;,
      &quot;__propagatedSandboxProfile&quot;: &quot;&quot;,
      &quot;__sandboxProfile&quot;: &quot;&quot;,
      &quot;__structuredAttrs&quot;: &quot;&quot;,
      &quot;bin&quot;: &quot;/nix/store/vabn35a2m2qmfi9cbym4z50bwq94fdzm-jq-1.6-bin&quot;,
      &quot;buildInputs&quot;: &quot;/nix/store/xfnl6xqbvnpacx8hw9d99ca4mly9kp0h-oniguruma-6.9.8-dev&quot;,
      &quot;builder&quot;: &quot;/nix/store/0q1jfjlwr4vig9cz7lnb5il9rg0y1n84-bash-5.2-p15/bin/bash&quot;,
      &quot;cmakeFlags&quot;: &quot;&quot;,
      &quot;configureFlags&quot;: &quot;--bindir=${bin}/bin --sbindir=${bin}/bin --datadir=${doc}/share --mandir=${man}/share/man&quot;,
      &quot;depsBuildBuild&quot;: &quot;&quot;,
      &quot;depsBuildBuildPropagated&quot;: &quot;&quot;,
      &quot;depsBuildTarget&quot;: &quot;&quot;,
      &quot;depsBuildTargetPropagated&quot;: &quot;&quot;,
      &quot;depsHostHost&quot;: &quot;&quot;,
      &quot;depsHostHostPropagated&quot;: &quot;&quot;,
      &quot;depsTargetTarget&quot;: &quot;&quot;,
      &quot;depsTargetTargetPropagated&quot;: &quot;&quot;,
      &quot;dev&quot;: &quot;/nix/store/akda158i8gr0v0w397lwanxns8yrqldy-jq-1.6-dev&quot;,
      &quot;doCheck&quot;: &quot;&quot;,
      &quot;doInstallCheck&quot;: &quot;1&quot;,
      &quot;doc&quot;: &quot;/nix/store/6qimafz8q88l90jwrzciwc27zhjwawcl-jq-1.6-doc&quot;,
      &quot;installCheckTarget&quot;: &quot;check&quot;,
      &quot;lib&quot;: &quot;/nix/store/3wzlsin34l1cs70ljdy69q9296jnvnas-jq-1.6-lib&quot;,
      &quot;man&quot;: &quot;/nix/store/dl1xf9w928jai5hvm5s9ds35l0m26m0k-jq-1.6-man&quot;,
      &quot;mesonFlags&quot;: &quot;&quot;,
      &quot;name&quot;: &quot;jq-1.6&quot;,
      &quot;nativeBuildInputs&quot;: &quot;/nix/store/ni9k35b9llfc3hys8nv5qsipw8pfy1ln-autoreconf-hook&quot;,
      &quot;out&quot;: &quot;/nix/store/ivzm5rrr7riwvgy2xcjhss6lz55qylnb-jq-1.6&quot;,
      &quot;outputs&quot;: &quot;bin doc man dev lib out&quot;,
      &quot;patches&quot;: &quot;/nix/store/jd98q1h1rxz5iqd5xs8k8gw9zw941lj6-fix-tests-when-building-without-regex-supports.patch&quot;,
      &quot;pname&quot;: &quot;jq&quot;,
      &quot;postInstallCheck&quot;: &quot;$bin/bin/jq --help &gt;/dev/null\n$bin/bin/jq -r '.values[1]' &lt;&lt;&lt; '{\&quot;values\&quot;:[\&quot;hello\&quot;,\&quot;world\&quot;]}' | grep '^world$' &gt; /dev/null\n&quot;,
      &quot;preBuild&quot;: &quot;rm -r ./modules/oniguruma\n&quot;,
      &quot;preConfigure&quot;: &quot;echo \&quot;#!/bin/sh\&quot; &gt; scripts/version\necho \&quot;echo 1.6\&quot; &gt;&gt; scripts/version\npatchShebangs scripts/version\n&quot;,
      &quot;propagatedBuildInputs&quot;: &quot;&quot;,
      &quot;propagatedNativeBuildInputs&quot;: &quot;&quot;,
      &quot;src&quot;: &quot;/nix/store/ggjlgjx2fw29lngbnvwaqr6hiz1qhy8g-jq-1.6.tar.gz&quot;,
      &quot;stdenv&quot;: &quot;/nix/store/qrz2mnb2gsnzmw2pqax693daxh5hsgap-stdenv-darwin&quot;,
      &quot;strictDeps&quot;: &quot;&quot;,
      &quot;system&quot;: &quot;aarch64-darwin&quot;,
      &quot;version&quot;: &quot;1.6&quot;
    }
  }
}
</code></pre>

<p>I thought it was interesting that some of the environment variables in here are actually bash scripts themselves &ndash; for example the <code>postInstallCheck</code> environment variable is a bash script.
Those bash script environment variables are <code>eval</code>ed in the main bash script (you can <a href="https://github.com/NixOS/nixpkgs/blob/fc2bfe1cdc910104e6df52c5dc449e8f855c66b7/pkgs/stdenv/generic/setup.sh#L61-L74">see that happening in setup.sh here</a>)</p>

<p>The <code>postInstallCheck</code> environment variable in this particular derivation starts like this:</p>

<pre><code>$bin/bin/jq --help &gt;/dev/null
$bin/bin/jq -r '.values[1]' &lt;&lt;&lt; '{&quot;values&quot;:[&quot;hello&quot;,&quot;world&quot;]}' | grep '^world$' &gt; /dev/null
</code></pre>

<p>I guess this is a test to make sure that <code>jq</code> installed correctly.</p>

<h3 id="finally-clean-up">finally: clean up</h3>

<p>All of my compiler experiments used about 3GB of disk space, but <code>nix-collect-garbage</code> cleaned up all of it.</p>

<h3 id="let-s-recap-the-process">let&rsquo;s recap the process!</h3>

<p>I feel like I understand Nix a bit better after going through this. I still
don&rsquo;t feel very motivated to learn the Nix language, but now I have some
idea of what Nix programs are actually doing under the hood!</p>

<p>My understanding is:</p>

<ol>
<li>First, <code>.nix</code> files get compiled into a <code>.drv</code> file, which is mostly a bunch of inputs and outputs and environment variables. This is where the Nix language stops being relevant.</li>
<li>Then all the environment variables get passed to a build script, which is in charge of doing the actual build</li>
<li>In the Nix standard environment (<code>stdenv</code>), some of those environment variables are themselves bash code, which gets <code>eval</code>ed by the big build script <code>setup.sh</code></li>
</ol>

<p>That&rsquo;s all! I probably made some mistakes in here, but this was kind of a fun rabbit hole.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some notes on using nix]]></title>
    <link href="https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/"/>
    <updated>2023-02-28T23:16:17+00:00</updated>
    <id>https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/</id>
    <content type="html"><![CDATA[

<p>Recently I started using a Mac for the first time. The biggest downside I&rsquo;ve
noticed so far is that the package management is much worse than on Linux.
At some point I got frustrated with homebrew because I felt like it was
spending too much time upgrading when I installed new packages, and so I
thought &ndash; maybe I&rsquo;ll try the <a href="https://nixos.org/">nix</a> package manager!</p>

<p>nix has a reputation for being confusing (it has its whole
own programming language!), so I&rsquo;ve been trying to figure out how to use nix in
a way that&rsquo;s as simple as possible and does not involve managing any
configuration files or learning a new programming language. Here&rsquo;s what I&rsquo;ve
figured out so far! We&rsquo;ll talk about how to:</p>

<ol>
<li>install packages with nix</li>
<li>build a custom nix package for a C++ program called <a href="https://mj.ucw.cz/sw/paperjam/">paperjam</a></li>
<li>install a 5-year-old version of <a href="https://github.com/gohugoio/hugo/">hugo</a> with nix</li>
</ol>

<p>As usual I&rsquo;ve probably gotten some stuff wrong in this post since I&rsquo;m still
pretty new to nix. I&rsquo;m also still not sure how much I like nix &ndash; it&rsquo;s very
confusing! But it&rsquo;s helped me compile some software that I was struggling to
compile otherwise, and in general it seems to install things faster than
homebrew.</p>

<h3 id="what-s-interesting-about-nix">what&rsquo;s interesting about nix?</h3>

<p>People often describe nix as &ldquo;declarative package management&rdquo;. I don&rsquo;t
care that much about declarative package management, so here are two things
that I appreciate about nix:</p>

<ol>
<li>It provides binary packages (hosted at <a href="https://cache.nixos.org/">https://cache.nixos.org/</a>) that you can quickly download and install</li>
<li>For packages which don&rsquo;t have binary packages, it makes it easier to compile them</li>
</ol>

<p>I think that the reason nix is good at compiling software is that:</p>

<ul>
<li>you can have multiple versions of the same library or program installed at a time (you could have 2 different versions of libc for instance). For example I have two versions of node on my computer right now, one at <code>/nix/store/4ykq0lpvmskdlhrvz1j3kwslgc6c7pnv-nodejs-16.17.1</code> and one at <code>/nix/store/5y4bd2r99zhdbir95w5pf51bwfg37bwa-nodejs-18.9.1</code>.</li>
<li>when nix builds a package, it builds it in isolation, using only the
specific versions of its dependencies that you explicitly declared. So
there&rsquo;s no risk that the package secretly depends on another package on your
system that you don&rsquo;t know about. No more fighting with <code>LD_LIBRARY_PATH</code>!</li>
<li>a lot of people have put a lot of work into writing down all of the
dependencies of packages</li>
</ul>

<p>I&rsquo;ll give a couple of examples later in this post of two times nix made it easier for me to compile software.</p>

<h3 id="how-i-got-started-with-nix">how I got started with nix</h3>

<p>here&rsquo;s how I got started with nix:</p>

<ol>
<li>Install nix. I forget exactly how I did this, but it looks like there&rsquo;s an <a href="https://nixos.org/download">official installer</a> and an <a href="https://zero-to-nix.com/concepts/nix-installer">unofficial installer from zero-to-nix.com</a>. The <a href="https://nixos.org/manual/nix/stable/installation/installing-binary.html#macos">instructions for uninstalling nix on MacOS with the standard multi-user install</a> are a bit complicated, so it might be worth choosing an installation method with simpler uninstall instructions.</li>
<li>Put <code>~/.nix-profile/bin</code> on my PATH</li>
<li>Install packages with <code>nix-env -iA nixpkgs.NAME</code></li>
<li>That&rsquo;s it.</li>
</ol>

<p>Basically the idea is to treat <code>nix-env -iA</code> like <code>brew install</code> or <code>apt-get install</code>.</p>

<p>For example, if I want to install <code>fish</code>, I can do that like this:</p>

<pre><code>nix-env -iA nixpkgs.fish
</code></pre>

<p>This seems to just download some binaries from <a href="https://cache.nixos.org">https://cache.nixos.org</a> &ndash; pretty simple.</p>

<p>Some people use nix to install their Node and Python and Ruby packages, but I haven&rsquo;t
been doing that &ndash; I just use <code>npm install</code> and <code>pip install</code> the same way I
always have.</p>

<h3 id="some-nix-features-i-m-not-using">some nix features I&rsquo;m not using</h3>

<p>There are a bunch of nix features/tools that I&rsquo;m not using, but that I&rsquo;ll
mention. I originally thought that you <em>had</em> to use these features to use nix,
because most of the nix tutorials I&rsquo;ve read talk about them. But you don&rsquo;t have to use them.</p>

<ul>
<li>NixOS (a Linux distribution)</li>
<li><a href="https://nixos.org/guides/nix-pills/developing-with-nix-shell.html">nix-shell</a></li>
<li><a href="https://nixos.wiki/wiki/Flakes">nix flakes</a></li>
<li><a href="https://github.com/nix-community/home-manager">home-manager</a></li>
<li><a href="https://devenv.sh/">devenv.sh</a></li>
</ul>

<p>I won&rsquo;t go into these because I haven&rsquo;t really used them and there are lots of
explanations out there.</p>

<h3 id="where-are-nix-packages-defined">where are nix packages defined?</h3>

<p>I think packages in the main nix package repository are defined in <a href="https://github.com/NixOS/nixpkgs/">https://github.com/NixOS/nixpkgs/</a></p>

<p>It looks like you can search for packages at <a href="https://search.nixos.org/packages">https://search.nixos.org/packages</a>. The two official ways to search packages seem to be:</p>

<ul>
<li><code>nix-env -qaP NAME</code>, which is very extremely slow and which I haven&rsquo;t been able to get to actually work</li>
<li><code>nix --extra-experimental-features 'nix-command flakes' search nixpkgs NAME</code>, which does seem to work but is kind of a mouthful. Also all of the packages it prints out start with <code>legacyPackages</code> for some reason</li>
</ul>

<p>I found a way to search nix packages from the command line that I liked better:</p>

<ol>
<li>Run <code>nix-env -qa '*' &gt; nix-packages.txt</code> to get a list of every package in the Nix repository</li>
<li>Write a short <code>nix-search</code> script that just greps <code>packages.txt</code> (<code>cat ~/bin/nix-packages.txt | awk '{print $1}' | rg &quot;$1&quot;</code>)</li>
</ol>

<h3 id="everything-is-installed-with-symlinks">everything is installed with symlinks</h3>

<p>One of nix&rsquo;s major design choices is that there isn&rsquo;t one single <code>bin</code> with all
your packages, instead you use symlinks.  There are a lot of layers of symlinks. A few examples of symlinks:</p>

<ul>
<li><code>~/.nix-profile</code> on my machine is (indirectly) a symlink to <code>/nix/var/nix/profiles/per-user/bork/profile-111-link/</code></li>
<li><code>~/.nix-profile/bin/fish</code> is a symlink to <code>/nix/store/afkwn6k8p8g97jiqgx9nd26503s35mgi-fish-3.5.1/bin/fish</code></li>
</ul>

<p>When I install something, it creates a new <code>profile-112-link</code> directory with new symlinks and updates my <code>~/.nix-profile</code> to point to that directory.</p>

<p>I think this means that if I install a new version of <code>fish</code> and I don&rsquo;t like it, I can
easily go back just by running <code>nix-env --rollback</code> &ndash; it&rsquo;ll move me to my previous profile directory.</p>

<h3 id="uninstalling-packages-doesn-t-delete-them">uninstalling packages doesn&rsquo;t delete them</h3>

<p>If I uninstall a nix package like this, it doesn&rsquo;t actually free any hard drive space, it just removes the symlinks.</p>

<pre><code>$ nix-env --uninstall oil
</code></pre>

<p>I&rsquo;m still not sure how to actually delete the package &ndash; I ran a garbage collection like this, which seemed to delete some things:</p>

<pre><code>$ nix-collect-garbage
...
85 store paths deleted, 74.90 MiB freed
</code></pre>

<p>But I still have <code>oil</code> on my system at <code>/nix/store/8pjnk6jr54z77jiq5g2dbx8887dnxbda-oil-0.14.0</code>.</p>

<p>There&rsquo;s a more aggressive version of <code>nix-collect-garbage</code> that also deletes old versions of your profiles (so that you can&rsquo;t rollback)</p>

<pre><code>$ nix-collect-garbage -d --delete-old
</code></pre>

<p>That doesn&rsquo;t delete <code>/nix/store/8pjnk6jr54z77jiq5g2dbx8887dnxbda-oil-0.14.0</code> either though and I&rsquo;m not sure why.</p>

<h3 id="upgrading">upgrading</h3>

<p>It looks like you can upgrade nix packages like this:</p>

<pre><code>nix-channel --update
nix-env --upgrade
</code></pre>

<p>(similar to <code>apt-get update &amp;&amp; apt-get upgrade</code>)</p>

<p>I haven&rsquo;t really upgraded anything yet. I think that if something goes wrong with an upgrade, you can roll back (because everything is immutable in nix!) with</p>

<pre><code>nix-env --rollback
</code></pre>

<p>Someone linked me to <a href="https://ianthehenry.com/posts/how-to-learn-nix/my-first-package-upgrade/">this post from Ian Henry</a> that
talks about some confusing problems with <code>nix-env --upgrade</code> &ndash; maybe it
doesn&rsquo;t work the way you&rsquo;d expect? I guess I&rsquo;ll be wary around upgrades.</p>

<h3 id="next-goal-make-a-custom-package-of-paperjam">next goal: make a custom package of <code>paperjam</code></h3>

<p>After a few months of installing existing packages, I wanted to make a custom package with nix for a program called <a href="https://mj.ucw.cz/sw/paperjam/">paperjam</a> that wasn&rsquo;t already packaged.</p>

<p>I was actually struggling to compile <code>paperjam</code> at all even without nix  because the version I had
of <code>libiconv</code> I has on my system was wrong. I thought it might be easier to
compile it with nix even though I didn&rsquo;t know how to make nix packages yet. And
it actually was!</p>

<p>But figuring out how to get there was VERY confusing, so here are some notes about how I did it.</p>

<h3 id="how-to-build-an-example-package">how to build an example package</h3>

<p>Before I started working on my <code>paperjam</code> package, I wanted to build an example existing package just to
make sure I understood the process for building a package. I was really
struggling to figure out how to do this, but I asked in Discord and someone
explained to me how I could get a working package from <a href="https://github.com/NixOS/nixpkgs/">https://github.com/NixOS/nixpkgs/</a> and build it. So here
are those instructions:</p>

<p><strong>step 1:</strong> Download some arbitrary package from <a href="https://github.com/NixOS/nixpkgs/">nixpkgs</a> on github, for example the <code>dash</code> package:</p>

<pre><code>wget https://raw.githubusercontent.com/NixOS/nixpkgs/47993510dcb7713a29591517cb6ce682cc40f0ca/pkgs/shells/dash/default.nix -O dash.nix
</code></pre>

<p><strong>step 2</strong>: Replace the first statement (<code>{ lib , stdenv , buildPackages , autoreconfHook , pkg-config , fetchurl , fetchpatch , libedit , runCommand , dash }:</code> with <code>with import &lt;nixpkgs&gt; {};</code> I don&rsquo;t know why you have to do this,
but it works.</p>

<p><strong>step 3</strong>: Run <code>nix-build dash.nix</code></p>

<p>This compiles the package</p>

<p><strong>step 4</strong>: Run <code>nix-env -i -f dash.nix</code></p>

<p>This installs the package into my <code>~/.nix-profile</code></p>

<p>That&rsquo;s all! Once I&rsquo;d done that, I felt like I could modify the <code>dash</code> package and make my own package.</p>

<h3 id="how-i-made-my-own-package">how I made my own package</h3>

<p><code>paperjam</code> has one dependency (<code>libpaper</code>) that also isn&rsquo;t packaged yet, so I needed to build <code>libpaper</code> first.</p>

<p>Here&rsquo;s <code>libpaper.nix</code>. I basically just wrote this by copying and pasting from
other packages in the <a href="https://github.com/NixOS/nixpkgs/">nixpkgs</a> repository.
My guess is what&rsquo;s happening here is that nix has some default rules for
compiling C packages (like &ldquo;run <code>make install</code>&rdquo;), so the <code>make install</code> happens
default and I don&rsquo;t need to configure it explicitly.</p>

<pre><code>with import &lt;nixpkgs&gt; {};

stdenv.mkDerivation rec {
  pname = &quot;libpaper&quot;;
  version = &quot;0.1&quot;;

  src = fetchFromGitHub {
    owner = &quot;naota&quot;;
    repo = &quot;libpaper&quot;;
    rev = &quot;51ca11ec543f2828672d15e4e77b92619b497ccd&quot;;
    hash = &quot;sha256-S1pzVQ/ceNsx0vGmzdDWw2TjPVLiRgzR4edFblWsekY=&quot;;
  };

  buildInputs = [ ];

  meta = with lib; {
    homepage = &quot;https://github.com/naota/libpaper&quot;;
    description = &quot;libpaper&quot;;
    platforms = platforms.unix;
    license = with licenses; [ bsd3 gpl2 ];
  };
}
</code></pre>

<p>Basically this just tells nix how to download the source from GitHub.</p>

<p>I built this by running <code>nix-build libpaper.nix</code></p>

<p>Next, I needed to compile <code>paperjam</code>. Here&rsquo;s a link to the <a href="https://github.com/jvns/nixpkgs/blob/22b70a48a797538c76b04261b3043165896d8f69/paperjam.nix">nix package I wrote</a>. The main things I needed to do other than telling it where to download the source were:</p>

<ol>
<li>add some extra build dependencies (like <code>asciidoc</code>)</li>
<li>set some environment variables for the install (<code>installFlags = [ &quot;PREFIX=$(out)&quot; ];</code>) so that it installed in the correct directory instead of <code>/usr/local/bin</code>.</li>
</ol>

<p>I set the hashes by first leaving the hash empty, then running <code>nix-build</code> to get an error message complaining about a mismatched hash. Then I copied the correct hash out of the error message.</p>

<p>I figured out how to set <code>installFlags</code> just by running <code>rg PREFIX</code>
in the nixpkgs repository &ndash; I figured that needing to set a <code>PREFIX</code> was
pretty common and someone had probably done it before, and I was right. So I
just copied and pasted that line from another package.</p>

<p>Then I ran:</p>

<pre><code>nix-build paperjam.nix
nix-env -i -f paperjam.nix
</code></pre>

<p>and then everything worked and I had <code>paperjam</code> installed! Hooray!</p>

<h3 id="next-goal-install-a-5-year-old-version-of-hugo">next goal: install a 5-year-old version of <code>hugo</code></h3>

<p>Right now I build this blog using Hugo 0.40, from 2018. I don&rsquo;t need any new
features so I haven&rsquo;t felt a need to upgrade. On Linux this is easy: Hugo&rsquo;s
releases are a static binary, so I can just download the 5-year-old binary from
the <a href="https://github.com/gohugoio/hugo/releases/tag/v0.40">releases page</a> and
run it. Easy!</p>

<p>But on this Mac I ran into some complications. Mac hardware has changed in the
last 5 years, so the Mac Hugo binary I downloaded crashed. And when I tried to
build it from source with <code>go build</code>, that didn&rsquo;t work either because Go build
norms have changed in the last 5 years as well.</p>

<p>I was working around this by running Hugo in a Linux docker container, but I
didn&rsquo;t love that: it was kind of slow and it felt silly. It shouldn&rsquo;t be that
hard to compile one Go program!</p>

<p>Nix to the rescue! Here&rsquo;s what I did to install the old version of Hugo with
nix.</p>

<h3 id="installing-hugo-0-40-with-nix">installing Hugo 0.40 with nix</h3>

<p>I wanted to install Hugo 0.40 and put it in my PATH as <code>hugo-0.40</code>. Here&rsquo;s how
I did it. I did this in a kind of weird way, but it worked (<a href="https://lazamar.github.io/download-specific-package-version-with-nix/">Searching and installing old versions of Nix packages</a>
describes a probably more normal method).</p>

<p><strong>step 1</strong>: Search through the nixpkgs repo to find Hugo 0.40</p>

<p>I found the <code>.nix</code> file here <a href="https://github.com/NixOS/nixpkgs/blob/17b2ef2/pkgs/applications/misc/hugo/default.nix">https://github.com/NixOS/nixpkgs/blob/17b2ef2/pkgs/applications/misc/hugo/default.nix</a></p>

<p><strong>step 2</strong>: Download that file and build it</p>

<p>I downloaded that file (and another file called <code>deps.nix</code> in the same directory), replaced the first line with <code>with import &lt;nixpkgs&gt; {};</code>, and built it with <code>nix-build hugo.nix</code>.</p>

<p>That almost worked without any changes, but I had to make two changes:</p>

<ul>
<li>replace <code>with stdenv.lib</code> to <code>with lib</code> for some reason.</li>
<li>rename the package to <code>hugo040</code> so that it wouldn&rsquo;t conflict with the other version of <code>hugo</code> that I had installed</li>
</ul>

<p><strong>step 3</strong>: Rename <code>hugo</code> to <code>hugo-0.40</code></p>

<p>I write a little post install script to rename the Hugo binary.</p>

<pre><code>  postInstall = ''
    mv $out/bin/hugo $out/bin/hugo-0.40
  '';
</code></pre>

<p>I figured out how to run this by running <code>rg 'mv '</code> in the nixpkgs repository and just copying and modifying something that seemed related.</p>

<p><strong>step 4</strong>: Install it</p>

<p>I installed into my <code>~/.nix-profile/bin</code> by running <code>nix-env -i -f hugo.nix</code>.</p>

<p>And it all works! I put the final <code>.nix</code> file into my own personal <a href="https://github.com/jvns/nixpkgs/">nixpkgs repo</a> so that I can use it again later if I
want.</p>

<h3 id="reproducible-builds-aren-t-magic-they-re-really-hard">reproducible builds aren&rsquo;t magic, they&rsquo;re really hard</h3>

<p>I think it&rsquo;s worth noting here that this <code>hugo.nix</code> file isn&rsquo;t magic &ndash; the
reason I can easily compile Hugo 0.40 today is that many people worked for a long time to make it possible to
package that version of Hugo in a reproducible way.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Installing <code>paperjam</code> and this 5-year-old version of Hugo were both
surprisingly painless and actually much easier than compiling it without nix,
because nix made it much easier for me to compile the <code>paperjam</code> package with
the right version of <code>libiconv</code>, and because someone 5 years ago had already
gone to the trouble of listing out the exact dependencies for Hugo.</p>

<p>I don&rsquo;t have any plans to get much more complicated with nix (and it&rsquo;s still
very possible I&rsquo;ll get frustrated with it and go back to homebrew!), but we&rsquo;ll
see what happens! I&rsquo;ve found it much easier to start in a simple way and then
start using more features if I feel the need instead of adopting a whole bunch
of complicated stuff all at once.</p>

<p>I probably won&rsquo;t use nix on Linux &ndash; I&rsquo;ve always been happy enough with <code>apt</code>
(on Debian-based distros) and <code>pacman</code> (on Arch-based distros), and they&rsquo;re
much less confusing. But on a Mac it seems like it might be worth it. We&rsquo;ll
see! It&rsquo;s very possible in 3 months I&rsquo;ll get frustrated with nix and just go back to homebrew.</p>

<h3 id="5-month-update-rebuilding-my-nix-profile">5-month update: rebuilding my nix profile</h3>

<p>Update from 5 months in: nix is still going well, and I&rsquo;ve only run into 1
problem, which is that every <code>nix-env -iA</code> package installation started failing
with the error &ldquo;bad meta.outputsToInstall&rdquo;.</p>

<p><a href="https://github.com/zombiezen/dotfiles/blob/main/nix/nix-rebuild-profile/nix-rebuild-profile.sh">This script</a>
from Ross Light fixes that problem though. It lists every derivation installed
in my current profile and creates a new profile with the exact same
derivations. This feels like a nix bug (surely creating a new profile with the
exact same derivations should be a no-op?) but I haven&rsquo;t looked into it more yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Javascript without a build system]]></title>
    <link href="https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/"/>
    <updated>2023-02-16T12:56:02+00:00</updated>
    <id>https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;ve been writing some Javascript this week, and as always when I start
a new frontend project, I was faced with the question: should I use a build
system?</p>

<p>I want to talk about what&rsquo;s appealing to me about build systems, why I
(usually) still don&rsquo;t use them, and why I find it frustrating that some
frontend Javascript libraries require that you use a build system.</p>

<p>I&rsquo;m writing this because most of the writing I see about JS assumes that
you&rsquo;re using a build system, and it can be hard to navigate for folks like me
who write very simple small Javascript projects that don&rsquo;t require a build
system.</p>

<h3 id="what-s-a-build-system">what&rsquo;s a build system?</h3>

<p>The idea is that you have a bunch of Javascript or Typescript code, and you
want to translate it into different Javascript code before you put it on your
website.</p>

<p>Build systems can do lots of useful things, like:</p>

<ul>
<li>combining 100s of JS files into one big bundle (for efficiency reasons)</li>
<li>translating Typescript into Javascript</li>
<li>typechecking Typescript</li>
<li>minification</li>
<li>adding polyfills to support older browsers</li>
<li>compiling JSX</li>
<li>treeshaking (remove unused JS code to reduce file sizes)</li>
<li>building CSS (like <a href="https://tailwindcss.com/">tailwind</a> does)</li>
<li>and probably lots of other important things</li>
</ul>

<p>Because of this, if you&rsquo;re building a complex frontend project today, probably you&rsquo;re using a build system like webpack, rollup, esbuild, parcel, or vite.</p>

<p>Lots of those features are appealing to me, and I&rsquo;ve used build systems in the past for some of these reasons: <a href="https://messwithdns.net/">Mess With DNS</a> uses <code>esbuild</code> to translate Typescript and combine lots of files into one big file, for example.</p>

<h3 id="the-goal-easily-make-changes-to-old-tiny-websites">the goal: easily make changes to old tiny websites</h3>

<p>I make a lot <a href="https://css-examples.wizardzines.com/">of</a> <a href="https://questions.wizardzines.com">small</a> <a href="https://sql-playground.wizardzines.com/">simple</a> <a href="https://nginx-playground.wizardzines.com/">websites</a>, I have approximately 0 maintenance energy for any of them, and I change them very infrequently.</p>

<p>My goal is that if I have a site that I made 3 or 5 years ago, I&rsquo;d like to be able to, in 20 minutes:</p>

<ul>
<li>get the source from github on a new computer</li>
<li>make some changes</li>
<li>put it on the internet</li>
</ul>

<p>But my experience with build systems (not just Javascript build systems!), is
that if you have a 5-year-old site, often it&rsquo;s a huge pain to get the site
built again.</p>

<p>And because most of my websites are pretty small, the <em>advantage</em> of using a
build system is pretty small &ndash; I don&rsquo;t really need Typescript or JSX. I can
just have one 400-line <code>script.js</code> file and call it a day.</p>

<h3 id="example-trying-to-build-the-sql-playground">example: trying to build the SQL playground</h3>

<p>One of my sites (the <a href="https://sql-playground.wizardzines.com/">sql playground</a>) uses a build system (it&rsquo;s using Vue). I last edited that project 2 years ago, on a different machine.</p>

<p>Let&rsquo;s see if I can still easily build it today on my machine. To start out, we have to run <code>npm install</code>. Here&rsquo;s the output I get.</p>

<pre><code>$ npm install
[lots of output redacted]
npm ERR! code 1
npm ERR! path /Users/bork/work/sql-playground.wizardzines.com/node_modules/grpc
npm ERR! command failed
npm ERR! command sh /var/folders/3z/g3qrs9s96mg6r4dmzryjn3mm0000gn/T/install-b52c96ad.sh
npm ERR! CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/surface/init.o
npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/avl/avl.o
npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/backoff/backoff.o
npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_args.o
npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_stack.o
npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_stack_builder.o
npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_trace.o
npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channelz.o
</code></pre>

<p>There&rsquo;s some kind of error building <code>grpc</code>. No problem. I don&rsquo;t
really need that dependency anyway, so I can just take 5 minutes to tear it out
and rebuild. Now I can <code>npm install</code> and everything works.</p>

<p>Now let&rsquo;s try to build the project:</p>

<pre><code>$ npm run build
  ?  Building for production...Error: error:0308010C:digital envelope routines::unsupported
    at new Hash (node:internal/crypto/hash:71:19)
    at Object.createHash (node:crypto:130:10)
    at module.exports (/Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/util/createHash.js:135:53)
    at NormalModule._initBuildHash (/Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:414:16)
    at handleParseError (/Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:467:10)
    at /Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:499:5
    at /Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:356:12
    at /Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:373:3
    at iterateNormalLoaders (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:214:10)
    at iterateNormalLoaders (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:221:10)
    at /Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:236:3
    at runSyncOrAsync (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:130:11)
    at iterateNormalLoaders (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:232:2)
    at Array.&lt;anonymous&gt; (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:205:4)
    at Storage.finished (/Users/bork/work/sql-playground.wizardzines.com/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:43:16)
    at /Users/bork/work/sql-playground.wizardzines.com/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:79:9
</code></pre>

<p><a href="https://stackoverflow.com/questions/69692842/error-message-error0308010cdigital-envelope-routinesunsupported">This stack overflow answer</a> suggests running <code>export NODE_OPTIONS=--openssl-legacy-provider</code> to fix this error.</p>

<p>That works, and finally I can <code>npm run build</code> to build the project.</p>

<p>This isn&rsquo;t really that bad (I only had to remove a dependency and pass a slightly mysterious node option!),
but I would rather not be derailed by those build errors.</p>

<h3 id="for-me-a-build-system-isn-t-worth-it-for-small-projects">for me, a build system isn&rsquo;t worth it for small projects</h3>

<p>For me, a complicated Javascript build system just doesn&rsquo;t seem worth it for
small 500-line projects &ndash; it means giving up being able to easily update the
project in the future in exchange for some pretty marginal benefits.</p>

<h3 id="esbuild-seems-a-little-more-stable">esbuild seems a little more stable</h3>

<p>I want to give a quick shoutout to esbuild: I <a href="https://jvns.ca/blog/2021/11/15/esbuild-vue/">learned about esbuild in 2021</a> and used for a project, and
so far it does seem a more reliable way to build JS projects.</p>

<p>I just tried to build an <code>esbuild</code> project that I last touched 8 months ago on
a new computer, and it worked. But I can&rsquo;t say for sure if I&rsquo;ll be able to
easily build that project in 2 years. Maybe it will, I hope so!</p>

<h3 id="not-using-a-build-system-is-usually-pretty-easy">not using a build system is usually pretty easy</h3>

<p>Here&rsquo;s what the part of <a href="https://nginx-playground.wizardzines.com/">nginx playground</a> code that imports all the libraries looks like:</p>

<pre><code>&lt;script src=&quot;js/vue.global.prod.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;codemirror-5.63.0/lib/codemirror.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;codemirror-5.63.0/mode/nginx/nginx.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;codemirror-5.63.0/mode/shell/shell.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;codemirror-5.63.0/mode/javascript/javascript.js&quot;&gt;&lt;/script&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;codemirror-5.63.0/lib/codemirror.css&quot;&gt;
&lt;script src=&quot;script.js &quot;&gt;&lt;/script&gt;
</code></pre>

<p>This project is also using Vue, but it just uses a <code>&lt;script src</code> to load Vue &ndash;
there&rsquo;s no build process for the frontend.</p>

<h3 id="a-no-build-system-template-for-using-vue">a no-build-system template for using Vue</h3>

<p>A couple of people asked how to get started writing Javascript without a build
system. Of course you can write vanilla JS if you want, but my usual framework
is Vue 3.</p>

<p><a href="https://github.com/jvns/vue3-tiny-template">Here&rsquo;s a tiny template I built</a>
for starting a Vue 3 project with no build system. It&rsquo;s just 2 files and ~30 lines of HTML/JS.</p>

<h3 id="some-libraries-require-you-to-use-a-build-system">some libraries require you to use a build system</h3>

<p>This build system stuff is on my mind recently because I&rsquo;m using CodeMirror 5
for a new project this week, and I saw there was a new version, CodeMirror 6.</p>

<p>So I thought &ndash; cool, maybe I should use CodeMirror 6 instead of CodeMirror 5.
But &ndash; it seems like you can&rsquo;t use CodeMirror 6 without a build system (according to <a href="https://codemirror.net/docs/migration/">the migration guide</a>). So I&rsquo;m going to stick with CodeMirror 5.</p>

<p>Similarly, you used to be able to just download Tailwind as a giant CSS file,
but <a href="https://tailwindcss.com/docs/installation">Tailwind 3</a> doesn&rsquo;t seem to be available as a
big CSS file at all anymore, you need to run Javascript to build it. So I&rsquo;m
going to keep using Tailwind 2 for now. (I know, I know, you&rsquo;re not supposed to use the big CSS file, but it&rsquo;s only 300KB gzipped and I really don&rsquo;t want a build step)</p>

<p>(edit: it looks like Tailwind released a <a href="https://tailwindcss.com/blog/standalone-cli">standalone CLI</a> in 2021 which seems like a nice option)</p>

<p>I&rsquo;m not totally sure why some libraries don&rsquo;t provide a no-build-system version
&ndash; maybe distributing a no-build-system version would add a lot of additional
complexity to the library, and the maintainer doesn&rsquo;t think it&rsquo;s worth it. Or
maybe the library&rsquo;s design means that it&rsquo;s not possible to distribute a
no-build-system version for some reason.</p>

<h3 id="i-d-love-more-tips-for-no-build-system-javascript">I&rsquo;d love more tips for no-build-system javascript</h3>

<p>My main strategies so far are:</p>

<ul>
<li>search for &ldquo;CDN&rdquo; on a library&rsquo;s website to find a standalone javascript file</li>
<li>use <a href="https://unpkg.com">https://unpkg.com</a> to see if the library has a built version I can use</li>
<li>host my own version of libraries instead of relying on a CDN that might go down</li>
<li>write my own simple integrations instead of pulling in another dependency (for example I wrote my own CodeMirror component for Vue the other day)</li>
<li>if I want a build system, use esbuild</li>
</ul>

<p>A couple of other things that look interesting but that I haven&rsquo;t looked into:</p>

<ul>
<li>this <a href="https://devblogs.microsoft.com/typescript/a-proposal-for-type-syntax-in-javascript/">typescript proposal for type syntax in Javascript comments</a></li>
<li>ES modules generally</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Print copies of The Pocket Guide to Debugging have arrived]]></title>
    <link href="https://jvns.ca/blog/2023/02/11/print-copies-of-the-pocket-guide-to-debugging-have-arrived/"/>
    <updated>2023-02-11T09:12:11+00:00</updated>
    <id>https://jvns.ca/blog/2023/02/11/print-copies-of-the-pocket-guide-to-debugging-have-arrived/</id>
    <content type="html"><![CDATA[

<p>Hello! We <a href="https://jvns.ca/blog/2022/12/21/new-zine--the-pocket-guide-to-debugging/">released The Pocket Guide to Debugging</a> back in December, and here&rsquo;s a final update: the print copies are done printing and they&rsquo;ve arrived at the warehouse, ready to ship to anyone who wants one.</p>

<p>You can <a href="https://wizardzines.com/zines/debugging-guide">buy the print or PDF version</a> now, and if you preordered it, your copy should already have shipped. Some people have told me that they already received theirs! Email me if you haven&rsquo;t gotten the shipping confirmation.</p>

<h3 id="some-pictures">some pictures</h3>

<p>Here are some photos of what the print version looks like:</p>

<p><img src="https://jvns.ca/images/debugging-print-front.jpeg">
<img src="https://jvns.ca/images/debugging-print-spine.jpeg"></p>

<h3 id="what-was-involved-in-printing-it">what was involved in printing it</h3>

<p>In case anyone is interested, here&rsquo;s what was involved in putting together the print version:</p>

<ol>
<li>Make a PDF copy that people can print on their home printer (with a 360-line Python program)</li>
<li>Test on my home printer that the &ldquo;print at home version&rdquo; prints properly</li>
<li>Release the &ldquo;print at home&rdquo; version (this was back in December)</li>
<li>Take a couple of weeks off, since it&rsquo;s the end of the year</li>
<li>Ask the illustrator to make a back cover</li>
<li>Get a quote from the print company</li>
<li>Agonize a bit over whether to print the zine as perfect bound or saddle stitched (stapled). Pick perfect bound.</li>
<li>Find out from the print company how wide the spine has to be</li>
<li>With the help of the illustrator, make a design for the spine.</li>
<li>Get an ISBN number (just a couple of clicks at <a href="https://library-archives.canada.ca/">Libraries and Archives Canada</a>)</li>
<li>Get a bar code for the ISBN (from <a href="https://bookow.com/resources.php#isbn-barcode-generator">bookow</a>), edit it to make it a little smaller, and put it on the back cover</li>
<li>Send the new PDF to the print company and request a print proof</li>
<li>Wait a week or so for the proof to get shipped across the continent</li>
<li>Once the proof arrives, realize that the inner margins are too small, because it was perfect bound and perfect bound books need bigger margins (We&rsquo;d already tried to account for that, but we didn&rsquo;t make them big enough)</li>
<li>Measure various books I have around the house and print some new sample pages to figure out the right margins</li>
<li>Painstakingly manually readjust every single page to have slightly different proportions, so that I can increase the margins</li>
<li>Edit the Python script to make a new PDF with the bigger margins</li>
<li>Send the final files to the print company</li>
<li>Wait a week for them to print 1500 copies</li>
<li>The print copies arrive at the warehouse!</li>
<li>Wait another 3 business days for the (amazing) folks who do the shipping to send out all 700 or so preorders</li>
<li>Success!</li>
</ol>

<p>Printing 1500 copies of something is always a little scary, but I&rsquo;m really
happy with how it turned out.</p>

<h3 id="thanks-so-much-to-everyone-who-preordered">thanks so much to everyone who preordered!</h3>

<p>If you preordered the print version, thanks so much for your patience &ndash; having
the preorders really helps me decide how many to print.</p>

<p>And please let me know if something went wrong &ndash; 1 or 2 packages always get
lost in the mail and while I can&rsquo;t help find them, it&rsquo;s very easy for me to
just ship you another one :)</p>
]]></content>
  </entry>
  
</feed>
