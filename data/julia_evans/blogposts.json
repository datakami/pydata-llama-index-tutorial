[
    {
        "title": "Notes on using a single-person Mastodon server",
        "link": "https://jvns.ca/blog/2023/08/11/some-notes-on-mastodon/",
        "updated": "2023-08-11T08:13:16+00:00",
        "id": "https://jvns.ca/blog/2023/08/11/some-notes-on-mastodon/",
        "guidislink": false,
        "text": "I started using Mastodon back in November, and it's the Twitter alternative where I've been spending most of my time recently, mostly because the Fediverse is where a lot of the Linux nerds seem to be right now.\n\nI've found Mastodon quite a bit more confusing than Twitter because it's a distributed system, so here are a few technical things I've learned about it over the last 10 months. I'll mostly talk about what using a single-person server has been like for me, as well as a couple of notes about the API, DMs and ActivityPub.\n\nI might have made some mistakes, please let me know if I've gotten anything wrong!\n\n### what's a mastodon instance?\n\nFirst: Mastodon is a decentralized collection of independently run servers instead of One Big Server. The software is [open source](https://github.com/mastodon/mastodon).\n\nIn general, if you have an account on one server (like `ruby.social`), you **can** follow people on another server (like `hachyderm.io`), and they can follow you.\n\nI'm going to use the terms \"Mastodon server\" and \"Mastodon instance\" interchangeably in this post.\n\n### on choosing a Mastodon instance\n\nThese were the things I was concerned about when choosing an instance:\n\n  1. An instance name that I was comfortable being part of my online identity. For example, I probably wouldn't want to be `@b0rk@infosec.exchange` because I'm not an infosec person.\n  2. The server's stability. Most servers are volunteer-run, and volunteer moderation work can be exhausting - will the server really be around in a few years? For example [mastodon.technology](https://ashfurrow.com/blog/mastodon-technology-shutdown/) and mastodon.lol shut down.\n  3. The admins' moderation policies.\n  4. That server's general reputation with other servers. I started out on `mastodon.social`, but some servers choose to block or limit mastodon.social for various reasons\n  5. The community: every Mastodon instance has a local timeline with all posts from users on that instance, would I be interested in reading the local timeline?\n  6. Whether my account would be a burden for the admin of that server (since I have a lot of followers)\n\n\n\nIn the end, I chose to run my own mastodon server because it seemed simplest - I could pick a domain I liked, and I knew I'd definitely agree with the moderation decisions because I'd be in charge.\n\nI'm not going to give server recommendations here, but here's a list of the [top 200 most common servers people who follow me use](https://gist.github.com/jvns/5eb0a58319b93049a8c014433766edd3).\n\n### using your own domain\n\nOne big thing I wondered was - can I use my own domain (and have the username `@b0rk@jvns.ca` or something) but be on someone else's Mastodon server?\n\nThe answer to this seems to be basically \"no\": if you want to use your own domain on Mastodon, you need to run your own server. (you can [kind of do this](https://blog.maartenballiauw.be/post/2022/11/05/mastodon-own-donain-without-hosting-server.html), but it's more like an alias or redirect - if I used that method to direct `b0rk@jvns.ca` to `b0rk@mastodon.social`, my posts would still show up as being from `b0rk@mastodon.social`)\n\nThere's also other ActivityPub software ([Takah\u0113](https://jointakahe.org/)) that supports people bringing their own domain in a first-class way.\n\n### notes on having my own server\n\nI really wanted to have a way to use my own domain name for identity, but to share server hosting costs with other people. This isn't possible on Mastodon right now, so I decided to set up my own server instead.\n\nI chose to run a Mastodon server (instead of some other ActivityPub implementation) because Mastodon is the most popular one. Good managed Mastodon hosting is readily available, there are tons of options for client apps, and I know for sure that my server will work well with other people's servers.\n\nI use [masto.host](https://masto.host/) for Mastodon hosting, and it's been great so far. I have nothing interesting to say about what it's like to operate a Mastodon instance because I know literally nothing about it. Masto.host handles all of the server administration and Mastodon updates, and I never think about it at all.\n\nRight now I'm on their $19/month (\"Star\") plan, but it's possible I could use a smaller plan with no problems. Right now their cheapest plan is $6/month and I expect that would be fine for someone with a smaller account.\n\nSome things I was worried about when embarking on my own Mastodon server:\n\n  * I wanted to run the server at `social.jvns.ca`, but I wanted my username to be `b0rk@jvns.ca` instead of `b0rk@social.jvns.ca`. To get this to work I followed these [Setting up a personal fediverse ID](https://jacobian.org/til/my-mastodon-instance/) directions from Jacob Kaplan-Moss and it's been fine.\n  * The administration burden of running my own server. I imported a small list of servers to block/defederate from but didn't do anything else. That's been fine.\n  * Reply and profile visibility. This has been annoying and we'll talk about it next\n\n\n\n### downsides to being on a single-person server\n\nBeing on a 1-person server has some significant downsides. To understand why, you need to understand a little about how Mastodon works.\n\nEvery Mastodon server has a database of posts. Servers only have posts that they were explicitly sent by another server in their database.\n\nSome reasons that servers might receive posts:\n\n  * someone on the server follows a user\n  * a post mentions someone on the server\n\n\n\nAs a 1-person server, my server does not receive that many posts! I only get posts from people I follow or posts that explicitly mention me in some way.\n\nThe causes several problems:\n\n  1. when I visit someone's profile on Mastodon who I don't already follow, my server will not fetch the profile's content (it'll fetch their profile picture, description, and pinned posts, but not any of their post history). So their profile appears as if they've never posted anything\n  2. bad reply visibility: when I look at the replies to somebody else's post (even if I follow them!), I don't see all of the replies, only the ones which have made it to my server. If you want to understand the exact rules about who can see which replies (which are quite complicated!), [here's a great deep dive](https://seb.jambor.dev/posts/understanding-activitypub-part-3-the-state-of-mastodon/) by Sebastian Jambor. I think it's possible to end up in a state where no one person can see all of the replies, including the original poster.\n  3. favourite and boost accounts are inaccurate - usually posts show up having at most 1 or 2 favourites / boosts, even if the post was actually favourite or boosted hundreds of times. I think this is because it only counts favourites/boosts from people I follow.\n\n\n\nAll of these things will happen to users of any small Mastodon server, not just 1-person servers.\n\n### bad reply visibility makes conversations harder\n\nA lot of people are on smaller servers, so when they're participating in a conversation, they can't see all the replies to the post.\n\nThis means that replies can get pretty repetitive because people literally cannot see each other's replies. This is especially annoying for posts that are popular or controversial, because the person who made the post has to keep reading similar replies over and over again by people who think they're making the point for the first time.\n\nTo get around this (as a reader), you can click \"open link to post\" or something in your Mastodon client, which will open up the page on the poster's server where you can read all of the replies. It's pretty annoying though.\n\nAs a poster, I've tried to reduce repetitiveness in replies by:\n\n  * putting requests in my posts like \"(no need to reply if you don\u2019t remember, or if you\u2019ve been using the command line comfortably for 15 years \u2014 this question isn\u2019t for you :) )\"\n  * occasionally editing my posts to include very common replies\n  * very occasionally deleting the post if it gets too out of hand\n\n\n\nThe Mastodon devs are extremely aware of these issues, there are a bunch of github issues about them:\n\n  * [backfill statuses when first subscribed](https://github.com/mastodon/mastodon/issues/34)\n  * [fetch whole conversation threads](https://github.com/mastodon/mastodon/issues/9409)\n\n\n\nMy guess is that there are technical reasons these features are difficult to add because those issues have been open for 5-7 years.\n\nThe Mastodon devs have said that they plan to improve reply fetching, but that it requires a significant amount of work.\n\n### some visibility workarounds\n\nSome people have built workarounds for fetching profiles / replies.\n\n  * [Fedifetcher](https://blog.thms.uk/fedifetcher)\n  * [combine.social](https://combine.social/)\n\n\n\nAlso, there are a couple of Mastodon clients which will proactively fetch replies. For iOS:\n\n  * Mammoth does it automatically\n  * Mona will fetch posts if I click \"load from remote server\" manually\n\n\n\nI haven't tried those yet though.\n\n### other downsides of running your own server: discovery is much harder\n\nMastodon instances have a \"local timeline\" where you can see everything other people on the server are posting, and a \"federated timeline\" which shows sort of a combined feed from everyone followed by anyone on the server. This means that you can see trending posts and get an idea of what's going on and find people to follow. You don't get that if you're on a 1-person server - it's just me talking to myself! (plus occasional interjections from [my reruns bot](https://social.jvns.ca/@b0rk_reruns)).\n\nSome workarounds people mentioned for this:\n\n  * you can populate your federated timeline with posts from another instance by using a **relay**. I haven't done this but someone else said they use [FediBuzz](https://relay.fedi.buzz) and I might try it out.\n  * some mastodon clients (like apparently Moshidon on Android) let you follow other instances\n\n\n\nIf anyone else on small servers has suggestions for how to make discovery easier I'd love to hear them.\n\n### account migration\n\nWhen I moved to my own server from `mastodon.social`, I needed to run an account migration to move over my followers. First, here's how migration works:\n\n  1. Account migration **does not** move over your posts. All of my posts stayed on my old account. This is part of why I moved to running my own server - I didn't want to ever lose my posts a second time.\n  2. Account migration **does not** move over the list of people you follow/mute/block. But you can import/export that list in your Mastodon settings so it's not a big deal. If you follow private accounts they'll have to re-approve your follow request.\n  3. Account migration **does** move over your followers\n\n\n\nThe follower move was the part I was most worried about. Here's how it turned out:\n\n  * over ~24 hours, most of my followers moved to the new account\n  * one or two servers did not get the message about the account migration for some reason, so about 2000 followers were \"stuck\" and didn't migrate. I fixed this by waiting 30 days and re-running the account migration, which moved over most of the remaining followers. There's also a [tootctl command](https://github.com/mastodon/mastodon/issues/22281) that the admin of the **old instance** can run to retry the migration\n  * about 200 of my followers never migrated over, I think because they're using ActivityPub software other than Mastodon which doesn't support account migration. You can see the [old account here](https://mastodon.social/@b0rk)\n\n\n\n### using the Mastodon API is great\n\nOne thing I love about Mastodon is - it has an API that's MUCH easier to use than Twitter's API. I've always been frustrated with how difficult it is to navigate large Twitter threads, so I made a small [mastodon thread view](https://mastodon-thread-view.jvns.ca/) website that lets you log into your Mastodon account. It's pretty janky and it's really only made for me to use, but I've really appreciated the ability to write my own janky software to improve my Mastodon experience.\n\nSome notes on the Mastodon API:\n\n  * You can build Mastodon client software totally on the frontend in Javascript, which is really cool.\n  * I couldn't find a vanilla Javascript Mastodon client, so I [wrote a crappy one](https://github.com/jvns/mastodon-threaded-replies/blob/main/mastodon.js)\n  * [API docs are here](https://docs.joinmastodon.org/client/intro/)\n  * Here's a [tiny Python script I used to list all my Mastodon followers](https://gist.github.com/jvns/0fe51383cbbb63e94177c60f1e0371c6), which also serves as a simple example of how easy using the API is.\n  * The best documentation I could find for which OAuth scopes correspond to which API endpoints is [this github issue](https://github.com/mastodon/mastodon/pull/7929)\n\n\n\nNext I'll talk about a few general things about Mastodon that confused or surprised me that aren't specific to being on a single-person instance.\n\n### DMs are weird\n\nThe way Mastodon DMs work surprised me in a few ways:\n\n  * Technically DMs are just regular posts with visibility limited to the people mentioned in the post. This means that if you accidentally mention someone in a DM (\"@x is such a jerk\"), it's possible to accidentally send the message to them\n  * DMs aren't very private: the admins on the sending and receiving servers can technically read your DMs if they have access to the database. So they're not appropriate for sensitive information.\n  * Turning off DMs is weird. Personally I don't like receiving DMs from strangers - it's too much to keep track of and I'd prefer that people email me. On Twitter, I can just turn it off and people won't see an option to DM me. But on Mastodon, when I turn off notifications for DMs, anyone can still \"DM\" me, but the message will go into a black hole and I'll never see it. I put a note in my profile about this.\n\n\n\n### defederation and limiting\n\nThere are a couple of different ways for a server to block another Mastodon server. I haven't really had to do this much but people talk about it a lot and I was confused about the difference, so:\n\n  * A server can **defederate** from another server (this seems to be called [suspend](https://docs.joinmastodon.org/admin/moderation/#suspend-server) in the Mastodon docs). This means that nobody on a server can follow someone from the other server.\n  * A server can **[limit](https://docs.joinmastodon.org/admin/moderation/#limit-user)** (also known as \"silence\") a user or server. This means that content from that user is only visible to that user's followers - people can't discover the user through retweets (aka \"boosts\" on Mastodon).\n\n\n\nOne thing that wasn't obvious to me is that who servers defederate / limit is sometimes hidden, so it's hard to suss out what's going on if you're considering joining a server, or trying to understand why you can't see certain posts.\n\n### there's no search for posts\n\nThere's no way to search past posts you've read. If I see something interesting on my timeline and want to find it later, I usually can't. (Mastodon has a [Elasticsearch-based search feature](https://docs.joinmastodon.org/admin/optional/elasticsearch/), but it only allows you to search your own posts, your mentions, your favourites, and your bookmarks)\n\nThese limitations on search are intentional (and a very common source of arguments) - it's a privacy / safety issue. Here's a [summary from Tim Bray](https://www.tbray.org/ongoing/When/202x/2022/12/30/Mastodon-Privacy-and-Search) with lots of links.\n\nIt would be personally convenient for me to be able to search more easily but I respect folks' safety concerns so I'll leave it at that.\n\nMy understanding is that the Mastodon devs are planning to add opt-in search for public posts relatively soon.\n\n### other ActivityPub software\n\nWe've been talking about Mastodon a lot, but not everyone who I follow is using Mastodon: Mastodon uses a protocol called [ActivityPub](https://activitypub.rocks/) to distribute messages.\n\nHere are some examples of other software I see people talking about, in no particular order:\n\n  * [Calckey](https://calckey.org/)\n  * [Akkoma](https://akkoma.social/)\n  * [gotosocial](https://gotosocial.org/)\n  * [Takah\u0113](https://jointakahe.org/)\n  * [writefreely](https://writefreely.org/)\n  * [pixelfed](https://pixelfed.org/) (for images)\n\n\n\nI'm probably missing a bunch of important ones.\n\n### what's the difference between Mastodon and other ActivityPub software?\n\nThis confused me for a while, and I'm still not super clear on how ActivityPub works. What I've understood is:\n\n  * ActivityPub is a protocol (you can explore how it works with blinry's nice [JSON explorer](https://json.blinry.org/#https://chaos.social/users/blinry))\n  * Mastodon **servers** communicate with each other (and with other ActivityPub servers) using ActivityPub\n  * Mastodon **clients** communicate with their server using the Mastodon API, which is its own thing\n  * There's also software like [GoToSocial](https://github.com/superseriousbusiness/gotosocial) that aims to be compatible with the Mastodon API, so that you can use a Mastodon client with it\n\n\n\n### more mastodon resources\n\n  * [Fedi.Tips](https://fedi.tips/) seems to be a great introduction\n  * I think you can still use [FediFinder](https://fedifinder.glitch.me/) to find folks you followed on Twitter on Mastodon\n  * I've been using the [Ivory](https://tapbots.com/ivory/) client on iOS, but there are lots of great clients. [Elk](https://elk.zone/) is an alternative web client that folks seem to like.\n\n\n\nI haven't written here about what Mastodon culture is like because other people have done a much better job of talking about it than me, but of course it's is the biggest thing that affects your experience and it was the thing that took me longest to get a handle on. A few links:\n\n  * Erin Kissane on [frictions people run into when joining Mastodon](https://erinkissane.com/mastodon-is-easy-and-fun-except-when-it-isnt)\n  * Kyle Kingsbury wrote some great [moderation guidelines for woof.group](https://blog.woof.group/mods/) (note: woof.group is a LGBTQ+ leather instance, be prepared to see lots of NSFW posts if you visit it)\n  * Mekka Okereke writes [lots of great posts about issues Black people encounter on Mastodon](https://hachyderm.io/@mekkaokereke/110273797004251326) (though they're all on Mastodon so it's a little hard to navigate)\n\n\n\n### that's all!\n\nI don't regret setting up a single-user server - even though it's inconvenient, it's important to me to have control over my social media. I think \"have control over my social media\" is more important to me than it is to most other people though, because I use Twitter/Mastodon a lot for work.\n\nI am happy that I didn't _start out_ on a single-user server though - I think it would have made getting started on Mastodon a lot more difficult.\n\nMastodon is pretty rough around the edges sometimes but I'm able to have more interesting conversations about computers there than I am on Twitter (or Bluesky), so that's where I'm staying for now.\n",
        "author": "Julia Evans"
    },
    {
        "title": "What helps people get comfortable on the command line?",
        "link": "https://jvns.ca/blog/2023/08/08/what-helps-people-get-comfortable-on-the-command-line-/",
        "updated": "2023-08-08T08:30:40+00:00",
        "id": "https://jvns.ca/blog/2023/08/08/what-helps-people-get-comfortable-on-the-command-line-/",
        "guidislink": false,
        "text": "\n\nSometimes I talk to friends who need to use the command line, but are intimidated by it. I never really feel like I have good advice (I've been using the command line for too long), and so I asked some people [on Mastodon](https://social.jvns.ca/@b0rk/110842645317766338):\n\n> if you just stopped being scared of the command line in the last year or three \u2014 what helped you?\n> \n> (no need to reply if you don\u2019t remember, or if you\u2019ve been using the command line comfortably for 15 years \u2014 this question isn\u2019t for you :) )\n\nThis list is still a bit shorter than I would like, but I'm posting it in the hopes that I can collect some more answers. There obviously isn't one single thing that works for everyone - different people take different paths.\n\nI think there are three parts to getting comfortable: **reducing risks** , **motivation** and **resources**. I'll start with risks, then a couple of motivations and then list some resources.\n\n### ways to reduce risk\n\nA lot of people are (very rightfully!) concerned about accidentally doing some destructive action on the command line that they can't undo.\n\nA few strategies people said helped them reduce risks:\n\n  * regular backups (one person mentioned they accidentally deleted their entire home directory last week in a command line mishap, but it was okay because they had a backup)\n  * For code, using git as much as possible\n  * Aliasing `rm` to a tool like [safe-rm](https://launchpad.net/safe-rm) or [rmtrash](https://github.com/PhrozenByte/rmtrash) so that you can't accidentally delete something you shouldn't (or just `rm -i`)\n  * Mostly avoid using wildcards, use tab completion instead. (my shell will tab complete `rm *.txt` and show me exactly what it's going to remove)\n  * Fancy terminal prompts that tell you the current directory, machine you're on, git branch, and whether you're root\n  * Making a copy of files if you're planning to run an untested / dangerous command on them\n  * Having a dedicated test machine (like a cheap old Linux computer or Raspberry Pi) for particularly dangerous testing, like testing backup software or partitioning\n  * Use `--dry-run` options for dangerous commands, if they're available\n  * Build your own `--dry-run` options into your shell scripts\n\n\n\n### a \"killer app\"\n\nA few people mentioned a \"killer command line app\" that motivated them to start spending more time on the command line. For example:\n\n  * [ripgrep](https://github.com/BurntSushi/ripgrep)\n  * jq\n  * wget / curl\n  * git (some folks found they preferred the git CLI to using a GUI)\n  * ffmpeg (for video work)\n  * [yt-dlp](https://github.com/yt-dlp/yt-dlp)\n  * hard drive data recovery tools (from [this great story](https://github.com/summeremacs/public/blob/main/20230629T180135--how-i-came-to-use-emacs-and-other-things__emacs_explanation_linux_origin_raspberrypi_story_terminal.org))\n\n\n\nA couple of people also mentioned getting frustrated with GUI tools (like heavy IDEs that use all your RAM and crash your computer) and being motivated to replace them with much lighter weight command line tools.\n\n### inspiring command line wizardry\n\nOne person mentioned being motivated by seeing cool stuff other people were doing with the command line, like:\n\n  * [Command-line Tools can be 235x Faster than your Hadoop Cluster](https://adamdrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html)\n  * [this \"command-line chainsaw\" talk by Gary Bernhardt](https://www.youtube.com/watch?v=ZQnyApKysg4&feature=youtu.be)\n\n\n\n### explain shell\n\nSeveral people mentioned [explainshell](https://explainshell.com/) where you can paste in any shell incantation and get it to break it down into different parts.\n\n### history, tab completion, etc:\n\nThere were lots of little tips and tricks mentioned that make it a lot easier to work on the command line, like:\n\n  * up arrow to see the previous command\n  * Ctrl+R to search your bash history\n  * navigating inside a line with `Ctrl+w` (to delete a word), `Ctrl+a` (to go to the beginning of the line), `Ctrl+e` (to go to the end), and `Ctrl+left arrow` / `Ctrl+right arrow` (to jump back/forward a word)\n  * setting bash history to unlimited\n  * `cd -` to go back to the previous directory\n  * tab completion of filenames and command names\n  * learning how to use a pager like `less` to read man pages or other large text files (how to search, scroll, etc)\n  * backing up configuration files before editing them\n  * using pbcopy/pbpaste on Mac OS to copy/paste from your clipboard to stdout/stdin\n  * on Mac OS, you can drag a folder from the Finder into the terminal to get its path\n\n\n\n### fzf\n\nLots of mentions of using [fzf](https://github.com/junegunn/fzf) as a better way to fuzzy search shell history. Some other things people mentioned using fzf for:\n\n  * picking git branches (`git checkout $(git for-each-ref --format='%(refname:short)' refs/heads/ | fzf)`)\n  * quickly finding files to edit (`nvim $(fzf)`)\n  * switching kubernetes contexts (`kubectl config use-context $(kubectl config get-contexts -o name | fzf --height=10 --prompt=\"Kubernetes Context> \")`)\n  * picking a specific test to run from a test suite\n\n\n\nThe general pattern here is that you use fzf to pick something (a file, a git branch, a command line argument), fzf prints the thing you picked to stdout, and then you insert that as the command line argument to another command.\n\nYou can also use fzf as an tool to automatically preview the output and quickly iterate, for example:\n\n  * automatically previewing jq output (`echo '' | fzf --preview \"jq {q} < YOURFILE.json\"`)\n  * or for `sed` (`echo '' | fzf --preview \"sed {q} YOURFILE\"`)\n  * or for `awk` (`echo '' | fzf --preview \"awk {q} YOURFILE\"`)\n\n\n\nYou get the idea.\n\nIn general folks will generally define an alias for their `fzf` incantations so you can type `gcb` or something to quickly pick a git branch to check out.\n\n### raspberry pi\n\nSome people started using a Raspberry Pi, where it's safer to experiment without worrying about breaking your computer (you can just erase the SD card and start over!)\n\n### a fancy shell setup\n\nLots of people said they got more comfortable with the command line when they started using a more user-friendly shell setup like [oh-my-zsh](https://ohmyz.sh/) or [fish](https://fishshell.com/). I really agree with this one - I've been using fish for 10 years and I love it.\n\nA couple of other things you can do here:\n\n  * some folks said that making their terminal prettier helped them feel more comfortable (\"make it pink!\").\n  * set up a fancy shell prompt to give you more information (for example you can make the prompt red when a command fails). Specifically [transient prompts](https://www.reddit.com/r/zsh/comments/dsh1g3/new_powerlevel10k_feature_transient_prompt/) (where you set a super fancy prompt for the current command, but a much simpler one for past commands) seem really nice.\n\n\n\nSome tools for theming your terminal:\n\n  * I use [base16-shell](https://github.com/chriskempson/base16-shell)\n  * [powerlevel10k](https://github.com/romkatv/powerlevel10k) is a popular fancy zsh theme which has transient prompts\n  * [starship](https://github.com/starship/starship) is a fancy prompt tool\n  * on a Mac, I think [iTerm2](https://iterm2.com/) is easier to customize than the default terminal\n\n\n\n### a fancy file manager\n\nA few people mentioned fancy terminal file managers like [ranger](https://github.com/ranger/ranger) or [nnn](https://github.com/jarun/nnn), which I hadn't heard of.\n\n### a helpful friend or coworker\n\nSomeone who can answer beginner questions and give you pointers is invaluable.\n\n### shoulder surfing\n\nSeveral mentions of watching someone more experienced using the terminal - there are lots of little things that experienced users don't even realize they're doing which you can pick up.\n\n### aliases\n\nLots of people said that making their own aliases or scripts for commonly used tasks felt like a magical \"a ha!\" moment, because:\n\n  * they don't have to remember the syntax\n  * then they have a list of their most commonly used commands that they can summon easily\n\n\n\n### cheat sheets to get examples\n\nA lot of man pages don't have examples, for example the [openssl s_client](https://linux.die.net/man/1/s_client) man page has no examples. This makes it a lot harder to get started!\n\nPeople mentioned a couple of cheat sheet tools, like:\n\n  * [tldr.sh](https://tldr.sh/)\n  * [cheat](https://github.com/cheat/cheat) (which has the bonus of being editable - you can add your own commands to reference later)\n  * [um](http://ratfactor.com/cards/um) (an incredibly minimal system that you have to build yourself)\n\n\n\nFor example the [cheat page for openssl](https://github.com/cheat/cheatsheets/blob/master/openssl) is really great - I think it includes almost everything I've ever actually used openssl for in practice (except the `-servername` option for `openssl s_client`).\n\nOne person said that they configured their `.bash_profile` to print out a cheat sheet every time they log in.\n\n### don't try to memorize\n\nA couple of people said that they needed to change their approach - instead of trying to memorize all the commands, they realized they could just look up commands as needed and they'd naturally memorize the ones they used the most over time.\n\n(I actually recently had the exact same realization about learning to read x86 assembly - I was taking a class and the instructor said \"yeah, just look everything up every time to start, eventually you'll learn the most common instructions by heart\")\n\nSome people also said the opposite - that they used a spaced repetition app like Anki to memorize commonly used commands.\n\n### vim\n\nOne person mentioned that they started using vim on the command line to edit files, and once they were using a terminal text editor it felt more natural to use the command line for other things too.\n\nAlso apparently there's a new editor called [micro](https://micro-editor.github.io/) which is like a nicer version of pico/nano, for folks who don't want to learn emacs or vim.\n\n### use Linux on the desktop\n\nOne person said that they started using Linux as their main daily driver, and having to fix Linux issues helped them learn. That's also how I got comfortable with the command too back in ~2004 (I was really into installing lots of different Linux distributions to try to find my favourite one), but my guess is that it's not the most popular strategy these days.\n\n### being forced to only use the terminal\n\nSome people said that they took a university class where the professor made them do everything in the terminal, or that they created a rule for themselves that they had to do all their work in the terminal for a while.\n\n### workshops\n\nA couple of people said that workshops like [Software Carpentry](https://software-carpentry.org/) workshops (an introduction to the command line, git, and Python/R programming for scientists) helped them get more comfortable with the command line.\n\nYou can see the [software carpentry curriculum here](https://software-carpentry.org/lessons/).\n\n### books & articles\n\na few that were mentioned:\n\narticles:\n\n  * [The Terminal](https://furbo.org/2014/09/03/the-terminal/)\n  * [command line kung fu](http://blog.commandlinekungfu.com/) (has a mix of Unix and Windows command line tips)\n\n\n\nbooks:\n\n  * [effective linux at the command line](https://www.oreilly.com/library/view/efficient-linux-at/9781098113391/)\n  * unix power tools (which might be outdated)\n  * The Linux Pocket guide\n\n\n\nvideos:\n\n  * [CLI tools aren't inherently user-hostile](https://www.youtube.com/watch?v=IcV9TVb-vF4) by Mindy Preston\n  * Gary Bernhardt's [destroy all software screencasts](https://www.destroyallsoftware.com/screencasts)\n  * [DistroTube](https://www.youtube.com/@DistroTube)\n\n\n",
        "author": "Julia Evans"
    },
    {
        "title": "Some tactics for writing in public",
        "link": "https://jvns.ca/blog/2023/08/07/tactics-for-writing-in-public/",
        "updated": "2023-08-07T05:48:45+00:00",
        "id": "https://jvns.ca/blog/2023/08/07/tactics-for-writing-in-public/",
        "guidislink": false,
        "text": "\n\nSomeone recently asked me - \"how do you deal with writing in public? People on the internet are such assholes!\"\n\nI've often heard the advice \"don't read the comments\", but actually I've learned a huge amount from reading internet comments on my posts from strangers over the years, even if sometimes people are jerks. So I want to explain some tactics I use to try to make the comments on my posts more informative and useful to me, and to try to minimize the number of annoying comments I get.\n\n### talk about facts\n\nOn here I mostly talk about facts - either facts about computers, or stories about my experiences using computers.\n\nFor example [this post](https://jvns.ca/blog/2016/03/16/tcpdump-is-amazing/) about tcpdump contains some basic facts about how to use tcpdump, as well as an example of how I've used it in the past.\n\nTalking about facts means I get a lot of fact-based comments like:\n\n  * people sharing their own similar (or different) experiences (\"I use tcpdump a lot to look at our RTP sequence numbers\")\n  * pointers to other resources (\"the documentation from F5 about tcpdump is great\")\n  * other interesting related facts I didn't mention (\"you can use tcpdump -X too\", \"netsh on windows is great\", \"you can use `sudo tcpdump -s 0 -A 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x47455420'` to filter for HTTP GET requests)\n  * potential problems or gotchas (\"be careful about running tcpdump as root, try just setting the required capabilities instead\")\n  * questions (\"Is there a way to place the BPF filter after IP packet reassembly?\" or \"what's the advantage of tcpdump over wireshark?\")\n  * mistakes I made\n\n\n\nIn general, I'd say that people's comments about facts tend to stay pretty normal. The main kinds of negative comments I get about facts are:\n\n  * occasionally people get a little rude about facts I didn't mention (\"Didn't use -n in any of the examples\u2026please\u2026\"). I think I didn't mention `-n` in that post because at the time I didn't know why the `-n` flag was useful (it's useful because it turns off this annoying reverse DNS lookup that tcpdump does by default so you can see the IP addresses).\n  * people are also sometimes weird about mistakes. I mostly try to head this off by trying to be self-aware about my knowledge level on a topic, and saying \"I'm not sure\u2026\" when I'm not sure about something.\n\n\n\n### stories are great\n\nI think stories encourage pretty good discussion. For example, [why you should understand (a little) about TCP](https://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/) is a story about a time it was important for me to understand how TCP worked.\n\nWhen I share stories about problems I solved, the comments really help me understand how what I learned fits into a bigger context. For example:\n\n  * is this a common problem? people will often comment saying \"this happened to me too!\"\n  * what are other common related problems that come up?\n  * are there other possible solutions I didn't consider?\n\n\n\nAlso I think these kinds of stories are incredibly important - that post describes a bug that was VERY hard for me to solve, and the only reason I was able to figure it out in the first place was that I read [this blog post](https://gocardless.com/blog/in-search-of-performance-how-we-shaved-200ms-off-every-post-request/).\n\n### ask technical questions\n\nOften in my blog posts I ask technical questions that I don't know the answer to (or just mention \"I don't know X\u2026\"). This helps people focus their replies a little bit - an obvious comment to make is to provide an answer to the question, or explain the thing I didn't know!\n\nThis is fun because it feels like a guaranteed way to get value out of people's comments - people LOVE answering questions, and so they get to look smart, and I get the answer to a question I have! Everyone wins!\n\n### fix mistakes\n\nI make a lot of mistakes in my blog posts, because I write about a lot of things that are on the edge of my knowledge. When people point out mistakes, I often edit the blog post to fix it.\n\nUsually I'll stay near a computer for a few hours after I post a blog post so that I can fix mistakes quickly as they come up.\n\nSome people are very careful to list every single error they made in their blog posts (\"errata: the post previously said X which was wrong, I have corrected it to say Y\"). Personally I make mistakes constantly and I don't have time for that so I just edit the post to fix the mistakes.\n\n### ask for examples/experiences, not opinions\n\nA lot of the time when I post a blog post, people on Twitter/Mastodon will reply with various opinions they have about the thing. For example, someone recently replied to a blog post about DNS saying that they love using zone files and dislike web interfaces for managing DNS records. That's not an opinion I share, so I asked them why.\n\nThey explained that there are some DNS record types (specifically `TLSA`) that they find often aren't supported in web interfaces. I didn't know that people used `TLSA` records, so I learned something! Cool!\n\nI've found that asking people to share their **experiences** (\"I wanted to use X DNS record type and I couldn't\") instead of their **opinions** (\"DNS web admin interfaces are bad\") leads to a lot of useful information and discussion. I've learned a lot from it over the years, and written a lot of tweets like \"which DNS record types have you needed?\" to try to extract more information about people's experiences.\n\nI try to model the same behaviour in my own work when I can - if I have an opinion, I'll try to explain the experiences I've had with computers that caused me to have that opinion.\n\n### start with a little context\n\nI think internet strangers are more likely to reply in a weird way when they have no idea who you are or why you're writing this thing. It's easy to make incorrect assumptions! So often I'll mention a little context about why I'm writing this particular blog post.\n\nFor example:\n\n> A little while ago I started using a Mac, and one of my biggest frustrations with it is that often I need to run Linux-specific software.\n\nor\n\n> I\u2019ve started to run a few more servers recently (nginx playground, mess with dns, dns lookup), so I\u2019ve been thinking about monitoring.\n\nor\n\n> Last night, I needed to scan some documents for some bureaucratic reasons. I\u2019d never used a scanner on Linux before and I was worried it would take hours to figure out\u2026\n\n### avoid causing boring conversations\n\nThere are some kinds of programming conversations that I find extremely boring (like \"should people learn vim?\" or \"is functional programming better than imperative programming?\"). So I generally try to avoid writing blog posts that I think will result in a conversation/comment thread that I find annoying or boring.\n\nFor example, I wouldn't write about my opinions about functional programming: I don't really have anything interesting to say about it and I think it would lead to a conversation that I'm not interested in having.\n\nI don't always succeed at this of course (it's impossible to predict what people are going to want to comment about!), but I try to avoid the most obvious flamebait triggers I've seen in the past.\n\nThere are a bunch of \"flamebait\" triggers that can set people off on a conversation that I find boring: cryptocurrency, tailwind, DNSSEC/DoH, etc. So I have a weird catalog in my head of things not to mention if I don't want to start the same discussion about that thing for the 50th time.\n\nOf course, if you think that conversations about functional programming are interesting, you should write about functional programming and start the conversations you want to have!\n\nAlso, it's often possible to start an interesting conversation about a topic where the conversation is normally boring. For example I often see the same talking points about IPv6 vs IPv4 over and over again, but I remember the comments on [Reasons for servers to support IPv6](https://jvns.ca/blog/2022/01/29/reasons-for-servers-to-support-ipv6/) being pretty interesting. In general if I really care about a topic I'll talk about it anyway, but I don't care about functional programming very much so I don't see the point of bringing it up.\n\n### preempt common suggestions\n\nAnother kind of \"boring conversation\" I try to avoid is suggestions of things I have already considered. Like when someone says \"you should do X\" but I already know I could have done X and chose not to because of A B C.\n\nSo I often will add a short note like \"I decided not to do X because of A B C\" or \"you can also do X\" or \"normally I would do X, here I didn't because\u2026\". For example, in [this post about nix](https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/), I list a bunch of Nix features I'm choosing not to use (nix-shell, nix flakes, home manager) to avoid a bunch of helpful people telling me that I should use flakes.\n\nListing the things I'm _not_ doing is also helpful to readers - maybe someone new to nix will discover nix flakes through that post and decide to use them! Or maybe someone will learn that there are exceptions to when a certain \"best practice\" is appropriate.\n\n### set some boundaries\n\nRecently on Mastodon I complained about some gross terminology (\"domain information groper\") that I'd just noticed in the dig man page on my machine. A few dudes in the replies (who by now have all deleted their posts) asked me to prove that the original author _intended_ it to be offensive (which of course is besides the point, there's just no need to have [a term widely understood to be referring to sexual assault](https://dictionary.cambridge.org/dictionary/english/groper) in the dig man page) or tried to explain to me why it actually wasn't a problem.\n\nSo I blocked a few people and wrote a quick post:\n\n> man so many dudes in the replies demanding that i prove that the person who named dig \u201cdomain information groper\u201d intended it in an offensive way. Big day for the block button I guess :)\n\nI don't do this too often, but I think it's very important on social media to occasionally set some rules about what kind of behaviour I won't tolerate. My goal here is usually to drive away some of the assholes (they can unfollow me!) and try to create a more healthy space for everyone else to have a conversation about computers in.\n\nObviously this only works in situations (like Twitter/Mastodon) where I have the ability to garden my following a little bit over time - I can't do this on HN or Reddit or Lobsters or whatever and wouldn't try.\n\nAs for fixing it - the dig maintainers removed the problem language years ago, but Mac OS still has a very outdated version for license reasons.\n\n(you might notice that this section is breaking the \"avoid boring conversations\" rule above, this section was certain to start a very boring argument, but I felt it was important to talk about boundaries so I left it in)\n\n### don't argue\n\nSometimes people seem to want to get into arguments or make dismissive comments. I don\u2019t reply to them, even if they\u2019re [wrong](https://xkcd.com/386/). I dislike arguing on the internet and I\u2019m extremely bad at it, so it\u2019s not a good use of my time.\n\n### analyze negative comments\n\nIf I get a lot of negative comments that I didn't expect, I try to see if I can get something useful out of it.\n\nFor example, I wrote a [toy DNS resolver](https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/) once and some of the commenters were upset that I didn\u2019t handle parsing the DNS packet. At the time I thought this was silly (I thought DNS parsing was really straightforward and that it was obvious how to do it, who cares that I didn't handle it?) but I realized that maybe the commenters didn\u2019t think it was easy or obvious, and wanted to know how to do it. Which makes sense! It\u2019s not obvious at all if you haven't done it before!\n\nThose comments partly inspired [implement DNS in a weekend](https://implement-dns.wizardzines.com/), which focuses much more heavily on the parsing aspects, and which I think is a much better explanation how to write a DNS resolver. So ultimately those comments helped me a lot, even if I found them annoying at the time.\n\n(I realize this section makes me sound like a Perfectly Logical Person who does not get upset by negative public criticism, I promise this is not at all the case and I have 100000 feelings about everything that happens on the internet and get upset all the time. But I find that analyzing the criticism and trying to take away something useful from it helps a bit)\n\n### that's all!\n\nThanks to Shae, Aditya, Brian, and Kamal for reading a draft of this.\n\nSome other similar posts I've written in the past:\n\n  * [some blogging principles](https://jvns.ca/blog/2017/03/20/blogging-principles/)\n  * [some blogging myths](https://jvns.ca/blog/2023/06/05/some-blogging-myths)\n\n\n",
        "author": "Julia Evans"
    },
    {
        "title": "Behind \"Hello World\" on Linux",
        "link": "https://jvns.ca/blog/2023/08/03/behind--hello-world/",
        "updated": "2023-08-04T11:17:25+00:00",
        "id": "https://jvns.ca/blog/2023/08/03/behind--hello-world/",
        "guidislink": false,
        "text": "\n\nToday I was thinking about - what happens when you run a simple \"Hello World\" Python program on Linux, like this one?\n[code] \n    print(\"hello world\")\n    \n[/code]\n\nHere's what it looks like at the command line:\n[code] \n    $ python3 hello.py\n    hello world\n    \n[/code]\n\nBut behind the scenes, there's a lot more going on. I'll describe some of what happens, and (much much more importantly!) explain some tools you can use to see what's going on behind the scenes yourself. We'll use `readelf`, `strace`, `ldd`, `debugfs`, `/proc`, `ltrace`, `dd`, and `stat`. I won't talk about the Python-specific parts at all - just what happens when you run any dynamically linked executable.\n\nHere's a table of contents:\n\n  1. parse \"python3 hello.py\"\n  2. figure out the full path to python3\n  3. stat, under the hood\n  4. time to fork\n  5. the shell calls execve\n  6. get the binary's contents\n  7. find the interpreter\n  8. dynamic linking\n  9. go to _start\n  10. write a string\n\n\n\n### before `execve`\n\nBefore we even start the Python interpreter, there are a lot of things that have to happen. What executable are we even running? Where is it?\n\n#### 1: The shell parses the string `python3 hello.py` into a command to run and a list of arguments: `python3`, and `['hello.py']`\n\nA bunch of things like glob expansion could happen here. For example if you run `python3 *.py`, the shell will expand that into `python3 hello.py`\n\n#### 2: The shell figures out the full path to `python3`\n\nNow we know we need to run `python3`. But what's the full path to that binary? The way this works is that there's a special environment variable named `PATH`.\n\n**See for yourself** : Run `echo $PATH` in your shell. For me it looks like this.\n[code] \n    $ echo $PATH\n    /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n    \n[/code]\n\nWhen you run a command, the shell will search every directory in that list (in order) to try to find a match.\n\nIn `fish` (my shell), you can see the [path resolution logic here](https://github.com/fish-shell/fish-shell/blob/900a0487443f10caa6539634ca8c49fb6e3ce5ba/src/path.cpp#L31-L45). It uses the `stat` system call to check if files exist.\n\n**See for yourself** : Run `strace -e stat`, and then run a command like `python3`. You should see output like this:\n[code] \n    stat(\"/usr/local/sbin/python3\", 0x7ffcdd871f40) = -1 ENOENT (No such file or directory)\n    stat(\"/usr/local/bin/python3\", 0x7ffcdd871f40) = -1 ENOENT (No such file or directory)\n    stat(\"/usr/sbin/python3\", 0x7ffcdd871f40) = -1 ENOENT (No such file or directory)\n    stat(\"/usr/bin/python3\", {st_mode=S_IFREG|0755, st_size=5479736, ...}) = 0\n    \n[/code]\n\nYou can see that it finds the binary at `/usr/bin/python3` and stops: it doesn't continue searching `/sbin` or `/bin`.\n\n(if this doesn't work for you, instead try `strace -o out bash`, and then `grep stat out`. One reader mentioned that their version of libc uses a different system call instead of `stat`)\n\n#### 2.1: A note on `execvp`\n\nIf you want to run the same PATH searching logic as the shell does without reimplementing it yourself, you can use the libc function `execvp` (or one of the other `exec*` functions with `p` in the name).\n\n#### 3: `stat`, under the hood\n\nNow you might be wondering - Julia, what is `stat` doing? Well, when your OS opens a file, it's split into 2 steps.\n\n  1. It maps the **filename** to an **inode** , which contains metadata about the file\n  2. It uses the **inode** to get the file's contents\n\n\n\nThe `stat` system call just returns the contents of the file's inodes - it doesn't read the contents at all. The advantage of this is that it's a lot faster. Let's go on a short adventure into inodes. ([this great post \"A disk is a bunch of bits\" by Dmitry Mazin](https://www.cyberdemon.org/2023/07/19/bunch-of-bits.html) has more details)\n[code] \n    $ stat /usr/bin/python3\n      File: /usr/bin/python3 -> python3.9\n      Size: 9         \tBlocks: 0          IO Block: 4096   symbolic link\n    Device: fe01h/65025d\tInode: 6206        Links: 1\n    Access: (0777/lrwxrwxrwx)  Uid: (    0/    root)   Gid: (    0/    root)\n    Access: 2023-08-03 14:17:28.890364214 +0000\n    Modify: 2021-04-05 12:00:48.000000000 +0000\n    Change: 2021-06-22 04:22:50.936969560 +0000\n     Birth: 2021-06-22 04:22:50.924969237 +0000\n    \n[/code]\n\n**See for yourself** : Let's go see where exactly that inode is on our hard drive.\n\nFirst, we have to find our hard drive's device name\n[code] \n    $ df\n    ...\n    tmpfs             100016      604     99412   1% /run\n    /dev/vda1       25630792 14488736  10062712  60% /\n    ...\n    \n[/code]\n\nLooks like it's `/dev/vda1`. Next, let's find out where the inode for `/usr/bin/python3` is on our hard drive:\n[code] \n    $ sudo debugfs /dev/vda1\n    debugfs 1.46.2 (28-Feb-2021)\n    debugfs:  imap /usr/bin/python3\n    Inode 6206 is part of block group 0\n    \tlocated at block 658, offset 0x0d00\n    \n[/code]\n\nI have no idea how `debugfs` is figuring out the location of the inode for that filename, but we're going to leave that alone.\n\nNow, we need to calculate how many bytes into our hard drive \"block 658, offset 0x0d00\" is on the big array of bytes that is your hard drive. Each block is 4096 bytes, so we need to go `4096 * 658 + 0x0d00` bytes. A calculator tells me that's `2698496`\n[code] \n    $ sudo dd if=/dev/vda1 bs=1 skip=2698496 count=256 2>/dev/null | hexdump -C\n    00000000  ff a1 00 00 09 00 00 00  f8 b6 cb 64 9a 65 d1 60  |...........d.e.`|\n    00000010  f0 fb 6a 60 00 00 00 00  00 00 01 00 00 00 00 00  |..j`............|\n    00000020  00 00 00 00 01 00 00 00  70 79 74 68 6f 6e 33 2e  |........python3.|\n    00000030  39 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |9...............|\n    00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n    *\n    00000060  00 00 00 00 12 4a 95 8c  00 00 00 00 00 00 00 00  |.....J..........|\n    00000070  00 00 00 00 00 00 00 00  00 00 00 00 2d cb 00 00  |............-...|\n    00000080  20 00 bd e7 60 15 64 df  00 00 00 00 d8 84 47 d4  | ...`.d.......G.|\n    00000090  9a 65 d1 60 54 a4 87 dc  00 00 00 00 00 00 00 00  |.e.`T...........|\n    000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n    \n[/code]\n\nNeat! There's our inode! You can see it says `python3` in it, which is a really good sign. We're not going to go through all of this, but the [ext4 inode struct from the Linux kernel](https://github.com/torvalds/linux/blob/fdf0eaf11452d72945af31804e2a1048ee1b574c/fs/ext4/ext4.h#L769) says that the first 16 bits are the \"mode\", or permissions. So let's work that out how `ffa1` corresponds to file permissions.\n\n  * The bytes `ffa1` correspond to the number `0xa1ff`, or 41471 (because x86 is little endian)\n  * 41471 in octal is `0120777`\n  * This is a bit weird - that file's permissions could definitely be `777`, but what are the first 3 digits? I'm not used to seeing those! You can find out what the `012` means in [man inode](https://man7.org/linux/man-pages/man7/inode.7.html) (scroll down to \"The file type and mode\"). There's a little table that says `012` means \"symbolic link\".\n\n\n\nLet's list the file and see if it is in fact a symbolic link with permissions `777`:\n[code] \n    $ ls -l /usr/bin/python3\n    lrwxrwxrwx 1 root root 9 Apr  5  2021 /usr/bin/python3 -> python3.9\n    \n[/code]\n\nIt is! Hooray, we decoded it correctly.\n\n#### 4: Time to fork\n\nWe're still not ready to start `python3`. First, the shell needs to create a new child process to run. The way new processes start on Unix is a little weird - first the process clones itself, and then runs `execve`, which replaces the cloned process with a new process.\n\n* **See for yourself:** Run `strace -e clone bash`, then run `python3`. You should see something like this:\n[code] \n    clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f03788f1a10) = 3708100\n    \n[/code]\n\n`3708100` is the PID of the new process, which is a child of the shell process.\n\nSome more tools to look at what's going on with processes:\n\n  * `pstree` will show you a tree of all the processes on your system\n  * `cat /proc/PID/stat` shows you some information about the process. The contents of that file are documented in `man proc`. For example the 4th field is the parent PID.\n\n\n\n#### 4.1: What the new process inherits.\n\nThe new process (which will become `python3`) has inherited a bunch of from the shell. For example, it's inherited:\n\n  1. **environment variables** : you can look at them with `cat /proc/PID/environ | tr '\\0' '\\n'`\n  2. **file descriptors** for stdout and stderr: look at them with `ls -l /proc/PID/fd`\n  3. a **working directory** (whatever the current directory is)\n  4. **namespaces and cgroups** (if it's in a container)\n  5. the **user** and **group** that's running it\n  6. probably more things I'm not thinking of right now\n\n\n\n#### 5: The shell calls `execve`\n\nNow we're ready to start the Python interpreter!\n\n**See for yourself** : Run `strace -f -e execve bash`, then run `python3`. The `-f` is important because we want to follow any forked child subprocesses. You should see something like this:\n[code] \n    [pid 3708381] execve(\"/usr/bin/python3\", [\"python3\"], 0x560397748300 /* 21 vars */) = 0\n    \n[/code]\n\nThe first argument is the binary, and the second argument is the list of command line arguments. The command line arguments get placed in a special location in the program's memory so that it can access them when it runs.\n\nNow, what's going on inside `execve`?\n\n#### 6: get the binary's contents\n\nThe first thing that has to happen is that we need to open the `python3` binary file and read its contents. So far we've only used the `stat` system call to access its metadata, but now we need its contents.\n\nLet's look at the output of `stat` again:\n[code] \n    $ stat /usr/bin/python3\n      File: /usr/bin/python3 -> python3.9\n      Size: 9         \tBlocks: 0          IO Block: 4096   symbolic link\n    Device: fe01h/65025d\tInode: 6206        Links: 1\n    ...\n    \n[/code]\n\nThis takes up 0 blocks of space on the disk. This is because the contents of the symbolic link (`python3.9`) are actually in the inode itself: you can see them here (from the binary contents of the inode above, it's split across 2 lines in the hexdump output):\n[code] \n    00000020  00 00 00 00 01 00 00 00  70 79 74 68 6f 6e 33 2e  |........python3.|\n    00000030  39 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |9...............|\n    \n[/code]\n\nSo we'll need to open `/usr/bin/python3.9` instead. All of this is happening inside the kernel so you won't see it another system call for that.\n\nEvery file is made up of a bunch of **blocks** on the hard drive. I think each of these blocks on my system is 4096 bytes, so the minimum size of a file is 4096 bytes - even if the file is only 5 bytes, it still takes up 4KB on disk.\n\n**See for yourself** : We can find the block numbers using `debugfs` like this: (again, I got these instructions from [dmitry mazin's \"A disk is a bunch of bits\" post](https://www.cyberdemon.org/2023/07/19/bunch-of-bits.html))\n[code] \n    $ debugfs /dev/vda1\n    debugfs:  blocks /usr/bin/python3.9\n    145408 145409 145410 145411 145412 145413 145414 145415 145416 145417 145418 145419 145420 145421 145422 145423 145424 145425 145426 145427 145428 145429 145430 145431 145432 145433 145434 145435 145436 145437\n    \n[/code]\n\nNow we can use `dd` to read the first block of the file. We'll set the block size to 4096 bytes, skip `145408` blocks, and read 1 block.\n[code] \n    $ dd if=/dev/vda1 bs=4096 skip=145408 count=1 2>/dev/null | hexdump -C | head\n    00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|\n    00000010  02 00 3e 00 01 00 00 00  c0 a5 5e 00 00 00 00 00  |..>.......^.....|\n    00000020  40 00 00 00 00 00 00 00  b8 95 53 00 00 00 00 00  |@.........S.....|\n    00000030  00 00 00 00 40 00 38 00  0b 00 40 00 1e 00 1d 00  |....@.8...@.....|\n    00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|\n    00000050  40 00 40 00 00 00 00 00  40 00 40 00 00 00 00 00  |@.@.....@.@.....|\n    00000060  68 02 00 00 00 00 00 00  68 02 00 00 00 00 00 00  |h.......h.......|\n    00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|\n    00000080  a8 02 00 00 00 00 00 00  a8 02 40 00 00 00 00 00  |..........@.....|\n    00000090  a8 02 40 00 00 00 00 00  1c 00 00 00 00 00 00 00  |..@.............|\n    \n[/code]\n\nYou can see that we get the exact same output as if we read the file with `cat`, like this:\n[code] \n    $ cat /usr/bin/python3.9 | hexdump -C | head\n    00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|\n    00000010  02 00 3e 00 01 00 00 00  c0 a5 5e 00 00 00 00 00  |..>.......^.....|\n    00000020  40 00 00 00 00 00 00 00  b8 95 53 00 00 00 00 00  |@.........S.....|\n    00000030  00 00 00 00 40 00 38 00  0b 00 40 00 1e 00 1d 00  |....@.8...@.....|\n    00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|\n    00000050  40 00 40 00 00 00 00 00  40 00 40 00 00 00 00 00  |@.@.....@.@.....|\n    00000060  68 02 00 00 00 00 00 00  68 02 00 00 00 00 00 00  |h.......h.......|\n    00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|\n    00000080  a8 02 00 00 00 00 00 00  a8 02 40 00 00 00 00 00  |..........@.....|\n    00000090  a8 02 40 00 00 00 00 00  1c 00 00 00 00 00 00 00  |..@.............|\n    \n[/code]\n\n#### an aside on magic numbers\n\nThis file starts with `ELF`, which is a \"magic number\", or a byte sequence that tells us that this is an ELF file. ELF is the binary file format on Linux.\n\nDifferent file formats have different magic numbers, for example the magic number for gzip is `1f8b`. The magic number at the beginning is how `file blah.gz` knows that it's a gzip file.\n\nI think `file` has a variety of heuristics for figuring out the file type of a file, not just magic numbers, but the magic number is an important one.\n\n#### 7: find the interpreter\n\nLet's parse the ELF file to see what's in there.\n\n**See for yourself:** Run `readelf -a /usr/bin/python3.9`. Here's what I get (though I've redacted a LOT of stuff):\n[code] \n    $ readelf -a /usr/bin/python3.9\n    ELF Header:\n        Class:                             ELF64\n        Machine:                           Advanced Micro Devices X86-64\n    ...\n    ->  Entry point address:               0x5ea5c0\n    ...\n    Program Headers:\n      Type           Offset             VirtAddr           PhysAddr\n      INTERP         0x00000000000002a8 0x00000000004002a8 0x00000000004002a8\n                     0x000000000000001c 0x000000000000001c  R      0x1\n    ->      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]\n            ...\n    ->        1238: 00000000005ea5c0    43 FUNC    GLOBAL DEFAULT   13 _start\n    \n[/code]\n\nHere's what I understand of what's going on here:\n\n  1. it's telling the kernel to run `/lib64/ld-linux-x86-64.so.2` to start this program. This is called the **dynamic linker** and we'll talk about it next\n  2. it's specifying an entry point (at `0x5ea5c0`, which is where this program's code starts)\n\n\n\nNow let's talk about the dynamic linker.\n\n#### 8: dynamic linking\n\nOkay! We've read the bytes from disk and we've started this \"interpreter\" thing. What next? Well, if you run `strace -o out.strace python3`, you'll see a bunch of stuff like this right after the `execve` system call:\n[code] \n    execve(\"/usr/bin/python3\", [\"python3\"], 0x560af13472f0 /* 21 vars */) = 0\n    brk(NULL)                       = 0xfcc000\n    access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory)\n    openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\n    fstat(3, {st_mode=S_IFREG|0644, st_size=32091, ...}) = 0\n    mmap(NULL, 32091, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f718a1e3000\n    close(3)                        = 0\n    openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libpthread.so.0\", O_RDONLY|O_CLOEXEC) = 3\n    read(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0 l\\0\\0\\0\\0\\0\\0\"..., 832) = 832\n    fstat(3, {st_mode=S_IFREG|0755, st_size=149520, ...}) = 0\n    mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f718a1e1000\n    ...\n    close(3)                        = 0\n    openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libdl.so.2\", O_RDONLY|O_CLOEXEC) = 3\n    \n[/code]\n\nThis all looks a bit intimidating at first, but the part I want you to pay attention to is `openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libpthread.so.0\"`. This is opening a C threading library called `pthread` that the Python interpreter needs to run.\n\n**See for yourself:** If you want to know which libraries a binary needs to load at runtime, you can use `ldd`. Here's what that looks like for me:\n[code] \n    $ ldd /usr/bin/python3.9\n    \tlinux-vdso.so.1 (0x00007ffc2aad7000)\n    \tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2fd6554000)\n    \tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f2fd654e000)\n    \tlibutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f2fd6549000)\n    \tlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2fd6405000)\n    \tlibexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f2fd63d6000)\n    \tlibz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f2fd63b9000)\n    \tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2fd61e3000)\n    \t/lib64/ld-linux-x86-64.so.2 (0x00007f2fd6580000)\n    \n[/code]\n\nYou can see that the first library listed is `/lib/x86_64-linux-gnu/libpthread.so.0`, which is why it was loaded first.\n\n#### on LD_LIBRARY_PATH\n\nI'm honestly still a little confused about dynamic linking. Some things I know:\n\n  * Dynamic linking happens in userspace and the dynamic linker on my system is at `/lib64/ld-linux-x86-64.so.2`. If you're missing the dynamic linker, you can end up with weird bugs like this [weird \"file not found\" error](https://jvns.ca/blog/2021/11/17/debugging-a-weird--file-not-found--error/)\n  * The dynamic linker uses the `LD_LIBRARY_PATH` environment variable to find libraries\n  * The dynamic linker will also use the `LD_PRELOAD` environment to override any dynamically linked function you want (you can use this for [fun hacks](https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/), or to replace your default memory allocator with an alternative one like jemalloc)\n  * there are some `mprotect`s in the strace output which are marking the library code as read-only, for security reasons\n  * on Mac, it's `DYLD_LIBRARY_PATH` instead of `LD_LIBRARY_PATH`\n\n\n\nYou might be wondering - if dynamic linking happens in userspace, why don't we see a bunch of `stat` system calls where it's searching through `LD_LIBRARY_PATH` for the libraries, the way we did when bash was searching the `PATH`?\n\nThat's because `ld` has a cache in `/etc/ld.so.cache`, and all of those libraries have already been found in the past. You can see it opening the cache in the strace output - `openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3`.\n\nThere are still a bunch of system calls after dynamic linking in the [full strace output](https://gist.github.com/jvns/4254251bea219568df9f43a2efd8d0f5) that I still don't really understand (what's `prlimit64` doing? where does the locale stuff come in? what's `gconv-modules.cache`? what's `rt_sigaction` doing? what's `arch_prctl`? what's `set_tid_address` and `set_robust_list`?). But this feels like a good start.\n\n#### aside: ldd is actually a simple shell script!\n\nSomeone on mastodon [pointed out](https://octodon.social/@lkundrak/110832640058459399) that `ldd` is actually a shell script that just sets the `LD_TRACE_LOADED_OBJECTS=1` environment variable and starts the program. So you can do exactly the same thing like this:\n[code] \n    $ LD_TRACE_LOADED_OBJECTS=1 python3\n    \tlinux-vdso.so.1 (0x00007ffe13b0a000)\n    \tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f01a5a47000)\n    \tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f01a5a41000)\n    \tlibutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f2fd6549000)\n    \tlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2fd6405000)\n    \tlibexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f2fd63d6000)\n    \tlibz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f2fd63b9000)\n    \tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2fd61e3000)\n    \t/lib64/ld-linux-x86-64.so.2 (0x00007f2fd6580000)\n    \n[/code]\n\nApparently `ld` is also a binary you can just run, so `/lib64/ld-linux-x86-64.so.2 --list /usr/bin/python3.9` also does the the same thing.\n\n#### on `init` and `fini`\n\nLet's talk about this line in the `strace` output:\n[code] \n    set_tid_address(0x7f58880dca10)         = 3709103\n    \n[/code]\n\nThis seems to have something to do with threading, and I think this might be happening because the `pthread` library (and every other dynamically loaded) gets to run initialization code when it's loaded. The code that runs when the library is loaded is in the `init` section (or maybe also the `.ctors` section).\n\n**See for yourself:** Let's take a look at that using readelf:\n[code] \n    $ readelf -a /lib/x86_64-linux-gnu/libpthread.so.0\n    ...\n      [10] .rela.plt         RELA             00000000000051f0  000051f0\n           00000000000007f8  0000000000000018  AI       4    26     8\n      [11] .init             PROGBITS         0000000000006000  00006000\n           000000000000000e  0000000000000000  AX       0     0     4\n      [12] .plt              PROGBITS         0000000000006010  00006010\n           0000000000000560  0000000000000010  AX       0     0     16\n    ...\n    \n[/code]\n\nThis library doesn't have a `.ctors` section, just an `.init`. But what's in that `.init` section? We can use `objdump` to disassemble the code:\n[code] \n    $ objdump -d /lib/x86_64-linux-gnu/libpthread.so.0\n    Disassembly of section .init:\n    \n    0000000000006000 <_init>:\n        6000:       48 83 ec 08             sub    $0x8,%rsp\n        6004:       e8 57 08 00 00          callq  6860 <__pthread_initialize_minimal>\n        6009:       48 83 c4 08             add    $0x8,%rsp\n        600d:       c3\n    \n[/code]\n\nSo it's calling `__pthread_initialize_minimal`. I found the [code for that function in glibc](https://github.com/bminor/glibc/blob/a78e5979a92c7985eadad7246740f3874271303f/nptl/nptl-init.c#L100), though I had to find an older version of glibc because it looks like in more recent versions [libpthread is no longer a separate library](https://developers.redhat.com/articles/2021/12/17/why-glibc-234-removed-libpthread).\n\nI'm not sure whether this `set_tid_address` system call actually comes from `__pthread_initialize_minimal`, but at least we've learned that libraries can run code on startup through the `.init` section.\n\nHere's a note from `man elf` on the `.init` section:\n[code] \n    $ man elf\n     .init  This section holds executable instructions that contribute to the process initialization code.  When a program starts to run\n                  the system arranges to execute the code in this section before calling the main program entry point.\n    \n[/code]\n\nThere's also a `.fini` section in the ELF file that runs at the end, and `.ctors` / `.dtors` (constructors and destructors) are other sections that could exist.\n\nOkay, that's enough about dynamic linking.\n\n#### 9: go to `_start`\n\nAfter dynamic linking is done, we go to `_start` in the Python interpreter. Then it does all the normal Python interpreter things you'd expect.\n\nI'm not going to talk about this because here I'm interested in general facts about how binaries are run on Linux, not the Python interpreter specifically.\n\n#### 10: write a string\n\nWe still need to print out \"hello world\" though. Under the hood, the Python `print` function calls some function from libc. But which one? Let's find out!\n\n**See for yourself** : Run `ltrace -o out python3 hello.py`.\n[code] \n    $ ltrace -o out python3 hello.py\n    $ grep hello out\n    write(1, \"hello world\\n\", 12) = 12\n    \n[/code]\n\nSo it looks like it's calling `write`\n\nI honestly am always a little suspicious of ltrace - unlike strace (which I would trust with my life), I'm never totally sure that ltrace is actually reporting library calls accurately. But in this case it seems to be working. And if we look at the [cpython source code](https://github.com/python/cpython/blob/400835ea1626c8c6dcd967c7eabe0dad4a923182/Python/fileutils.c#L1955), it does seem to be calling `write()` in some places. So I'm willing to believe that.\n\n#### what's libc?\n\nWe just said that Python calls the `write` function from libc. What's libc? It's the C standard library, and it's responsible for a lot of basic things like:\n\n  * allocating memory with `malloc`\n  * file I/O (opening/closing/\n  * executing programs (with `execvp`, like we mentioned before)\n  * looking up DNS records with `getaddrinfo`\n  * managing threads with `pthread`\n\n\n\nPrograms don't _have_ to use libc (on Linux, Go famously doesn't use it and calls Linux system calls directly instead), but most other programming languages I use (node, Python, Ruby, Rust) all use libc. I'm not sure about Java.\n\nYou can find out if you're using libc by running `ldd` on your binary: if you see something like `libc.so.6`, that's libc.\n\n#### why does libc matter?\n\nYou might be wondering - why does it matter that Python calls the libc `write` and then libc calls the `write` system call? Why am I making a point of saying that `libc` is in the middle?\n\nI think in this case it doesn't really matter (AFAIK the `write` libc function maps pretty directly to the `write` system call)\n\nBut there are different libc implementations, and sometimes they behave differently. The two main ones are glibc (GNU libc) and musl libc.\n\nFor example, until recently [musl's `getaddrinfo` didn't support TCP DNS](https://www.openwall.com/lists/musl/2023/05/02/1), [here's a blog post talking about a bug that that caused](https://christoph.luppri.ch/fixing-dns-resolution-for-ruby-on-alpine-linux).\n\n#### a little detour into stdout and terminals\n\nIn this program, stdout (the `1` file descriptor) is a terminal. And you can do funny things with terminals! Here's one:\n\n  1. In a terminal, run `ls -l /proc/self/fd/1`. I get `/dev/pts/2`\n  2. In another terminal window, write `echo hello > /dev/pts/2`\n  3. Go back to the original terminal window. You should see `hello` printed there!\n\n\n\n#### that's all for now!\n\nHopefully you have a better idea of how `hello world` gets printed! I'm going to stop adding more details for now because this is already pretty long, but obviously there's more to say and I might add more if folks chip in with extra details. I'd especially love suggestions for other tools you could use to inspect parts of the process that I haven't explained here.\n\nThanks to everyone who suggested corrections / additions - I've edited this blog post a lot to incorporate more things :)\n\nSome things I'd like to add if I can figure out how to spy on them:\n\n  * the kernel loader and ASLR (I haven't figured out yet how to use bpftrace + kprobes to trace the kernel loader's actions)\n  * TTYs (I haven't figured out how to trace the way `write(1, \"hello world\", 11)` gets sent to the TTY that I'm looking at)\n\n\n\n### I'd love to see a Mac version of this\n\nOne of my frustrations with Mac OS is that I don't know how to introspect my system on this level - when I print `hello world`, I can't figure out how to spy on what's going on behind the scenes the way I can on Linux. I'd love to see a really in depth explainer.\n\nSome Mac equivalents I know about:\n\n  * `ldd` -> `otool -L`\n  * `readelf` -> `otool`\n  * supposedly you can use `dtruss` or `dtrace` on mac instead of strace but I've never been brave enough to turn off system integrity protection to get it to work\n  * `strace` -> `sc_usage` seems to be able to collect stats about syscall usage, and `fs_usage` about file usage\n\n\n\n### more reading\n\nSome more links:\n\n  * [A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux](https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html)\n  * [an exploration of \"hello world\" on FreeBSD](https://people.freebsd.org/~brooks/talks/asiabsdcon2017-helloworld/helloworld.pdf)\n  * [hello world under the microscope](https://gynvael.coldwind.pl/?lang=en&id=754) for Windows\n  * From LWN: [how programs get run](https://lwn.net/Articles/630727/) ([and part two](https://lwn.net/Articles/631631/)) have a bunch more details on the internals of `execve`\n  * [Putting the \u201cYou\u201d in CPU](https://cpu.land/how-to-run-a-program) by Lexi Mattick\n  * [\"Hello, world\" from scratch on a 6502 (video from Ben Eater)](https://www.youtube.com/watch?v=LnzuMJLZRdU)\n\n\n",
        "author": "Julia Evans"
    },
    {
        "title": "Why is DNS still hard to learn?",
        "link": "https://jvns.ca/blog/2023/07/28/why-is-dns-still-hard-to-learn/",
        "updated": "2023-07-28T09:40:04+00:00",
        "id": "https://jvns.ca/blog/2023/07/28/why-is-dns-still-hard-to-learn/",
        "guidislink": false,
        "text": "\n\nI write a lot about technologies that I found hard to learn about. A while back my friend Sumana asked me an interesting question - why are these things so hard to learn about? Why do they seem so mysterious?\n\nFor example, take DNS. We've been using DNS since the [80s](https://www.ietf.org/rfc/rfc1034.txt) (for more than 35 years!). It's used in every website on the internet. And it's pretty stable - in a lot of ways, it works the exact same way it did 30 years ago.\n\nBut it took me YEARS to figure out how to confidently debug DNS issues, and I've seen a lot of other programmers struggle with debugging DNS problems as well. So what's going on?\n\nHere are a couple of thoughts about why learning to troubleshoot DNS problems is hard.\n\n(I'm not going to explain DNS very much in this post, see [Implement DNS in a Weekend](https://implement-dns.wizardzines.com/) or [my DNS blog posts](https://jvns.ca/categories/dns/) for more about how DNS works)\n\n### it's not because DNS is super hard\n\nWhen I finally learned how to troubleshoot DNS problems, my reaction was \"what, that was it???? that's not that hard!\". I felt a little bit cheated! I could explain to you everything that I found confusing about DNS in [a few hours](https://wizardzines.com/zines/dns).\n\nSo - if DNS is not all that complicated, why did it take me so many years to figure out how to troubleshoot pretty basic DNS issues (like \"my domain doesn't resolve even though I've set it up correctly\" or \"`dig` and my browser have different DNS results, why?\")?\n\nAnd I wasn't alone in finding DNS hard to learn! I've talked to a lot of smart friends who are very experienced programmers about DNS of the years, and many of them either:\n\n  * didn't feel comfortable making simple DNS changes to their websites\n  * or were confused about basic facts about how DNS works (like that records are [pulled and not pushed](https://jvns.ca/blog/2021/12/06/dns-doesn-t-propagate/))\n  * or did understand DNS basics pretty well, but had the some of the same knowledge gaps that I'd struggled with (negative caching and the details of how `dig` and your browser do DNS queries differently)\n\n\n\nSo if we're all struggling with the same things about DNS, what's going on? Why is it so hard to learn for so many people?\n\nHere are some ideas.\n\n### a lot of the system is hidden\n\nWhen you make a DNS request on your computer, the basic story is:\n\n  1. your computer makes a request to a server called **resolver**\n  2. the resolver checks its cache, and makes requests to some other servers called **authoritative nameservers**\n\n\n\nHere are some things you don't see:\n\n  * the resolver's **cache**. What's in there?\n  * which **library code** on your computer is making the DNS request (is it libc `getaddrinfo`? if so, is it the getaddrinfo from glibc, or musl, or apple? is it your browser's DNS code? is it a different custom DNS implementation?). All of these options behave slightly differently and have different configuration, approaches to caching, available features, etc. For example musl DNS didn't support TCP until [early 2023](https://www.theregister.com/2023/05/16/alpine_linux_318/).\n  * the **conversation** between the resolver and the authoritative nameservers. I think a lot of DNS issues would be SO simple to understand if you could magically get a trace of exactly which authoritative nameservers were queried downstream during your request, and what they said. (like, what if you could run `dig +debug google.com` and it gave you a bunch of extra debugging information?)\n\n\n\n### dealing with hidden systems\n\nA couple of ideas for how to deal with hidden systems\n\n  * just teaching people what the hidden systems are makes a huge difference. For a long time I had no idea that my computer had many different DNS libraries that were used in different situations and I was confused about this for literally years. This is a big part of my approach.\n  * with [Mess With DNS](https://messwithdns.net/) we tried out this \"fishbowl\" approach where it shows you some parts of the system (the conversation with the resolver and the authoritative nameserver) that are normally hidden\n  * I feel like it would be extremely cool to extend DNS to include a \"debugging information\" section. (edit: it looks like this already exists! It's called [Extended DNS Errors](https://blog.nlnetlabs.nl/extended-dns-error-support-for-unbound/), or EDE, and tools are slowly adding support for it.\n\n\n\n### Extended DNS Errors seem cool\n\nExtended DNS Errors are a new way for DNS servers to provide extra debuggging information in DNS responss. Here's an example of what that looks like:\n[code] \n    $ dig @8.8.8.8 xjwudh.com\n    ;; Got answer:\n    ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 39830\n    ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1\n    \n    ;; OPT PSEUDOSECTION:\n    ; EDNS: version: 0, flags:; udp: 512\n    ; EDE: 12 (NSEC Missing): (Invalid denial of existence of xjwudh.com/a)\n    ;; QUESTION SECTION:\n    ;xjwudh.com.\t\t\tIN\tA\n    \n    ;; AUTHORITY SECTION:\n    com.\t\t\t900\tIN\tSOA\ta.gtld-servers.net. nstld.verisign-grs.com. 1690634120 1800 900 604800 86400\n    \n    ;; Query time: 92 msec\n    ;; SERVER: 8.8.8.8#53(8.8.8.8) (UDP)\n    ;; WHEN: Sat Jul 29 08:35:45 EDT 2023\n    ;; MSG SIZE  rcvd: 161\n    \n[/code]\n\nHere I've requested a nonexistent domain, and I got the extended error `EDE: 12 (NSEC Missing): (Invalid denial of existence of xjwudh.com/a)`. I'm not sure what that means (it's some DNSSEC Thing), but it's cool to see an extra debug message like that.\n\nI did have to install a newer version of `dig` to get the above to work.\n\n### confusing tools\n\nEven though a lot of DNS stuff is hidden, there are a lot of ways to figure out what's going on by using `dig`.\n\nFor example, you can use `dig +norecurse` to figure out if a given DNS resolver has a particular record in its cache. `8.8.8.8` seems to return a `SERVFAIL` response if the response isn't cached.\n\nhere's what that looks like for `google.com`\n[code] \n    $ dig +norecurse  @8.8.8.8 google.com\n    ;; Got answer:\n    ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 11653\n    ;; flags: qr ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n    \n    ;; OPT PSEUDOSECTION:\n    ; EDNS: version: 0, flags:; udp: 512\n    ;; QUESTION SECTION:\n    ;google.com.\t\t\tIN\tA\n    \n    ;; ANSWER SECTION:\n    google.com.\t\t21\tIN\tA\t172.217.4.206\n    \n    ;; Query time: 57 msec\n    ;; SERVER: 8.8.8.8#53(8.8.8.8)\n    ;; WHEN: Fri Jul 28 10:50:45 EDT 2023\n    ;; MSG SIZE  rcvd: 55\n    \n[/code]\n\nand for `homestarrunner.com`:\n[code] \n    $ dig +norecurse  @8.8.8.8 homestarrunner.com\n    ;; Got answer:\n    ;; ->>HEADER<<- opcode: QUERY, status: SERVFAIL, id: 55777\n    ;; flags: qr ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1\n    \n    ;; OPT PSEUDOSECTION:\n    ; EDNS: version: 0, flags:; udp: 512\n    ;; QUESTION SECTION:\n    ;homestarrunner.com.\t\tIN\tA\n    \n    ;; Query time: 52 msec\n    ;; SERVER: 8.8.8.8#53(8.8.8.8)\n    ;; WHEN: Fri Jul 28 10:51:01 EDT 2023\n    ;; MSG SIZE  rcvd: 47\n    \n[/code]\n\nHere you can see we got a normal `NOERROR` response for `google.com` (which is in `8.8.8.8`'s cache) but a `SERVFAIL` for `homestarrunner.com` (which isn't). This doesn't mean there's no DNS record `homestarrunner.com` (there is!), it's just not cached).\n\nBut this output is really confusing to read if you're not used to it! Here are a few things that I think are weird about it:\n\n  1. the headings are weird (there's `->>HEADER<<-`, `flags:`, `OPT PSEUDOSECTION:`, `QUESTION SECTION:`, `ANSWER SECTION:`)\n  2. the spacing is weird (why is the no newline between `OPT PSEUDOSECTION` and `QUESTION SECTION`?)\n  3. `MSG SIZE rcvd: 47` is weird (are there other fields in `MSG SIZE` other than `rcvd`? what are they?)\n  4. it says that there's 1 record in the ADDITIONAL section but doesn't show it, you have to somehow magically know that the \"OPT PSEUDOSECTION\" record is actually in the additional section\n\n\n\nIn general `dig`'s output has the feeling of a script someone wrote in an adhoc way that grew organically over time and not something that was intentionally designed.\n\n### dealing with confusing tools\n\nsome ideas for improving on confusing tools:\n\n  * **explain the output**. For example I wrote [how to use dig](https://jvns.ca/blog/2021/12/04/how-to-use-dig/) explaining how `dig`'s output works and how to configure it to give you a shorter output by default\n  * **make new, more friendly tools**. For example for DNS there's [dog](https://github.com/ogham/dog) and [doggo](https://github.com/mr-karan/doggo) and [my dns lookup tool](https://dns-lookup.jvns.ca/). I think these are really cool but personally I don't use them because sometimes I want to do something a little more advanced (like using `+norecurse`) and as far as I can tell neither `dog` nor `doggo` support `+norecurse`. I'd rather use 1 tool for everything, so I stick to `dig`. Replacing the breadth of functionality of `dig` is a huge undertaking.\n  * **make dig 's output a little more friendly**. If I were better at C programming, I might try to write a `dig` pull request that adds a `+human` flag to dig that formats the long form output in a more structured and readable way, maybe something like this:\n\n\n[code] \n    $ dig +human +norecurse  @8.8.8.8 google.com \n    HEADER:\n      opcode: QUERY\n      status: NOERROR\n      id: 11653\n      flags: qr ra\n      records: QUESTION: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n    \n    QUESTION SECTION:\n      google.com.\t\t\tIN\tA\n    \n    ANSWER SECTION:\n      google.com.\t\t21\tIN\tA\t172.217.4.206\n      \n    ADDITIONAL SECTION:\n      EDNS: version: 0, flags:; udp: 512\n    \n    EXTRA INFO:\n      Time: Fri Jul 28 10:51:01 EDT 2023\n      Elapsed: 52 msec\n      Server: 8.8.8.8:53\n      Protocol: UDP\n      Response size: 47 bytes\n    \n[/code]\n\nThis makes the structure of the DNS response more clear - there's the header, the question, the answer, and the additional section.\n\nAnd it's not \"dumbed down\" or anything! It's the exact same information, just formatted in a more structured way. My biggest frustration with alternative DNS tools that they often remove information in the name of clarity. And though there's definitely a place for those tools, I want to see all the information! I just want it to be presented clearly.\n\nWe've learned a lot about how to design more user friendly command line tools in the last 40 years and I think it would be cool to apply some of that knowledge to some of our older crustier tools.\n\n### dig +yaml\n\nOne quick note on dig: newer versions of dig do have a `+yaml` output format which feels a little clearer to me, though it's too verbose for my taste (a pretty simple DNS response doesn't fit on my screen)\n\n### weird gotchas\n\nDNS has some weird stuff that's relatively common to run into, but pretty hard to learn about if nobody tells you what's going on. A few examples (there are more in [some ways DNS can break](https://jvns.ca/blog/2022/01/15/some-ways-dns-can-break/):\n\n  * negative caching! (which I talk about in [this talk](https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/)) It took me probably 5 years to realize that I shouldn't visit a domain that doesn't have a DNS record yet, because then the **nonexistance** of that record will be cached, and it gets cached for HOURS, and it's really annoying.\n  * differences in `getaddrinfo` implementations: until [early 2023](https://www.theregister.com/2023/05/16/alpine_linux_318/), `musl` didn't support TCP DNS\n  * resolvers that ignore TTLs: if you set a TTL on your DNS records (like \"5 minutes\"), some resolvers will ignore those TTLs completely and cache the records for longer, like maybe 24 hours instead\n  * if you configure nginx wrong ([like this](https://jvns.ca/blog/2022/01/15/some-ways-dns-can-break/#problem-nginx-caching-dns-records-forever)), it'll cache DNS records forever.\n  * how [ndots](https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html) can make your Kubernetes DNS slow\n\n\n\n### dealing with weird gotchas\n\nI don't have as good answers here as I would like to, but knowledge about weird gotchas is extremely hard won (again, it took me years to figure out negative caching!) and it feels very silly to me that people have to rediscover them for themselves over and over and over again.\n\nA few ideas:\n\n  * It's incredibly helpful when people call out gotchas when explaining a topic. For example (leaving DNS for a moment), Josh Comeau's Flexbox intro explains this [minimum size gotcha](https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#the-minimum-size-gotcha-11) which I ran into SO MANY times for several years before finally finding an explanation of what was going on.\n  * I'd love to see more community collections of common gotchas. For bash, [shellcheck](https://www.shellcheck.net/) is an incredible collection of bash gotchas.\n\n\n\nOne tricky thing about documenting DNS gotchas is that different people are going to run into different gotchas - if you're just configuring DNS for your personal domain once every 3 years, you're probably going to run into different gotchas than someone who administrates DNS for a domain with heavy traffic.\n\nA couple of more quick reasons:\n\n### infrequent exposure\n\nA lot of people only deal with DNS extremely infrequently. And of course if you only touch DNS every 3 years it's going to be harder to learn!\n\nI think cheat sheets (like \"here are the steps to changing your nameservers\") can really help with this.\n\n### it's hard to experiment with\n\nDNS can be scary to experiment with - you don't want to mess up your domain. We built [Mess With DNS](https://messwithdns.net/) to make this one a little easier.\n\n### that's all for now\n\nI'd love to hear other thoughts about what makes DNS (or your favourite mysterious technology) hard to learn.\n",
        "author": "Julia Evans"
    },
    {
        "title": "Lima: a nice way to run Linux VMs on Mac",
        "link": "https://jvns.ca/blog/2023/07/10/lima--a-nice-way-to-run-linux-vms-on-mac/",
        "updated": "2023-07-10T09:23:08+00:00",
        "id": "https://jvns.ca/blog/2023/07/10/lima--a-nice-way-to-run-linux-vms-on-mac/",
        "guidislink": false,
        "text": "\n\nHello! Here's a new entry in the \"cool software julia likes\" section.\n\nA little while ago I started using a Mac, and one of my biggest frustrations with it is that often I need to run Linux-specific software. For example, the [nginx playground](https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/) I posted about the other day only works on Linux because it uses Linux namespaces (via `bubblewrap`) to sandbox nginx. And I'm working on another playground right now that uses bubblewrap too.\n\nThis post is very short, it's just to say that Lima seems nice and much simpler to get started with than Vagrant.\n\n### enter Lima!\n\nI was complaining about this to a friend, and they mentioned [Lima](https://lima-vm.io/), which stands for **Li** nux on **Ma** c. I'd heard of [colima](https://github.com/abiosoft/colima) (another way to run Linux containers on Mac), but I hadn't realized that Lima also just lets you run VMs.\n\nIt was surprisingly simple to set up. I just had to:\n\n  1. Install Lima (I did `nix-env -iA nixpkgs.lima` but you can also install it with `brew install lima`)\n  2. Run `limactl start default` to start the VM\n  3. Run `lima` to get a shell\n\n\n\nThat's it! By default it mounts your home directory as read-only inside the VM\n\nThere's a config file in `~/.lima/default/lima.yaml`, but I haven't needed to change it yet.\n\n### some nice things about Lima\n\nSome things I appreciate about Lima (as opposed to Vagrant which I've used in the past and found kind of frustrating) are:\n\n  1. it provides a default config\n  2. it automatically downloads a Ubuntu 22.04 image to use in the VM (which is what I would have probably picked anyway)\n  3. it mounts my entire home directory inside the VM, which I really like as a default choice (it feels very seamless)\n\n\n\nI think the paradigm of \"I have a single chaotic global Linux VM which I use for all my projects\" might work better for me than super carefully configured per-project VMs. Though I'm sure that you can have carefully configured per-project VMs with Lima too if you want, I'm just only using the `default` VM.\n\n### problem 1: I don't know how to mount directories read-write\n\nI wanted to have my entire home directory mounted read-only, but have some subdirectories (like `~/work/nginx-playground`) mounted read-write. I did some research and here's what I found:\n\n  * a comment on [this github issue](https://github.com/lima-vm/lima/issues/873) says that you can use [mountType: \"virtiofs\" and vmType: \"vz\"](https://github.com/lima-vm/lima/blob/master/docs/vmtype.md#vz) to mount subdirectories of your home directory read-write\n  * the Lima version packaged in nix 23.05 doesn't seem to support `vmType: vz` (though I could be wrong about this)\n\n\n\nMaybe I'll figure out how to mount directories read-write later, I'm not too bothered by working around it for now.\n\n### problem 2: networking\n\nI'm trying to set up some weird networking stuff ([this tun/tap setup](https://jvns.ca/blog/2022/09/06/send-network-packets-python-tun-tap/)) in Lima and while it appeared to work at first, actually the `tun` network device seems to be unreliable in a weird way for reasons I don't understand.\n\nAnother weird Lima networking thing: here's what gets printed out when I ping a machine:\n[code] \n    $ ping 8.8.8.8\n    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n    ping: Warning: time of day goes back (-7148662230695168869us), taking countermeasures\n    ping: Warning: time of day goes back (-7148662230695168680us), taking countermeasures\n    64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms\n    wrong data byte #16 should be 0x10 but was 0x0\n    #16\t0 6 0 1 6c 55 ad 64 0 0 0 0 72 95 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b\n    #48\t1c 1d 1e 1f 20 21 22 23\n    ping: Warning: time of day goes back (-6518721232815721329us), taking countermeasures\n    64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)\n    wrong data byte #16 should be 0x10 but was 0x0\n    #16\t0 6 0 2 6d 55 ad 64 0 0 0 0 2f 9d 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b\n    #48\t1c 1d 1e 1f 20 21 22 23\n    ping: Warning: time of day goes back (-4844789546316441458us), taking countermeasures\n    64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)\n    wrong data byte #16 should be 0x10 but was 0x0\n    #16\t0 6 0 3 6e 55 ad 64 0 0 0 0 69 b3 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b\n    #48\t1c 1d 1e 1f 20 21 22 23\n    ping: Warning: time of day goes back (-3834857329877608539us), taking countermeasures\n    64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)\n    wrong data byte #16 should be 0x10 but was 0x0\n    #16\t0 6 0 4 6f 55 ad 64 0 0 0 0 6c c0 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b\n    #48\t1c 1d 1e 1f 20 21 22 23\n    ping: Warning: time of day goes back (-2395394298978302982us), taking countermeasures\n    64 bytes from 8.8.8.8: icmp_seq=0 ttl=255 time=0.000 ms (DUP!)\n    wrong data byte #16 should be 0x10 but was 0x0\n    #16\t0 6 0 5 70 55 ad 64 0 0 0 0 65 d3 9 0 0 0 0 0 10 11 12 13 14 15 16 17 18 19 1a 1b\n    #48\t1c 1d 1e 1f 20 21 22 23\n    \n[/code]\n\nThis seems to be a [known issue with ICMP](https://github.com/lima-vm/lima/issues/193).\n\n### why not use containers?\n\nI wanted a VM and not a Linux container because:\n\n  1. the playground runs on a VM in production, not in a container, and generally it's easier to develop in a similar environment to production\n  2. all of my playgrounds use Linux namespaces, and I don't know how to create a namespace inside a container. Probably you can but I don't feel like figuring it out and it seems like an unnecessary distraction.\n  3. on Mac you need to run containers inside a Linux VM anyway, so I'd rather use a VM directly and not introduce another unnecessary layer\n\n\n\n### OrbStack seems nice too\n\nAfter I wrote this, a bunch of people commented to say that [OrbStack](https://orbstack.dev/) is great. I was struggling with the networking in Lima (like I mentioned above) so I tried out OrbStack and the network does seem to be better.\n\n`ping` acts normally, unlike in Lima:\n[code] \n    $ ping 8.8.8.8\n    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n    64 bytes from 8.8.8.8: icmp_seq=1 ttl=113 time=19.8 ms\n    64 bytes from 8.8.8.8: icmp_seq=2 ttl=113 time=15.9 ms\n    64 bytes from 8.8.8.8: icmp_seq=3 ttl=113 time=23.1 ms\n    64 bytes from 8.8.8.8: icmp_seq=4 ttl=113 time=22.7 ms\n    \n[/code]\n\nThe setup steps for OrbStack are:\n\n  1. Download OrbStack from the website\n  2. In the GUI, create a VM\n  3. Run `orb`\n  4. That's it\n\n\n\nSo it seems equally simple to set up.\n\n### that's all!\n\nSome other notes:\n\n  * It looks like Lima works on Linux too\n  * a bunch of people on Mastodon also said [colima](https://github.com/abiosoft/colima) (built on top of Lima) is a nice Docker alternative on Mac for running Linux containers\n\n\n",
        "author": "Julia Evans"
    },
    {
        "title": "Open sourcing the nginx playground",
        "link": "https://jvns.ca/blog/2023/07/08/open-sourcing-the-nginx-playground/",
        "updated": "2023-07-08T09:52:27+00:00",
        "id": "https://jvns.ca/blog/2023/07/08/open-sourcing-the-nginx-playground/",
        "guidislink": false,
        "text": "\n\nHello! In 2021 I released a small playground for testing nginx configurations called [nginx playground](https://nginx-playground.wizardzines.com/). There's a [blog post about it here](https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/).\n\nThis is an extremely short post to say that at the time I didn't make it open source, but I am making it open source now. It's not a lot of code but maybe it'll be interesting to someone, and maybe someone will even build on it to make more playgrounds! I'd love to see an HAProxy playground or something in a similar vein.\n\nHere's [the github repo](https://github.com/jvns/nginx-playground/). The frontend is in `static/` and the backend is in `api/`. The README is mostly an extended apology for the developer experience and note that the project is unmaintained. But I did test that the build instructions work!\n\n### why didn't I open source this before?\n\nI'm not very good at open source. Some of the problems I have with open sourcing things are:\n\n  * I dislike (and am very bad at) maintaining open source projects - I usually ignore basically all feature requests and most bug reports and then feel bad about it. I handed off maintainership to both of the open source projects that I started ([rbspy](https://github.com/rbspy/rbspy) and [rust-bcc](https://github.com/rust-bpf/rust-bcc)) to other people who are doing a MUCH better job than I ever did.\n  * Sometimes the developer experience for the project is pretty bad\n  * Sometimes there's configuration in the project (like the `fly.toml` or the analytics I have set up) which don't really make sense for other people to copy\n\n\n\n### new approach: don't pretend I'm going to improve it\n\nIn the past I've had some kind of belief that I'm going to improve the problems with my code later. But I haven't touched this project in more than a year and I think it's unlikely I'm going to go back to it unless it breaks in some dramatic way.\n\nSo instead of pretending I'm going to improve things, I decided to just:\n\n  * tell people in the README that the project is unmaintained\n  * write down all the security caveats I know about\n  * test the build instructions I wrote to make sure that they work (on a fresh machine, even!)\n  * explain (but do not fix!!) some of the messy parts of the project\n\n\n\n### that's all!\n\nMaybe I will open source more of my tiny projects in the future, we'll see! Thanks to [Sumana Harihareswara](https://www.changeset.nyc/) for helping me think through this.\n",
        "author": "Julia Evans"
    },
    {
        "title": "New zine: How Integers and Floats Work",
        "link": "https://jvns.ca/blog/2023/06/23/new-zine--how-integers-and-floats-work/",
        "updated": "2023-06-23T09:27:16+00:00",
        "id": "https://jvns.ca/blog/2023/06/23/new-zine--how-integers-and-floats-work/",
        "guidislink": false,
        "text": "\n\nHello! On Wednesday, we released a new zine: **How Integers and Floats Work**!\n\nYou can get it for $12 here: <https://wizardzines.com/zines/integers-floats>, or get an [13-pack of all my zines here](https://wizardzines.com/zines/all-the-zines/).\n\nHere's the cover:\n\n[](https://wizardzines.com/zines/integers-floats)\n\n### the table of contents\n\nHere's the table of contents!\n\n[ ](https://wizardzines.com/zines/integers-floats/toc.png)\n\nNow let's talk about some of the motivations for writing this zine!\n\n### motivation 1: demystify binary\n\nI wrote this zine because I used to find binary data really impenetrable. There are all these 0s and 1s! What does it mean?\n\nBut if you look at any binary file format, most of it is integers! For example, if you look at the DNS parsing in [Implement DNS in a Weekend](https://implement-dns.wizardzines.com/), it's all about encoding and decoding a bunch of integers (plus some ASCII strings, which arguably are also arrays of integers).\n\nSo I think that learning how integers work in depth is a really nice way to get started with understanding binary file formats. The zine also talks about some other tricks for encoding binary data into integers with binary operations and bit flags.\n\n### motivation 2: explain floating point\n\nThe second motivation was to explain floating point. Floating point is pretty weird! (see [examples of floating point problems]() for a very long list)\n\nAnd almost all explanations of floating point I've read have been really math and notation heavy in a way that I find pretty unpleasant and confusing, even though I love math more than most people (I did a pure math degree) and am pretty good at it.\n\nWe spent weeks working on a clearer explanation of floating point with minimal math jargon and lots of pictures and I think we got there. Here's one example page, on the floating point number line:\n\n### it comes with a playground: memory spy!\n\nOne of my favourite ways to learn about how my computer represents things in memory has been to use a debugger to look at the memory of a real program.\n\nBut C debuggers like gdb are pretty hard to use at first! So [Marie](https://marieflanagan.com/) and I made a playground called [Memory Spy](https://memory-spy.wizardzines.com/). It runs a C debugger behind the scenes, but it provides a much simpler interface - there are a bunch of very simple example C programs, and you can just click on each line to view how the variable on that line is represented in memory.\n\nHere's a screenshot:\n\nMemory Spy is inspired by Philip Guo's great [Python Tutor](https://pythontutor.com/).\n\n### float.exposed is great\n\nWhen doing demos and research for this zine, I found myself reaching for [float.exposed](https://float.exposed/) a lot to show how numbers are encoded in floating point. It's by [Bartosz Ciechanowski](https://ciechanow.ski/), who has tons of other great visualizations on his site.\n\nI loved it so much that I made a clone called [integer.exposed](https://integer.exposed) for integers (with permission), so that people could look at integers in a similar way.\n\n### some blog posts I wrote along the way\n\nHere are a few blog posts I wrote while thinking about how to write this zine:\n\n  * [examples of floating point problems](https://jvns.ca/blog/2023/01/13/examples-of-floating-point-problems/)\n  * [examples of problems with integers](https://jvns.ca/blog/2023/01/18/examples-of-problems-with-integers/)\n  * [some possible reasons for 8-bit bytes](https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/)\n\n\n\n### you can get a print copy shipped to you!\n\nThere's always been the option to print the zines yourself on your home printer.\n\nBut this time there's a new option too: you can get a print copy shipped to you! (just click on the \"print version\" link on [this page](https://wizardzines.com/zines/integers-floats/))\n\nThe only caveat is print orders will ship in **August** - I need to wait for orders to come in to get an idea of how many I should print before sending it to the printer.\n\n### people who helped with this zine\n\nI don't make these zines by myself!\n\nI worked with [Marie LeBlanc Flanagan](https://marieflanagan.com/) every morning for 5 months to clarify explanations and build [memory spy](https://memory-spy.wizardzines.com).\n\nThe cover is by Vladimir Ka\u0161ikovi\u0107, Gersande La Fl\u00e8che did copy editing, Dolly Lanuza did editing, another friend did technical review.\n\n[Stefan Karpinski](https://karpinski.org/) gave a talk 10 years ago at the Recurse Center (I even [blogged about it at the time](https://jvns.ca/blog/2013/11/13/day-27-magic-testing-functions/)) which was the first explanation of floating point that ever made any sense to me. He also explained how signed integers work to me in a Mastodon post a few months ago, when I was in the middle of writing the zine.\n\nAnd finally, I want to thank all the beta readers - 60 of you read the zine and left comments about what was confusing, what was working, and ideas for how to make it better. It made the end product so much better.\n\n### thank you\n\nAs always: if you've bought zines in the past, thank you for all your support over the years. I couldn't do this without you.\n",
        "author": "Julia Evans"
    },
    {
        "title": "Some blogging myths",
        "link": "https://jvns.ca/blog/2023/06/05/some-blogging-myths/",
        "updated": "2023-06-05T07:30:34+00:00",
        "id": "https://jvns.ca/blog/2023/06/05/some-blogging-myths/",
        "guidislink": false,
        "text": "\n\nA few years ago I gave a short talk ([slides](https://jvns.ca/blog/2020/12/10/day-24--a-short-talk-about-blogging-myths/)) about myths that discourage people from blogging. I was chatting with a friend about blogging the other day and it made me want to write up that talk as a blog post.\n\nhere are the myths:\n\n  * myth: you need to be original\n  * myth: you need to be an expert\n  * myth: posts need to be 100% correct\n  * myth: writing boring posts is bad\n  * myth: you need to explain every concept\n  * myth: page views matter\n  * myth: more material is always better\n  * myth: everyone should blog\n\n\n\n### myth: you need to be original\n\nThis is probably the one I hear the most often - \"Someone has written about this before! Who's going to care about what I have to say?\".\n\nThe main way I think about this personally is:\n\n  1. identify something I personally have found confusing or interesting\n  2. write about it\n\n\n\nThe idea is that if I found it confusing, lots of other people probably did too, even though the information might theoretically be out there on the internet somewhere. Just because there is information on the internet, it doesn't get magically teleported into people's brains!\n\nI sometimes store up things that I find confusing for many months or years - for example right now I'm confused about some specific details of how Docker networking works on Mac, but I haven't figured it out enough to be able to write about it. If I ever figure it out to my satisfaction I'll probably write a blog post.\n\nSometimes when I write a blog post, someone will link me to a great existing explanation of the thing that I hadn't seen. I try to think of this as a good thing - it means that I get a new resource that I couldn't find, and maybe other people find out about it too. Often I'll update the blog post to link to it.\n\nA couple of other notes about this one:\n\n  * technology changes, and the details matter. Maybe the exact details about how to do something have changed in the last 5 years, and there isn't much written about the situation in 2023!\n  * personal stories are really valuable. For example I love my friend Mikkel's [Git is my buddy](https://mikkel.ca/blog/git-is-my-buddy-effective-solo-developer/) post about how he uses Git. It's not the same way that I use it, and I like seeing his approach.\n\n\n\n### a bit more about my love for personal stories\n\nI think the reason I keep writing these blog posts encouraging people to blog is that I _love_ reading people's personal stories about how they do stuff with computers, and I want more of them. For example, I started using a Mac recently, and I've been very annoyed by the lack of tracing tools like strace.\n\nSo I would love to read a story about how someone is using tracing tools to debug on their Mac in 2023! I found [one from 2016](https://bryce.is/writing/code/2016/07/30/debugging-using-system-calls.html), but I think the situation with system integrity protection has changed since then and the instructions don't work for me.\n\nThat's just one example, but there are a million other things on computers that I do not know how to do, where I would love to read 1 person's story of exactly how they did it in 2023.\n\n### myth: you need to be an expert\n\nThe second myth is that you need to be an expert in the thing you're writing about. If you've been reading this blog, you probably know that I've written a lot of \"hey, I just learned this!\" posts over the years, where I:\n\n  1. Learn an interesting thing (\"hey, I didn't know how gdb works, that's cool!\")\n  2. Write a short blog post about what I learned ([how does gdb work?](https://jvns.ca/blog/2016/08/10/how-does-gdb-work/))\n\n\n\nYou actually just need to know 1-2 interesting things that the reader doesn't. And if you just learned the thing yesterday, it's certain that lots of other people don't know it either.\n\n### myth: posts need to be 100% correct\n\nI try to my make my posts _mostly_ correct, and I've gotten a bit better at that over time.\n\nMy main strategy here is to just add qualifiers like \"My understanding is..\" or \"I think..\" before statements that I'm not totally sure of. This saves a lot of time fact checking statements that I'm honestly not sure how to fact check most of the time.\n\nSome examples of \"I think\u2026s\" from my past blog posts:\n\n> I think people are replacing \"how many golf balls can fit in the Empire State Building\" with more concrete [interview] questions about estimating program runtime and space requirements.\n> \n> I think the most important thing with bridges is to set up the route tables correctly. So far my understanding is that there are 2 route table entries you need to set: \u2026\n> \n> Etsy uses PHP, which I think means they can't have long-lived persistent TCP connections\n> \n> I think the MTU on my local network is 1500 bytes.\n\nI still don't know if all of those statements are true (is it true that PHP programs can't have long-lived persistent TCP connections? maybe not!), so the qualifiers are useful. I don't really know anything about PHP so I don't have much interest in fact checking that PHP statement - I'm happy to leave it as an \"I think\" and potentially correct later it if someone tells me it's wrong.\n\nI do tend to overdo the \"I think that\u2026\" statements a bit (bad habit!) and sometimes I need to edit them out when actually it's something I'm 100% sure of.\n\n### myth: writing boring posts is bad\n\nThe reality of publishing things on the internet is that interesting things get boosted, and boring things get ignored. So people are basically guaranteed to think your posts are much more interesting that they actually are, because they're more likely to see your interesting posts.\n\nAlso it's hard to guess in advance what people will think is interesting, so I try to not worry too much about predicting that in advance. I really Darius Kazemi's [How I Won The Lottery](https://www.youtube.com/watch?v=l_F9jxsfGCw) talk on this topic about how putting things on the internet is like buying lots of lottery tickets, and the best way to \"win\" is to make a lot of stuff.\n\n### myth: you need to explain every concept\n\nIt's common for people writing advanced posts (like \"how malloc works\") to try to include very basic definitions for beginners.\n\nThe problem is that you end up writing something that feels like it wasn't written for **anyone** : beginners will get confused (it's very hard to bring someone from \"I have no idea what memory allocation is\" to \"in depth notes about the internals of malloc\" in a single blog post), and more advanced readers will be bored and put off by the overly basic explanations.\n\nI found that the easiest way to start was to **pick one person and write for them**.\n\nYou can pick a friend, a coworker, or just a past version of yourself. Writing for just 1 person might feel insufficiently general (\"what about all the other people??\") but writing that\u2019s easy to understand for 1 person (other than you!) has a good chance of being easy to understand for many other people as well.\n\n### writing has gotten harder as I get more experienced\n\nSomeone who read this mentioned that they feel like writing has gotten harder as they get more experienced, and I feel the same way.\n\nI think this is because the gap between me and who I'm writing for has gotten a bigger over time, and so it gets a little harder for me to relate to people who know less about the topic. I think on the balance having more experience makes my writing better (I have more perspective!), but it feels harder.\n\nI don't have any advice to give about this right now. I just want to acknowledge that it's hard because someone who read a draft of this mentioned it.\n\n### myth: page views matter\n\nI've looked at page view analytics a lot in my life, and I've never really gotten anything out of it. Comments like this one mean a lot more to me:\n\n> Hey, @b0rk. Just wanted to let you know that [this post](https://jvns.ca/blog/2018/09/01/learning-skills-you-can-practice/) really helped me to improve my skill of understanding a complex concept. Thanks! :)\n\nIf it helps one person, I figure I've won. And probably it helped 10 other people who didn't say anything too!\n\n### myth: more material is always better\n\nI appreciate the work that goes into extremely deep dive blog posts, but honestly they're not really my thing. I'd rather read something short, learn a couple of new things, and move on.\n\nSo that's how I approach writing as well. I'll share a couple of interesting things and then leave anything extra for another post. For me this works well because short posts take less time to write.\n\nThis one is obviously a personal preference: short posts aren't \"better\" either, I just like them more.\n\nBut I often see people get tripped up by wanting to include EVERYTHING in their blog post and then never publishing anything and I think it's worth considering just making the post shorter and publishing it.\n\n### some notes on pedantic/annoying comments\n\nSomeone who read a draft of this mentioned struggling with comments that are pedantic or annoying or mean or argumentative. That one's definitely not a myth, I've read a lot of comments like that about my work. (as well as a lot more comments where people are being constructive, but those ones aren't the problem)\n\nA few notes on how I deal with it:\n\n  * The \"don't read the comments\" advice has never worked for me, for better or for worse. I read all of them.\n  * I don't reply to them. Even if they're [wrong](https://xkcd.com/386/). I dislike arguing on the internet and I'm extremely bad at it, so it's not a good use of my time.\n  * Sometimes I can learn something new from the comment, and I try to take that as a win, even if the thing is kind of minor or the comment is phrased in a way that I find annoying.\n  * Sometimes I'll update the post to fix mistakes.\n  * I've sometimes found it helpful to reinterpret people being mad as people being confused or curious. I wrote a [toy DNS resolver](https://jvns.ca/blog/2022/02/01/a-dns-resolver-in-80-lines-of-go/) once and some of the commenters were upset that I didn't handle parsing the DNS packet. At the time I thought this was silly (I thought DNS parsing was really straightforward and that it was obvious how to do it) but I realized that maybe the commenters didn't think it was easy or obvious, and wanted to know how do it. Which makes sense! It's not obvious! Those comments partly inspired [implement DNS in a weekend](https://implement-dns.wizardzines.com/), which focuses much more heavily on the parsing aspects.\n\n\n\nAs with everything I don't think this is the \"best\" way to deal with pedantic/annoying comments, it's just what I do.\n\n### myth: everyone should blog\n\nI sometimes see advice to the effect of \"blogging is great! public speaking is great! everyone should do it! build your Personal Brand!\".\n\nBlogging isn't for everyone. Tons of amazing developers don't have blogs or personal websites at all. I write because it's fun for me and it helps me organize my thoughts.\n\n### that's all for now!\n\nProbably I'll write another meta post about blogging in a couple of years since apparently that's what I do :)\n\nThanks to Ed, Jeff, Brian, Hazem, Zachary, and Miccah for reading a draft of this\n",
        "author": "Julia Evans"
    },
    {
        "title": "New playground: memory spy",
        "link": "https://jvns.ca/blog/2023/05/25/new-playground--memory-spy/",
        "updated": "2023-05-25T08:05:31+00:00",
        "id": "https://jvns.ca/blog/2023/05/25/new-playground--memory-spy/",
        "guidislink": false,
        "text": "\n\nHello! Today we're releasing a new playground called \"memory spy\". It lets you run C programs and see how their variables are represented in memory. It's designed to be accessible to folks who don't know C - it comes with bunch of extremely simple example C programs that you can poke at. Here's the link:\n\n>> [Memory Spy](https://memory-spy.wizardzines.com) <<\n\nThis is a companion to the \"how integers and floats work\" [zine](https://wizardzines.com) we've been working on, so the goal is mostly to look at how number types (integers and floats) are represented.\n\n### why spy on memory?\n\nHow computers actually represent variables can seem kind of abstract, so I wanted to make it easy for folks to see how a real computer actually represents variables in memory.\n\n### why is it useful to look at C?\n\nYou might be wondering - I don't write C! Why should I care how C programs represent variables in memory?\n\nIn this playground I'm mostly interested in showing people how integers and floats are represented. And low-level languages generally all represent integers and floats in the same way - a 32-bit unsigned int is going to be the same in C, C++, Rust, Go, Swift, etc. The exact name of the type is different, but the representation is the same.\n\nIn higher-level languages like Python it's a little different, but under the hood a `float` in Python contains a C `double`, so the C representation is still pretty relevant.\n\n### you don't have to know C\n\nIt uses C because C is the language where it's the most straightforward to map between \"the code in your program\" and \"what's in your computer's memory\".\n\nBut if you're not comfortable with C, this playground is still for you! We put together a bunch of example programs where you can run them and look at each variable's value.\n\nNone of the example programs use any fancy features of C - a lot of the code is extremely simple, like `char byte = 'a';`. So you should be mostly able to understand what's going on even if you don't know C at all.\n\n### how does it work?\n\nBehind the scenes, there's a server that:\n\n  * compiles the program with `clang`\n  * runs the program with the C debugger `lldb` (using a Python lldb script)\n  * returns a JSON file with the values of the variable on every line, as an array of bytes\n\n\n\nThen the frontend formats the array of bytes so you can look at it. The display logic isn't very fancy - ultimately it's a pretty thin wrapper around lldb.\n\n### some limitations\n\nThe two main limitations I can think of right now are:\n\n  * there's no support for loops (it'll run them, but it'll only tell you the value of the variable the first time through the loop)\n  * it only supports defining one variable per line\n\n\n\nThere are probably more, it's a very simple project.\n\n### the inspiration\n\n[Python Tutor](https://pythontutor.com/) by Philip Guo was a huge inspiration. It has a different focus - it also lets you step through programs in a debugger, but it's more focused on helping the user build a mental model for how variables and control flow work.\n\n### what about security?\n\nIn general my approach to running arbitrary untrusted code is 20% sandboxing and 80% making sure that it's an extremely low value attack target so it's not worth trying to break in.\n\nPrograms are terminated after 1 second of runtime, they run in a container with no network access, and the machine they're running on has no sensitive data on it and a very small CPU.\n\n### some notes on the tech stack\n\nThe backend is in Go, plus a Python script to script the interactions with lldb. (here's [the source for the lldb script](https://gist.github.com/jvns/7f1eff7cdda26412cc8df280a1641fd4) and [the source for the Go server right now](https://gist.github.com/jvns/14b8f65537004a56013260d9219ef36f)). I'm using [bubblewrap](https://jvns.ca/blog/2022/06/28/some-notes-on-bubblewrap/) to sandbox lldb.\n\nAs always the frontend is using Vue. You can see the frontend source with \"view source\" if you want.\n\nThe main fancy thing that happens on the frontend is that I use [tree sitter](https://tree-sitter.github.io/tree-sitter/) to figure out which lines of the code have variables defined on them.\n\n### some design notes\n\nAs usual these days, I built this project with [Marie Claire LeBlanc Flanagan](https://marieflanagan.com/). I think the design decision I'm the happiest with is how we handled navigating the program you're running. Instead of using next/previous arrows to step through the code one line at a time, you can just click on a line to view its variables.\n\nThis \"click on a line\" design wouldn't make sense in a normal debugger context because usually you have loops and a line might be run more than once. But our focus here isn't on control flow, and none of the example programs have loops.\n\nThe other thing I'm happy with is the decision to use regular links like (`<a href=\"#example=hexadecimal\">`) for all the navigation. There's an `onhashchange` Javascript event that takes care of making sure we update the page to match the new URL.\n\nI think there were more design struggles but I forget what they were right now.\n\n### that's all!\n\nHere's the link again:\n\n>> [Memory Spy](https://memory-spy.wizardzines.com) <<\n\nLet me know on Twitter or Mastodon if you notice any problems.\n",
        "author": "Julia Evans"
    },
    {
        "title": "Introducing \"Implement DNS in a Weekend\"",
        "link": "https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/",
        "updated": "2023-05-12T07:04:32+00:00",
        "id": "https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/",
        "guidislink": false,
        "text": "\n\nHello! I'm excited to announce a project I've been working on for a long time: a free guide to implementing your own DNS resolver in a weekend.\n\nThe whole thing is about 200 lines of Python, including implementing all of the binary DNS parsing from scratch. Here's the link:\n\n>> [Implement DNS in a Weekend](https://implement-dns.wizardzines.com) <<\n\nThis project is a fun way to learn:\n\n  * How to parse a binary network protocol like DNS\n  * How DNS works behind the scenes (what's actually happening when you make a DNS query?)\n\n\n\nThe testers have reported that it takes around 2-4 hours to do in Python.\n\n### what's a DNS resolver?\n\nA DNS resolver is a program that knows how to figure out what the IP address for a domain is. Here\u2019s what the command line interface of the resolver you'll write looks like:\n[code] \n    $ python3 resolve.py example.com\n    93.184.216.34\n    \n[/code]\n\n### implementing DNS gives me an amazing sense of confidence\n\nIn [Learning DNS in 10 years](https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/), I talked about how having implemented a toy version of DNS myself from scratch gives me an unparalleled sense of confidence in my understanding of DNS.\n\nSo this guide is my attempt to share that sense of confidence with you all.\n\nAlso, if you've bought [How DNS Works](https://wizardzines.com/zines/dns), I think this guide is a nice companion - you can implement your own DNS resolver to solidify your understanding of the concepts in the zine.\n\n### it's a Jupyter notebook\n\nIn this guide, I wanted to mix code that you could run with explanations. I struggled to figure out the right format for months, and then I finally thought of using a [Jupyter notebook](https://jupyter.org/)! This meant that I could easily check that all of the code actually ran.\n\nI used [Jupyter Book](https://jupyterbook.org) to convert the Jupyter notebooks into a website. It reruns the notebook before converting it to HTML, so I could easily guarantee that all of the code actually runs and outputs what it says that it outputs. I ended up hacking the theme a lot to make it more minimal, as well as doing some terrible things with Beautiful Soup to get a table of contents that shows you the global TOC as well as the page's local section headings all in one place.\n\nYou can also download the Jupyter notebooks and run them on your own computer if you'd like, using the \"download the code\" button on the [homepage](https://implement-dns.wizardzines.com/).\n\n### why Python?\n\nI used Python for this guide instead of a lower-level language like Go or Rust to make it more approachable - when I started learning networking 10 years ago, I didn't really know any systems languages well, and I found them kind of intimidating. Implementing [traceroute using scapy in Python](https://jvns.ca/blog/2013/10/31/day-20-scapy-and-traceroute/) felt much less scary.\n\nYou can very easily pack/unpack binary data in Python with `struct.pack` and `struct.unpack`, so Python being a higher-level language doesn't really cause any problems.\n\nThe idea is that you can either follow the guide in Python (which is the easiest mode), or if you want a bigger challenge, you can translate the code to any language you'd like. (Go? Javascript? Rust? Bash? Lua? Ruby?)\n\n### only the standard library\n\nIt was important to me to really show how to implement DNS \"from scratch\", so the guide only uses a few very basic standard library modules: `struct`, `socket`, `io`, `random`, and `dataclasses`.\n\nHere's what we use each module for:\n\n  * `random` is used for generating DNS query IDs\n  * `socket` is used to make a UDP connection\n  * `struct` is used for converting to/from binary (`struct.pack` and `struct.unpack`)\n  * `dataclasses` are used to make serializing / deserializing records a little more ergonomic\n  * `io` is used for `BytesIO`, which gives us a reader interface which stores a pointer to how much of the packet we've read so far. If I were implementing DNS in a language that didn't have this kind of reader interface, I might implement my own.\n\n\n\n### it includes some bonus exercises\n\nThe toy DNS resolver is obviously missing a bunch of important features, so I've added some exercises at the end with examples of features you could add (and bugs you could fix) to make it a little more like a \"real\" DNS resolver.\n\nThis list isn't particularly exhaustive though, and I'd love to hear other ideas for relatively-easy-to-implement DNS resolver features I've missed.\n\n### next goal: TLS\n\nI've actually written toy implementations of a bunch of other network protocols in Python (ICMP, UDP, TCP, HTTP, and TLS), and I'm hoping to release \"Implement TLS in a weekend\" at some point.\n\nNo promises though - I have another zine to finish writing first (on all the surprising things about how integers and floats work on computers), and a toy TLS implementation is quite a bit more involved than a toy DNS implementation.\n\n### thanks to the beta testers\n\nThanks to everyone (Atticus, Miccah, Enric, Ben, Ben, Maryanne, Adam, Jordan, and anyone else I missed) who tested this guide and reported confusing or missing explanations, mistakes, and typos.\n\nAlso a huge thanks to my friend Allison Kaptur who designed the first \"Domain Name Saturday\" workshop with me at the Recurse Center in 2020.\n\nThe name was inspired by [Ray Tracing in One Weekend](https://raytracing.github.io/).\n\n### here's the link again\n\nHere's the link to the guide again if you'd like to try it out:\n\n>> [Implement DNS in a Weekend](https://implement-dns.wizardzines.com) <<\n",
        "author": "Julia Evans"
    },
    {
        "title": "New talk: Learning DNS in 10 years",
        "link": "https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/",
        "updated": "2023-05-08T09:53:29+00:00",
        "id": "https://jvns.ca/blog/2023/05/08/new-talk-learning-dns-in-10-years/",
        "guidislink": false,
        "text": "\n\nHere's a keynote I gave at [RubyConf Mini](https://www.rubyconfmini.com/) last year: Learning DNS in 10 years. It's about strategies I use to learn hard things. I just noticed that they'd released the video the other day, so I'm just posting it now even though I gave the talk 6 months ago.\n\nHere's the video, as well as the slides and a transcript of (roughly) what I said in the talk.\n\n### the video\n\n### the transcript\n\n[](https://jvns.ca/images/2022-railsconf/slide-01.png)\n\n[](https://jvns.ca/images/2022-railsconf/slide-02.png)\n\nYou all got this zine ([How DNS Works](https://wizardzines.com/zines/dns/)) in your swag bags -- thanks to RubyConf for printing it! \n\n[](https://jvns.ca/images/2022-railsconf/slide-03.png)\n\nBut this talk is not really about DNS. I mean, this is a Ruby conference, right? So this talk is really about learning hard things, and DNS is an example of something that was hard for me to learn. \n\n[](https://jvns.ca/images/2022-railsconf/slide-04.png)\n\nIt took me maybe 16 years from the first time that like I bought a domain name and set up my DNS records to when I really felt like I understood how the system worked. \n\n[](https://jvns.ca/images/2022-railsconf/slide-05.png)\n\nAnd one thing I want to say at the beginning of this talk, is that I think that taking like 16 years to learn something like DNS is kind of normal. The idea that \"I should understand this already\" is a bit silly. For me, I was doing other stuff for most of the 16 years! There was other stuff I wanted to learn. \n\n[](https://jvns.ca/images/2022-railsconf/slide-06.png)\n\nAnd so, this talk is not about how you should learn about any particular thing. I don't care if you learn how DNS works! It's really about how to approach learning something hard that's a priority for you to learn. \n\n[](https://jvns.ca/images/2022-railsconf/slide-07.png)\n\nSo, we're going to talk about learning through a series of tiny deep dives. My favorite way of learning things is to do nothing, most of the time. \n\nThat's why it takes 10 years. \n\nSo for six months I'll do nothing and then like I'll furiously learn something for maybe 30 minutes or three hours or an afternoon. And then I'll declare success and go back to doing nothing for months. I find this works really well for me. \n\n[](https://jvns.ca/images/2022-railsconf/slide-08.png)\n\nHere are some of the strategies we're going to talk about for doing these tiny deep dives \n\nFirst, we're going to start briefly by talking about what DNS is. \n\nNext, we're going to talk about spying on DNS. \n\nThen we're gonna talk about being confused, which is my main mode. (I'm always confused about something!) \n\nThen we'll talk about reading the specification, we'll going to do some experiments, and we're going to implement our own terrible version of DNS. \n\n[](https://jvns.ca/images/2022-railsconf/slide-09.png)\n\nAnd so what's DNS really briefly? DNS stands for the Domain Name System. And every time you go to a website like `www.example.com`, your browser needs to look up that website's IP address. So DNS translates domain names into IP addresses. It looks up other information about domain names too, but we're mostly just going to talk about IP addresses today. \n\n[](https://jvns.ca/images/2022-railsconf/slide-10.png)\n\nI want to briefly sell why I think DNS is cool, because we're going to be talking about it a lot. \n\n[](https://jvns.ca/images/2022-railsconf/slide-11.png)\n\nOne cool thing about DNS is that it's this invisible system that controls the entire internet. \n\n[](https://jvns.ca/images/2022-railsconf/slide-12.png)\n\nFor example, you're on your phone, you're using Google Maps, it needs to know, where is maps.google.com, right? Or on your computer, where's reddit.com? What's the IP address? And if we didn't have DNS, the entire internet would collapse. \n\nI think it's fun to learn how this behind the scenes stuff works. \n\n[](https://jvns.ca/images/2022-railsconf/slide-13.png)\n\nThe other thing about DNS I find interesting is that it's really old. There's this document ([RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035)) which defines how DNS works, that was written in 1987. And if you take that document and you write a program that works the way that documents says to work, your program will work. And I think that's kind of wild, right? \n\nThe basics haven't changed since before I was born. So if you're a little slow about learning about it, that's ok: it's not going to change out from under you. \n\n[](https://jvns.ca/images/2022-railsconf/slide-14.png)\n\nNext I want to talk about spying on DNS, which is one of my favorite ways to learn about things. \n\n[](https://jvns.ca/images/2022-railsconf/slide-15.png)\n\nI'm going to talk about two spy tools for DNS: dig and wireshark. \n\n[](https://jvns.ca/images/2022-railsconf/slide-16.png)\n\ndig is a tool for making DNS queries. We talked about you know, how your browser needs to look up the IP address for `maps.google.com`. We can do that in dig! \n\n[](https://jvns.ca/images/2022-railsconf/demo-dig.png)\n\nWhen we run `dig maps.google.com`, it prints out 5 fields. Let's talk about what those 5 fields are. \n\n[](https://jvns.ca/images/2022-railsconf/slide-17.png)\n\nI've used example.com instead of maps.google.com on this slide, but the fields are the same. Let's talk about 4 of them: \n\nWe have the domain name, no big deal \n\nThe Time To Live, which is how long to cache that record for so this is a one day \n\nYou have the record type, A stands for address because this is an IP address \n\nAnd you have the content, which is the IP address \n\n[](https://jvns.ca/images/2022-railsconf/slide-18.png)\n\nBut I think that the funniest field in a DNS record is this field in the middle, IN, which stands for INternet. I guess in 1987, they thought that we might be on a lot of different networks. So they made an option for it. In reality, we're all on the internet. And every DNS query has class set to \"internet\". There are a couple of others query classes (CHAOS and HESIOD), which truly almost nobody uses. \n\n[](https://jvns.ca/images/2022-railsconf/demo-dig2.png)\n\nWe can also kind of poke around on the internet with Dig. We've talked about A records to look up IP addresses. \n\n[](https://jvns.ca/images/2022-railsconf/demo-dig3.png)\n\nBut there are other kinds of records like TXT records. So we're going to look at a TXT record really quickly just because I think this is very fun. We're going to look at twitter.com's TXT records. \n\nSo TXT records are something that people use for domain verification, for example to prove to Google that you own twitter.com. \n\nSo what you can do is you can set this DNS record `google-site-verification`. Google will tell you what to set it to, you'll set it, and then Google will believe you. \n\nI think it's kind of fun that you can like kind of poke around with DNS and see that Twitter is using Miro or Canva or Mixpanel, that's all public. It's like a little peek into what people are doing inside their companies \n\n[](https://jvns.ca/images/2022-railsconf/demo-dig4.png)\n\nOh, the other thing about dig is that by default, dig's output looks like this, which is very ugly and unreadable. There's a lot of nonsense here. \n\n[](https://jvns.ca/images/2022-railsconf/slide-19.png)\n\nSo dig has a configuration file, where you can put `+noall +answer ` and then your dig responses look much nicer (like they did in the screenshots above) instead of having a lot of nonsense in them. Whenever possible, I try to make my tools behave in a more human way. \n\n[](https://jvns.ca/images/2022-railsconf/slide-20.png)\n\nThe other thing I want to talk about is Wireshark, which is my favorite computer networking tool in the universe for spying on all things computer networks. In this case, DNS queries. So let's go look at Wireshark. \n\n[](https://jvns.ca/images/2022-railsconf/slide-21.png)\n\n[](https://jvns.ca/images/2022-railsconf/demo-wireshark1.png)\n\nWhen we make a DNS query like this and look up example.com, Wireshark can capture it. \n\n[](https://jvns.ca/images/2022-railsconf/demo-wireshark2.png)\n\nWhen you start looking in the guts of things, I think it can be a bit scary at first. Like what do all these numbers? It kind of seems like a lot. So when I'm looking at something new, I try to start by looking at stuff that I understand. \n\n[](https://jvns.ca/images/2022-railsconf/demo-wireshark3.png)\n\nFor example, I know that example.com is a domain name, right? So we should able to use Wireshark to go find that domain name in the DNS query. If we click into the \"query\" part of the DNS packet, we can see 3 fields that we recognize. First, the domain name. \n\n[](https://jvns.ca/images/2022-railsconf/demo-wireshark4.png)\n\nWe can also see the type (\"A\") \n\n[](https://jvns.ca/images/2022-railsconf/demo-wireshark5.png)\n\nAnd the third one is the class which is INternet, which is always the same. What I find comforting here is that in the query, there are really only 2 important fields: a DNS query is just saying \"I want the IP address for example.com\". There's just two fields. And that that always makes me feel a little bit better about understanding something. \n\n[](https://jvns.ca/images/2022-railsconf/slide-22.png)\n\nA quick caveat: your browser might be using encrypted DNS and spying on your DNS queries with Wireshark will not work if your DNS is encrypted. But there's lots of non-encrypted DNS to spy on. \n\n[](https://jvns.ca/images/2022-railsconf/slide-23.png)\n\nThe second thing I want to talk about for learning new things is to notice when you're confused about something. \n\n[](https://jvns.ca/images/2022-railsconf/slide-24.png)\n\nI want to tell you a story, \"the case of the mysterious caching\", of something that happened to me with DNS that really confused me. \n\n[](https://jvns.ca/images/2022-railsconf/slide-25.png)\n\nFirst, I want to talk to you a little bit about how DNS works a little bit more. So on the left here, you have your browser. And when your browser makes a DNS query, it asks a server called a resolver. And all you need to know about the resolver is that it's cache, which as we know is like the worst thing in computer science. So the resolver is a cache, and it gets its information from the source of truth, which has the real answers. \n\n[](https://jvns.ca/images/2022-railsconf/slide-26.png)\n\nSo your browser talks to a resolver, which is a cache. \n\n[](https://jvns.ca/images/2022-railsconf/slide-27.png)\n\nAt the time of this story, I had this mental model for like how I thought about DNS, which is that if I set a TTL (the cache time) of 5 minutes when configuring my DNS records, then I would never have to wait more than five minutes. Something you need to know about me is that I'm a very impatient person. And I hate waiting. So this model was mostly working for me at the time, though there are a few other very important caveats that we're not going to get into. \n\n[](https://jvns.ca/images/2022-railsconf/slide-28.png)\n\nBut one day I was setting up a new subdomain for some new project. Let's say it was new.jvns.ca. So I set it up. I made its DNS records, and I refreshed the page. And it wasn't working. So I figured, that's fine, my model says, I only have to wait five minutes, right? Because that's what I was used to. But I waited five minutes and still didn't work. \n\n[](https://jvns.ca/images/2022-railsconf/slide-29.png)\n\nAnd I was like, oh, no. My mental model was broken! I did not feel good. \n\n[](https://jvns.ca/images/2022-railsconf/slide-30.png)\n\nAnd often when this happens to me, and I think for most of us, if something weird happens with a computer, you let it go, right? You might decide okay, I don't have time to go into a deep investigation here. I'll just wait longer. \n\n[](https://jvns.ca/images/2022-railsconf/slide-31.png)\n\nBut sometimes I have a lot of energy, and maybe I'm feeling mad, like \"the computer can't beat me today\"! Because there's a reason that this is happening, right? And I want to find out what it is. So this day for some reason. I had a lot of energy. \n\n[](https://jvns.ca/images/2022-railsconf/slide-32.png)\n\nSo I started Googling furiously. And I found a useful comment on Stack Overflow. \n\n[](https://jvns.ca/images/2022-railsconf/slide-33.png)\n\nThe Stack Overflow comment talked about something called negative caching. What's that? \n\n[](https://jvns.ca/images/2022-railsconf/slide-34.png)\n\nAnd so here's what it said might be going on. The first time I opened the website (before the DNS records had been set up), the DNS servers returned a negative answer, saying hey,this domain doesn't exist yet. The code for that is NXDOMAIN, which is like a 404 for DNS. \n\nAnd the resolver cached that negative NXDOMAIN response. So the fact that it didn't exist was cached. \n\n[](https://jvns.ca/images/2022-railsconf/slide-35.png)\n\nSo my next question was: how long do I have to wait for the cache to expire? This brings us to a another learning technique. \n\n[](https://jvns.ca/images/2022-railsconf/slide-36.png)\n\nI think like maybe the most upsetting learning technique to me is to read a very boring technical document. I'm like very impatient. I kind of hate reading boring things. And so when I read something very boring, I like to bring a specific question. So in this case, I had a specific question, which is how long do I have to wait for the cache to expire? \n\n[](https://jvns.ca/images/2022-railsconf/slide-37.png)\n\nIn networking, everything has a specification. The boring technical documents are called RFC is for request for comments. I find this name a bit funny, because for DNS, some of the main RFCs are RFC 1034 and 1035. These were written in 1987, and the comment period ended in 1987. You can definitely no longer make comments. But anyway, that's what they're called. \n\nI personally kind of love RFCs because they're like the ultimate answer to many questions. There's a great series of HTTP RFCs, 9110 to 9114. DNS actually has a million different RFCs, it's very upsetting, but the answers are often there. So I went looking. And I think I went looking because when I read comments on StackOverflow, I don't always trust them. How do I know if they're accurate? So I wanted to go to an authoritative source. \n\n[](https://jvns.ca/images/2022-railsconf/slide-38.png)\n\nSo I found this document called RFC 2308. In section 3, it has this very boring sentence, the TTL of this record is set to the minimum of the minimum field of the SOA record and the TTL of the SOA itself. It indicates how long a resolver may cache the negative answer. \n\n[](https://jvns.ca/images/2022-railsconf/slide-39.png)\n\nSo, um, ok, cool. What does that mean, right? Luckily, we only have one question: I don't need to read the entire boring document. I just need to like analyze this one sentence and figure it out. \n\nSo it's saying that the cache time depends on two fields. I want to show you the actual data it's talking about, the SOA record. \n\n[](https://jvns.ca/images/2022-railsconf/demo-negative-caching.png)\n\nLet's look at what happens when we run `dig +all asdfasdfasdfasdfasdf.jvns.ca` It says that the domain doesn't exist, NXDOMAIN. But it also returns this record called the SOA record, which has some domain metadata. And there are two fields here that are relevant. \n\n[](https://jvns.ca/images/2022-railsconf/slide-40.png)\n\nHere. I put this on a slide to try to make it a little bit clearer. This slide is a bit messed up, but there's this field at the end that's called the MINIMUM field, and there's the TTL, time to live of the record, that I've tried to circle. \n\nAnd what it's saying is that if a record doesn't exist, the amount of time the resolver should cache \"it doesn't exist\" for is the minimum of those two numbers. \n\n[](https://jvns.ca/images/2022-railsconf/slide-41.png)\n\nIn this case, both of those numbers are 10800. So that's how long have to wait. We have to wait 10,800 seconds. That's 3 hours. \n\n[](https://jvns.ca/images/2022-railsconf/slide-42.png)\n\nAnd so I waited three hours and then everything worked. And I found this kind of fun to know because often like if you look up DNS advice it will say something like, if something has gone wrong, you need to wait 48 hours. And I do not want to wait 48 hours! I hate waiting. So I love it when I can like use my brain to figure out that I can wait for less time. \n\n[](https://jvns.ca/images/2022-railsconf/slide-43.png)\n\nSometimes when I find my mental model is broken, it feels like I don't know anything\n\nBut in this case, and I think in a lot of cases, there's often just a few things I'm missing? Like this negative caching thing is like kind of weird, but it really was the one thing I was missing. There are a few more important facts about how DNS caching works that I haven't mentioned, but I haven't run into more problems I didn't understand since then. Though I'm sure there's something I don't know. \n\nSo sometimes learning one small thing really can solve all your problems. \n\n[](https://jvns.ca/images/2022-railsconf/slide-44.png)\n\nI want to say briefly that there's a solution to this negative caching problem. We talked about how like if you visit a domain that's nonexistent, it gets cached. The solution is if you haven't set up your domain's DNS, don't visit the domain! Only visit it after you set it up. So I've learned to do that and now I almost never have this problem anymore. It's great. \n\n[](https://jvns.ca/images/2022-railsconf/slide-45.png)\n\nThe next thing I want to talk about is doing experiments. \n\n[](https://jvns.ca/images/2022-railsconf/slide-46.png)\n\nSo let's say we want to do some experiments with caching. \n\n[](https://jvns.ca/images/2022-railsconf/slide-47.png)\n\nI think most people don't want to make experimental changes to their domain names, because they're worried about breaking something. Which I think is very understandable. \n\n[](https://jvns.ca/images/2022-railsconf/slide-48.png)\n\n[](https://jvns.ca/images/2022-railsconf/demo-mess1.png)\n\nBecause I was really into DNS, I wanted to experiment with DNS. And I also wanted other people to experiment with DNS without having to worry about breaking something. So I made this little website with my friend, Marie, called [Mess with DNS](https://messwithdns.net)\n\nThe idea is, if you don't want to do that DNS experiments on your domain, you can do them on my domain. And if you mess something up, it's my problem, it's not your problem. And there have been no problems, so that's fine. \n\nSo let's use Mess With DNS to do a little DNS experimentation \n\n[](https://jvns.ca/images/2022-railsconf/demo-mess2.png)\n\nThe way this works is you get a little subdomain. This one is chair131.messwithdns.com. And then you can make DNS records on it and try things out. Here we're making a record for test.char131.messwithdns.net, with type A, the IP 7.7.7.7, and TTL 3000 seconds. \n\n[](https://jvns.ca/images/2022-railsconf/slide-49.png)\n\nWhat we would expect to see is that if we make a query to the resolver, then it asks kind of like the source of truth, which we control. And we should expect the resolver to make only one query, because it's cached. So I want to do an experiment and see if it's true that we get only 1 query. \n\n[](https://jvns.ca/images/2022-railsconf/demo-mess3.png)\n\nSo I'm going to make a few queries for it, with `dig @1.1.1.1 test.chair131.messwithdns.com`. I've queried it a bunch of times, maybe 10 or 20. \n\n[](https://jvns.ca/images/2022-railsconf/demo-mess4.png)\n\nOh, cool. This isn't what I expected to see. This is fun, though, that's great. We made about 20 queries for that DNS record. The server logs all queries it receives, so we can count them. Our server got 1, 2, 3, 4, 5, 6, 7, 8 queries. That's kind of fun. 8 is less than 20. \n\nOne reason I like to do demos live on stage is that sometimes what I what happens isn't exactly what I think will happen. When I do this exact experiment at home, I just get 1 query to the resolver. \n\nSo we only saw like eight queries here. And I assume that this is because the resolver, 1.1.1.1, we're talking to has more than one independent cache, I guess there are 8 caches. This makes sense to me because Cloudflare's network is distributed -- the exact machines I'm talking to here in Providence are not the same as the ones in Montreal. \n\nThis is interesting because it complicates your idea about how caching works a little bit, right? Like maybe a given DNS resolver actually has like eight caches and which one you get is random, and you're not always talking to the same one. I think that's what's going on here. \n\n[](https://jvns.ca/images/2022-railsconf/demo-mess5.png)\n\nWe can also do the same experiment, but ask Google's resolver, 8.8.8.8, instead of Cloudflare's resolver. \n\n[](https://jvns.ca/images/2022-railsconf/demo-mess6.png)\n\nAnd we're seeing a similar thing here to what we saw with Cloudflare, there are maybe 4 independent caches. \n\n[](https://jvns.ca/images/2022-railsconf/slide-50.png)\n\nWe could also do an experiment with negative caching, but no, I'm not going to do this demo. Sorry. I could just see it going downhill. The problem is that there's too many different caches, and I really want there to be one cache, but there's like seven. That's fine, let's move on. \n\n[](https://jvns.ca/images/2022-railsconf/slide-51.png)\n\nNow I'm going to talk about my favorite strategy for learning about stuff, which is to write my own very bad version of the thing. And I want to say that writing my very bad implementation gives me a really unreasonable amount of confidence. \n\n[](https://jvns.ca/images/2022-railsconf/slide-52.png)\n\nSo you might think that writing DNS software is complicated, right? But it's easier than you might think, as long as you keep your expectations low. \n\n[](https://jvns.ca/images/2022-railsconf/slide-53.png)\n\nTo make the DNS queries, the first thing we need to do is we need to make a network connection. Let's do that. \n\n[](https://jvns.ca/images/2022-railsconf/slide-54.png)\n\nThese four lines of Ruby connect to 8.8.8.8, the Google DNS resolver, on UDP port 53. Now we're like halfway there. So after we've made a connection, we need to send Google a DNS query. You might be thinking, Julia, I don't know how to write a DNS query. \n\n[](https://jvns.ca/images/2022-railsconf/slide-55.png)\n\nBut there's no problem. We can copy one from something else that knows what a DNS query looks like. AKA Wireshark. \n\n[](https://jvns.ca/images/2022-railsconf/demo-write1.png)\n\nSo if I right click on this DNS query, it's very small, but I'm clicking on \"copy\", and then \"copy as hex stream\". You might not know what this means yet, but this is a DNS query. And you might think that like, Hey, you can't just copy and paste something and then send the exact same thing and it'll reply, but you can. And it works. \n\n[](https://jvns.ca/images/2022-railsconf/slide-56.png)\n\nHere's what the code looks like to send this hex string we copied and pasted to 8.8.8.8. \n\n[](https://jvns.ca/images/2022-railsconf/demo-write2.png)\n\nSo we take this like hex string that we copy and pasted, and paste it into our tiny Ruby program, and use `.pack` to convert into a string of bytes and send it. \n\n[](https://jvns.ca/images/2022-railsconf/demo-write3.png)\n\nNow we run the Ruby program. \n\n[](https://jvns.ca/images/2022-railsconf/demo-write4.png)\n\nLet's go to Wireshark and look for the packet we just sent. And we can see it there! There's some other noise in between, so I'll stop the capture. \n\nWe can see that it's the same packet because the query ID matches, B962. \n\nSo we sent a query to Google the answer server and we got a response right? It was like this is totally legitimate. There's no problem. It doesn't know that we copied and pasted it and that we have no idea what it means! \n\n[](https://jvns.ca/images/2022-railsconf/slide-57.png)\n\nBut we do want to know what this means, right? And so we'll take this hex string and split it into 2 parts. The first part is the header. And the second part is the question, which contains the actual domain name we're looking up. \n\n[](https://jvns.ca/images/2022-railsconf/slide-58.png)\n\nWe're going to see how to construct these in Ruby, but first I want to talk about what a byte is for one second. So this (b9) is the hexadecimal representation of a byte. The way I like to look at figure out what that means is just type it into IRB, if you type in 0xB9 it'll print out, that's the number 184. \n\nSo the question is 12 bytes \n\n[](https://jvns.ca/images/2022-railsconf/slide-59.png)\n\nThose 12 bytes correspond six numbers, which are two bytes each. So the first number is the thing `b962` which is the query ID. The next number is the flags, which basically in this case, means like this is a query like hello, I have a question. And then there's four more sections, the number of questions and then the number of answers. We do not have any answers. We only have a question. So we're saying, hello, I have one question. That's what the header means. \n\n[](https://jvns.ca/images/2022-railsconf/slide-60.png)\n\nAnd the way that we can do this in Ruby, is we can make a little array that has the query ID, and then these numbers which correspond to the other the other header fields, the flags and then 1 for 1 question, and then three zeroes for each of the 3 sections of answers. \n\nAnd then we need to tell Ruby how to take these like six numbers and then represent them as bytes. So n here means each of these is supposed to represent it as two bytes, and it also means to use big endian byte order. \n\n[](https://jvns.ca/images/2022-railsconf/slide-61.png)\n\nNow let's talk about the question. \n\n[](https://jvns.ca/images/2022-railsconf/slide-62.png)\n\nI broke up the question section here. There are two parts you might recognize from `example.com`: there's example, and com. The way it works is that first you have a number (like 7), and then a 7-character string, like \"example\". The number tells you how many characters to expect in each part of the domain name. So it's 7, example, 3, com, 0. \n\nAnd then at the end, you have two more fields for the type and the class. Class 1 is code for \"internet\". And type 1 is code for \"IP address\", because we want to look up the IP address. is \n\n[](https://jvns.ca/images/2022-railsconf/slide-63.png)\n\nSo we can write a little bit of code to do this. If we want to translate example.com into seven example three column zero, can like split the domain on a dot and then like get its length and concatenate that together and put a 0 on the end. It's just a little bit of Ruby. how to encode a domain name. \n\n[](https://jvns.ca/images/2022-railsconf/slide-64.png)\n\nAnd then we can wrap all this up together where we make a random query ID. And then you make the header, encode the domain name, and then we add the type and the class, 1 and 1, and then we can just concatenate everything together and that's our query. \n\n[](https://jvns.ca/images/2022-railsconf/slide-65.png)\n\nThere's definitely more work to do here to print out the response, but I wrote a 120-line Ruby script that parses the response too, and I want to show you a quick demo of it working. \n\n[](https://jvns.ca/images/2022-railsconf/demo-write7.png)\n\nWhat domain should we look up>. rubyconfmini.com. All right, let's do it. Hey, it works! \n\n[](https://jvns.ca/images/2022-railsconf/slide-66.png)\n\nI have a blog post that breaks down the whole thing on my blog, [Making a DNS query in Ruby from scratch](https://jvns.ca/blog/2022/11/06/making-a-dns-query-in-ruby-from-scratch/). It talks about how to decode the response. \n\n[](https://jvns.ca/images/2022-railsconf/slide-67.png)\n\nWe're at the end! Let's do a recap. \n\n[](https://jvns.ca/images/2022-railsconf/slide-68.png)\n\nOkay. Let's go over the ways we've talked about learning things! \n\nFirst, spy on it. I find that when I look at things like to see like really what's happening under the hood, and when I look at like, what's in the bytes, you know what's going on? It's often like not as complicated as I think. Like, oh, there's just the domain name and the type. It really makes me feel far more confident that I understand that thing. \n\nI try to notice when I'm confused, and I want to say again, that noticing when you're confused is something that like we don't always have time for right? It's something to do when you have the energy. For example there's this weird DNS query I saw in one of the demos today that I don't understand, but I ignored it because, well, I'm giving a talk. But maybe one day I'll feel like looking at it. \n\nWe talked about reading the specification, which, there are few times I feel like more powerful than when I'm in like a discussion with someone, and I KNOW that I have the right answer because, well, I read the specification! It's a really nice way to feel certain. \n\nI love to do experiments to check that my understanding of stuff is right. And often I learn that my understanding of something is wrong! I had an example in this talk that I was going to include and I did an experiment to check that that example was true, and it wasn't! And now I know that. I love that experiments on computers are very fast and cheap and usually have no consequences. \n\nAnd then the last thing we talked about and truly my favorite, but the most work is like implementing your own terrible version. For me, the confidence I get from writing like a terrible DNS implementation that works on 11 different domain names is unmatched. If my thing works at all, I feel like, wow, you can't tell me that I don't know how DNS works! I implemented it! And it doesn't matter if my implementation is \"bad\" because I know that it works! I've tested it. I've seen it with my own eyes. And I think that just feels amazing. And there are also no consequences because you're never going to run it in production. So it doesn't matter if it's terrible. It just exists to give you huge amounts of confidence in yourself. And I think that's really nice. \n\n[](https://jvns.ca/images/2022-railsconf/slide-69.png)\n\nThat's all for me. Thank you for listening. \n\n### thanks to the organizers!\n\nThanks to the RubyConf Mini organizers for doing such a great job with the conference - it was the first conference I'd been to since 2019, and I had a great time.\n\n### a quick plug for \"How DNS Works\"\n\nIf you liked this talk and want to to spend _less_ than 10 years learning about how DNS works, I spent 6 months condensing everything I know about DNS into 28 pages. It's here and you can get it for $12: [How DNS Works](https://wizardzines.com/zines/dns/).\n",
        "author": "Julia Evans"
    },
    {
        "title": "New playground: integer.exposed",
        "link": "https://jvns.ca/blog/2023/04/19/new-playground-integer-exposed/",
        "updated": "2023-04-19T09:35:29+00:00",
        "id": "https://jvns.ca/blog/2023/04/19/new-playground-integer-exposed/",
        "guidislink": false,
        "text": "\n\nHello! For the last few months we've been working on a zine about how integers and floating point numbers work. Whenever I make a zine I like to release a playground to go with it, like [mess with dns](https://messwithdns.net/) for the DNS zine or the [sql playground](https://sql-playground.wizardzines.com/).\n\nFor this one, I made a simple playground called [integer.exposed](https://integer.exposed), inspired by Bartosz Ciechanowski's [float.exposed](https://float.exposed).\n\nIt's a lot less elaborate than Mess With DNS, so I'll keep this blog post short.\n\n### the inspiration: float.exposed\n\nI did a couple of talks about how integers and floating point work last month, and in the talk about floating point I found myself CONSTANTLY referring to this site called [Float Exposed](https://float.exposed/) by Bartosz Ciechanowski to demonstrate various things. (Aside: If you haven't seen Ciechanowski's incredible [interactive explainers](https://ciechanow.ski/archives/) on bicycles, mechanical watches, lenses, the internal combustion engine, and more, you should check them out!)\n\nHere's what it it looks like:\n\nThings I've done with it:\n\n  * Increment the significand of a float (to show people how close together successive floats are)\n  * Show special values like [NaN](https://float.exposed/0x7ff8000000000000) and [infinity](https://float.exposed/0x7ff0000000000000), and show how if you change the bits in NaN, it's still NaN\n  * Go to a [large integer value](https://float.exposed/0x43abc16d674ec801) and show how the distance between floats is very large\n  * Show how you get drastically different precision for [one million as a 32-bit float](https://float.exposed/0x4b189680) and as a [64-bit float](https://float.exposed/0x416312d000000000) (try incrementing the significand for each one!)\n\n\n\nand lots more! It's an incredible way to get hands on with floats and improve your intuition around how they work.\n\n### float.exposed, but for integers\n\nIntegers aren't as complicated as floats, but there are some nonobvious things about them: you have signed integers and unsigned integers, you have endianness, and there are some weird operations like right/left shift. So when I was talking about integers, I found myself wanting a similar website to [float.exposed](https://float.exposed) to demonstrate things.\n\nSo with permission, I put one together at [integer.exposed](https://integer.exposed). Here's a screenshot:\n\nThe UI is a little different: integers don't have many different parts the way floating point numbers do, so there's a single row of buttons that you can use to do various operations on the integer.\n\nA note on byte order: Like float.exposed, it uses a big endian byte order, because I think it's more intuitive to read. But you do have to keep in mind that on most computers the bytes will actually be in the reverse order.\n\n### some interesting things to try\n\nHere are some things I think are fun to try:\n\n  1. **signed integers** : Look at how [-1](https://integer.exposed/#0xff) is represented. Increment and decrement it a few times and see how the signed and unsigned values change. Do the same with [-128](https://integer.exposed/#0x80). Also look at how -1 is represented as a 16/32/64-bit integer.\n  2. **signed/unsigned right shift** : Similarly with [-1](https://integer.exposed/#0xffff): try out signed right shift (also known as \"arithmetic right shift\") and see how the result is different from unsigned right shift (aka \"logical right shift\").\n  3. **counting in binary** : Start at [0](https://integer.exposed/#0x00) and increment a bunch of times and watch the binary value count up.\n  4. **not** : Take any number (like [123](https://integer.exposed/#0x7b)) and NOT it. See how `NOT` is almost exactly the same as negation, but not quite.\n  5. **swap the byte order**. Take a number like [12345678](https://integer.exposed/#0x4e61bc00) and see how if you swap the byte order, the result is an unrecognizably different number.\n  6. look at how [powers of 2 are represented](https://integer.exposed/#0x00000800)\n\n\n\n### the tech stack\n\nAs usual for me it uses Vue.js. If you want to see how it works you can just view source - it's only two files, `index.html` and `script.js`.\n\nI took a bunch of the CSS from [float.exposed](https://float.exposed).\n\n### that's all!\n\nLet me know if you notice any bugs! I might add more features, but I want to keep it pretty simple.\n\nI've also built another more involved playground that I'm hoping to release and write up soon.\n",
        "author": "Julia Evans"
    },
    {
        "title": "A list of programming playgrounds",
        "link": "https://jvns.ca/blog/2023/04/17/a-list-of-programming-playgrounds/",
        "updated": "2023-04-17T09:37:08+00:00",
        "id": "https://jvns.ca/blog/2023/04/17/a-list-of-programming-playgrounds/",
        "guidislink": false,
        "text": "\n\nI really like using (and making!) programming playgrounds, and I got thinking the other day about how I didn't have a great list of playgrounds to refer to. So I [asked on Mastodon](https://mastodon-thread-view.jvns.ca/#110135675722500447) for links to cool playgrounds.\n\nHere's what I came up with. I'd love to know what I missed.\n\n  * Compilers: [godbolt compiler explorer](https://godbolt.org/) by Matt Godbolt\n  * Shaders: [shadertoy](https://www.shadertoy.com/) by Inigo Quilez and Pol Jeremias\n  * Arduino / IoT: [wokwi](https://wokwi.com/) from CodeMagic\n  * CSS/HTML/JS: [CodePen](https://codepen.io/) by Chris Coyier, Alex Vasquez, and team\n  * CSS/HTML/JS: [JSFiddle](https://jsfiddle.net/) by Oskar Krawczyk and Piotr Zalewa\n  * CSS/HTML/JS: [flems](https://flems.io) by Rasmus Porsager (saves all state in the URL)\n  * regular expressions: \n    * for many languages: [regex101](https://regex101.com/) by Firas Dib\n    * for Ruby: [Rubular](https://rubular.com/) by Michael Lovitt\n    * for JS/PCRE: [regexr](https://regexr.com/) by gskinner\n    * for Python: [Pythex](https://pythex.org/) by Gabriel Rodr\u00edguez\n  * DNS: [Mess With DNS](https://messwithdns.net/) by Julia Evans and Marie Flanagan\n  * DNS: [DNS lookup tool](https://dns-lookup.jvns.ca/) by Julia Evans\n  * nginx: [nginx playground](https://nginx-playground.wizardzines.com) by Julia Evans\n  * varnish: [fastly fiddle](https://fiddle.fastly.dev/) from fastly\n  * SQLite: [sqlime](https://sqlime.org/) by Anton Zhiyanov (lets you load arbitrary SQLite databases)\n  * SQL: [DB fiddle](https://www.db-fiddle.com/) from Status200\n  * SQL: [sql playground](https://sql-playground.wizardzines.com) by Julia Evans\n  * Postgres: [postgres playground](https://www.crunchydata.com/developers/tutorials) from Crunchydata (runs postgres in the browser!)\n  * Git: [oh my git](https://ohmygit.org/) by blinry and bleeptrack\n  * .NET bytecode: [SharpLab](https://sharplab.io/) by Andrey Shchekin\n  * Python bytecode: [dis this](https://www.dis-this.com/) by Pamela Fox\n\n\n\n#### data formats\n\n  * Floating point: [Float Exposed](https://float.exposed) by Bartosz Ciechanowski\n  * Unicode: [Unicode analyzer](https://www.fontspace.com/unicode/analyzer) from fontspace\n  * Unicode: [What unicode character is this?](https://www.babelstone.co.uk/Unicode/whatisit.html) from babelstone\n  * ASN.1 certificates: [ASN.1 JavaScript debugger](https://lapo.it/asn1js/) by Lapo Luchini\n  * SVG: [sssvg (interactive SVG reference)](https://fffuel.co/sssvg/) from [fffuel](https://fffuel.co/) (lots of other cool tools there)\n  * CBOR: [CBOR playground](https://cbor.me/)\n  * JSON: [JSON editor online](https://jsoneditoronline.org/) by Jos de Jong\n  * cron: [crontab guru](https://crontab.guru/) from cronitor\n\n\n\n#### programming languages\n\n  * official playgrounds: \n    * [Go](https://go.dev/play/)\n    * [Rust](https://play.rust-lang.org/)\n    * [Ruby](https://try.ruby-lang.org/)\n    * [Typescript](https://www.typescriptlang.org/play)\n    * [Haskell](https://play.haskell.org/), [C#](https://dotnet.microsoft.com/en-us/learn/dotnet/in-browser-tutorial/1), [Elm](https://elm-lang.org/try), [Kotlin](https://play.kotlinlang.org/), [Scala](https://scastie.scala-lang.org/), [OCaml](https://ocaml.org/play), [Crystal](https://play.crystal-lang.org/), [Svelte](https://svelte.dev/repl/)\n  * unofficial playgrounds: \n    * PHP: [3v4l](https://3v4l.org/) by Sjon Hortensius\n    * Python/JS/C/C++/Java: [Python Tutor](https://pythontutor.com/) by Philip Guo\n    * Javascript: [JS Console](https://jsconsole.com/) by @rem\n    * many languages: [riju](https://riju.codes) by Radon Rosborough\n    * many languages: [replit](https://replit.com/languages/bash)\n    * others: [jqplay](https://jqplay.org/) for jq, [tryapl](https://tryapl.org/) for APL\n\n\n",
        "author": "Julia Evans"
    },
    {
        "title": "Building a custom site for zine feedback",
        "link": "https://jvns.ca/blog/2023/03/31/zine-feedback-site/",
        "updated": "2023-03-31T08:51:30+00:00",
        "id": "https://jvns.ca/blog/2023/03/31/zine-feedback-site/",
        "guidislink": false,
        "text": "\n\nHello! A few years I wrote a post called [A new way I'm getting feedback on my posts: beta readers!](https://jvns.ca/blog/2020/11/07/a-new-way-i-m-getting-feedback-on-my-zines--beta-readers-/) about how I'd started using beta readers.\n\nThe basic strategy for getting feedback there was to email people a PDF and ask for feedback. This was kind of inefficient, and so over the past couple of years, I've worked a lot with [Marie Flanagan](https://marieflanagan.com/) to improve the process. In this post we'll talk about:\n\n  * the custom site we built to handle all of the feedback\n  * how (and why) we designed that site\n  * the specific categories of feedback we ask for (and why we chose those categories)\n\n\n\nThe site isn't open source, this post is just about the process of building and using it. There are some screenshots further down.\n\nFirst, let's talk about some problems with the original process.\n\n### problem 1: managing the feedback was awkward\n\nThe original process for getting feedback from beta readers was to send an email to people asking them for feedback, and then semi-manually collate the replies.\n\nFor each comment I got, I needed to figure out whether I wanted to address it or not, and then mark it as completed once it was handled.\n\nI originally handled this by:\n\n  * making a Trello card for each page of the zine\n  * adding each comment to the Trello card for the appropriate page (either manually or with a Python script)\n  * checking off the comments when they were handled\n\n\n\nThis kind of worked, but it wasn't great. I could only ask at most 10 people for feedback because the overhead of managing all the replies was just too much for me.\n\n### problem 2: the feedback wasn't categorized\n\nThe second problem I ran into was that the feedback wasn't really categorized or tagged in any way, and this made it much harder to decide what I should do about each piece of feedback.\n\nFor example - one comment I got was \"CSS often seems random to me\". Is the person suggesting that I explain more about CSS on the page? Do they want to be convinced that CSS _isn 't_ random? Do they think CSS is a bad example of the thing I'm trying to illustrate? Are they confused about why I'm bringing up CSS at all? Without more context, it's hard to tell.\n\nThere was also lots of feedback that I could easily understand and incorporate, but I really wanted to set more guidelines so that people could give me the kind of feedback I needed.\n\n### the inspiration: Help This Book\n\nIn 2021, I read a great book called [Write Useful Books](http://writeusefulbooks.com/) by Rob Fitzpatrick. One of the main suggestions in the book was to gather feedback early and often from beta readers.\n\nBut their way to get feedback wasn't just \"email people and have them write you back!\" It came with a custom website for readers to comment on in-progress books called [Help This Book](https://helpthisbook.com/).\n\nHere's a screenshot of Help This Book, from their homepage:\n\nIn this screenshot, the reader has highlighted a sentence and is being prompted for what kind of feedback they want to provide. After they click on an icon (like \"Confusing\", they'll be able to type in their comment).\n\n### but Help This Book didn't work with images\n\nMy zines aren't text, so this kind of Google Docs-style interface where you highlight text wouldn't really work for me.\n\nSo in 2021 I asked Marie if they would help me build a custom site to collect feedback on zines, very heavily inspired by Help This Book.\n\nThe hardest parts were:\n\n  1. Deciding the categories of feedback we wanted to ask for from readers\n  2. Designing the site\n\n\n\nAs usual, actually writing the code was the easy part, so I'm not going to talk about that.\n\n### categories help guide people's feedback\n\nBefore I talk about the feedback categories we chose, I want to talk about why feedback categories are so important.\n\nIn the \"Help This Book\" interface (and in the interface of the tool we build), the categories help guide people's feedback - before someone even starts writing, they need to click on a category for the feedback.\n\nThis is helpful for a few reasons:\n\n  1. It helps remove types of feedback we don't want. For example, there's no category for \"this is a typo\", because we don't want people to point out typos - that's the copy editor's job :)\n  2. It guides people to phrase their feedback in a form that's easier to take action on. For example: \"I love this\" feedback generally doesn't require any action, but if someone says \"This is confusing\", we probably need to clarify something.\n  3. We can easily group similar kinds of feedback together and deal with them all at once. For example, if a bunch of people have left \"Confusing\" feedback on a page, we can look at that all at once.\n\n\n\n### How we started: read existing feedback\n\nWe figured out the categories by looking at feedback I'd gotten on previous zines and trying to categorize it. Here are the 5 categories we ended up with.\n\n### category 1: \"I learned something\"\n\nThe whole goal of the zines is to teach people things, so \"I learned something!\" is kind of the gold star. If we're getting this kind of feedback, we're doing our job.\n\n### category 2: \"I love this\"\n\nWe noticed a lot of feedback where the person didn't specifically say that they learned anything, but just seemed to like the page.\n\nI was originally kind of against this category (\"the point is for people to learn things!\"), but we ended up including this because there was a lot of this type of feedback and I'm super happy we did.\n\nIt's always very encouraging to see all the hearts, and usually we just take it as a signal that we should keep that page.\n\n### category 3: \"I have a question\"\n\nThe idea here is to gather specific questions about something the reader didn't understand. For example, here are some of the excellent questions readers left on early drafts of the [How DNS Works](https://wizardzines.com/zines/dns):\n\n  * what is a \"domain\"?\n  * why do we need to map a domain name to an IP address?\n  * are these _all_ the DNS record types?\n  * are the DNS query and response between resolver (function) and resolver (server) the exact same format as between resolver (server) and authoritative nameservers?\n  * do authoritative nameservers push updates to resolvers or do resolvers \"check\" frequently to update their caches?\n  * does my local computer cache DNS query responses at all?\n  * is the resolver built into the browser or is this a server the browser knows to go and query?\n\n\n\nQuestions aren't always a bad thing - sometimes the question indicates that the reader understood the topic well, is curious, and has some followup questions that are outside of the scope of the zine.\n\nBut lot of these questions were definitely questions that we wanted the zine to answer, and we mostly took them as a sign that the explanations needed to be improved.\n\n### category 4: \"I'm confused\"\n\nThis was a category we actually didn't have in our first version. But we noticed that we were getting a lot of suggestions that essentially amounted to \"I'm confused\".\n\nWhat we realized was - sometimes an explanation is _so_ confusing that the reader isn't able to formulate a specific question about what they don't understand. Figuring out a specific question is hard, especially if the explanation you're reading isn't very clear!\n\nA few great examples of \"I'm confused\" feedback on \"How DNS Works\":\n\n  * I don't get the last section in the response record, the \"glue records\"\n  * This section is over my head\u2026\n  * I would really appreciate some kind of simple index on what types of NS records exist and how they relate.\n  * I didn't see where SOA records were defined. Did I miss something earlier or later?\n  * I was confused here by the server word again, due to it being able to refer to a resolver / nameserver. In this case, server => resolver\n\n\n\nPeople also leave a lot of feedback of the form \"I was initially confused by X, but then I figured it out\", which is great.\n\n### category 5: \"I have a suggestion\"\n\nThe last category is a kind of catchall \"other\" category for anything that doesn't fit in the others. We usually ask people not to point out typos or mistakes, but sometimes people do anyway, which is fine.\n\n### we listen to learners, not experts\n\nThe goal is to get beta reader feedback from people who are trying to learn the material, not from experts.\n\nBecause of this, we'll almost always prioritize \"I'm confused\" or \"I have a question\" feedback over \"I have a suggestion\" feedback, unless the person leaving the suggestion is someone who I know and whose judgement I trust.\n\nIf beta readers are learning things and they're not too confused - we're doing our job! It's working!\n\nTechnical review and copy editing come at the end of the process, and I'm not going to talk about them in this post.\n\n### a gif of the zine feedback site\n\nHere's what the feedback site looks like as a beta reader:\n\nHere's a screenshot of all the feedback categories:\n\n### the admin interface\n\nNext, there's an admin interface where I\n\n  * check off comments as they're handled\n  * add my own comments\n\n\n\nI'm going to share a couple of examples of pages from the admin section, one where I think the feedback is more positive than the other.\n\nBoth of these pages are from a VERY early draft, and they've already been edited quite a bit :)\n\n### a \"good\" page\n\nI've blurred out all the comments, but the important thing here is the emojis: there are a couple of lightbulbs (\"I learned something!\") and a couple of hearts (\"I love this!\").\n\nEven without reading anything, this tells me that this page has some promise - there are definitely things to be improved, but people like it.\n\n### positive emojis are incredibly helpful\n\nBeing able to quickly scan through the zine and say \"okay, this has 10 hearts and 7 lightbulbs, obviously people love this page\" is amazing: it makes it really easy to tell when a page is working.\n\nThis is good because:\n\n  * it tells us what we _don 't_ need to work on\n  * it's motivating (\"we're getting somewhere! people like this!\")\n\n\n\n### a \"bad\" page\n\nNext, here's an example of another page in the admin interface where things aren't going so well.\n\nYou'll notice this page only has question marks and suggestions. (the ones in purple are comments that I wrote, the ones in blue are from readers)\n\nThe comments are blurred out, but several of them are about how the Rust panel seems arbitrary. That was something I kind of knew already, but hearing it from readers is really helpful and helps me know that I should prioritize fixing it.\n\n### confusion emojis are also super helpful\n\nIf we see a lot of \"I'm confused\" and \"I have a suggestion\" emojis on a page, that's also very useful!\n\nSometimes we'll react to that by totally rewriting or deleting a page, and then doing another round of feedback to see if the problems have been fixed.\n\n\"I have a question\" emojis aren't always a bad thing - sometimes the question indicates that the reader understood the topic well, is curious, and has some followup questions that are outside of the scope of the zine.\n\n### pages with no feedback\n\nThere are usually one or two pages that get no comments at all from beta readers. A couple of ways we handle this:\n\n  * ask a trusted friend for their take on the page\n  * post it to Mastodon or Twitter and see what the comments are like\n  * follow our gut (\"no, I think this is important, let's keep it\")\n\n\n\n## overall feedback\n\nReaders can also enter overall feedback at the end. Here's what that looks like in the admin interface (again blurred out).\n\nThis is a super useful section - sometimes people will leave comments here like \"I didn't really understand X\", and it'll make it clear that we really need to improve the explanation of X.\n\n### the tech stack\n\nI said earlier that writing the code was the easy part so I won't talk about the code too much. Here are a few facts about the tech stack though. It has:\n\n  * a Go backend (which becomes a static binary)\n  * a SQLite database\n  * a Vue.js frontend\n  * a DigitalOcean server\n\n\n\nsome more notes on how it works:\n\n  * all of the zine pages are committed into the Git repository and compiled into the Go binary. (It might be smarter to store them in the database instead, but I didn't do that, maybe one day!)\n  * the pages are password-protected, and I email people the password when I ask them for feedback\n  * when I want to deploy, I rebuild the Go binary locally (using [tinybuild](https://github.com/jvns/tinybuild)), scp it to the DigitalOcean server, and restart the systemd process.\n\n\n\nIt's not open source and nobody else can use it because it's very heavily customized to my use case, completely undocumented, and I made the questionable design choice to store all of the zine pages in the git repository :). I occasionally think about improving it so that other people can use it, but I think there's a strong change I will never feel motivated to do that.\n\n### having a dedicated site for feedback has made a huge difference\n\nWe originally built this site in summer 2021, and so far have used it for [How DNS Works](https://wizardzines.com/zines/dns/), [The Pocket Guide to Debugging](https://wizardzines.com/zines/debugging-guide/), and the currently-in-progress zine on how computers represent data in binary in memory.\n\nIt's made it possible to get feedback from dozens of people instead of just 3 or 4, and I think it's really improved the zines' quality.\n",
        "author": "Julia Evans"
    },
    {
        "title": "Some possible reasons for 8-bit bytes",
        "link": "https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/",
        "updated": "2023-03-07T06:51:58+00:00",
        "id": "https://jvns.ca/blog/2023/03/06/possible-reasons-8-bit-bytes/",
        "guidislink": false,
        "text": "\n\nI've been working on a zine about how computers represent thing in binary, and one question I've gotten a few times is - why does the x86 architecture use 8-bit bytes? Why not some other size?\n\nWith any question like this, I think there are two options:\n\n  1. It's a historical accident, another size (like 4 or 6 or 16 bits) would work just as well\n  2. 8 bits is objectively the Best Option for some reason, even if history had played out differently we would still use 8-bit bytes\n  3. some mix of 1 & 2\n\n\n\nI'm not super into computer history (I like to use computers a lot more than I like reading about them), but I am always curious if there's an essential reason for why a computer thing is the way it is today, or whether it's mostly a historical accident. So we're going to talk about some computer history.\n\nAs an example of a historical accident: DNS has a `class` field which has 5 possible values (\"internet\", \"chaos\", \"hesiod\", \"none\", and \"any\"). To me that's a clear example of a historical accident - I can't imagine that we'd define the class field the same way if we could redesign DNS today without worrying about backwards compatibility. I'm not sure if we'd use a class field at all!\n\nThere aren't any definitive answers in this post, but I asked [on Mastodon](https://social.jvns.ca/@b0rk/109976810279702728) and here are some potential reasons I found for the 8-bit byte. I think the answer is some combination of these reasons.\n\n### what's the difference between a byte and a word?\n\nFirst, this post talks about \"bytes\" and \"words\" a lot. What's the difference between a byte and a word? My understanding is:\n\n  * the **byte size** is the smallest unit you can address. For example in a program on my machine `0x20aa87c68` might be the address of one byte, then `0x20aa87c69` is the address of the next byte.\n  * The **word size** is some multiple of the byte size. I've been confused about this for years, and the Wikipedia definition is incredibly vague (\"a word is the natural unit of data used by a particular processor design\"). I originally thought that the word size was the same as your register size (64 bits on x86-64). But according to section 4.1 (\"Fundamental Data Types\") of the [Intel architecture manual](https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html), on x86 a word is 16 bits even though the registers are 64 bits. So I'm confused - is a word on x86 16 bits or 64 bits? Can it mean both, depending on the context? What's the deal?\n\n\n\nNow let's talk about some possible reasons that we use 8-bit bytes!\n\n### reason 1: to fit the English alphabet in 1 byte\n\n[This Wikipedia article](https://en.wikipedia.org/wiki/IBM_System/360) says that the IBM System/360 introduced the 8-bit byte in 1964.\n\nHere's a [video interview with Fred Brooks (who managed the project)](https://www.youtube.com/watch?v=9oOCrAePJMs&t=140s) talking about why. I've transcribed some of it here:\n\n> \u2026 the six bit bytes [are] really better for scientific computing and the 8-bit byte ones are really better for commercial computing and each one can be made to work for the other. So it came down to an executive decision and I decided for the 8-bit byte, Jerry's proposal.\n> \n> [\u2026.]\n> \n> My most important technical decision in my IBM career was to go with the 8-bit byte for the 360. And on the basis of I believe character processing was going to become important as opposed to decimal digits.\n\nIt makes sense that an 8-bit byte would be better for text processing: 2^6 is 64, so 6 bits wouldn't be enough for lowercase letters, uppercase letters, and symbols.\n\nTo go with the 8-bit byte, System/360 also introduced the [EBCDIC](https://en.wikipedia.org/wiki/EBCDIC) encoding, which is an 8-bit character encoding.\n\nIt looks like the next important machine in 8-bit-byte history was the [Intel 8008](https://en.wikipedia.org/wiki/Intel_8008), which was built to be used in a computer terminal (the Datapoint 2200). Terminals need to be able to represent letters as well as terminal control codes, so it makes sense for them to use an 8-bit byte. [This Datapoint 2200 manual from the Computer History Museum](https://archive.computerhistory.org/resources/text/2009/102683240.05.02.acc.pdf) says on page 7 that the Datapoint 2200 supported ASCII (7 bit) and EBCDIC (8 bit).\n\n### why was the 6-bit byte better for scientific computing?\n\nI was curious about this comment that the 6-bit byte would be better for scientific computing. Here's a quote from [this interview from Gene Amdahl](https://archive.computerhistory.org/resources/access/text/2013/05/102702492-05-01-acc.pdf):\n\n> I wanted to make it 24 and 48 instead of 32 and 64, on the basis that this would have given me a more rational floating point system, because in floating point, with the 32-bit word, you had to keep the exponent to just 8 bits for exponent sign, and to make that reasonable in terms of numeric range it could span, you had to adjust by 4 bits instead of by a single bit. And so it caused you to lose some of the information more rapidly than you would with binary shifting\n\nI don't understand this comment at all - why does the exponent have to be 8 bits if you use a 32-bit word size? Why couldn't you use 9 bits or 10 bits if you wanted? But it's all I could find in a quick search.\n\n### why did mainframes use 36 bits?\n\nAlso related to the 6-bit byte: a lot of mainframes used a 36-bit word size. Why? Someone pointed out that there's a great explanation in the Wikipedia article on [36-bit computing](https://en.wikipedia.org/wiki/36-bit_computing):\n\n> Prior to the introduction of computers, the state of the art in precision scientific and engineering calculation was the ten-digit, electrically powered, mechanical calculator\u2026 These calculators had a column of keys for each digit, and operators were trained to use all their fingers when entering numbers, so while some specialized calculators had more columns, ten was a practical limit\n> \n> Early binary computers aimed at the same market therefore often used a 36-bit word length. This was long enough to represent positive and negative integers to an accuracy of ten decimal digits (35 bits would have been the minimum)\n\nSo this 36 bit thing seems to based on the fact that log_2(20000000000) is 34.2. Huh.\n\nMy guess is that the reason for this is in the 50s, computers were extremely expensive. So if you wanted your computer to support ten decimal digits, you'd design so that it had exactly enough bits to do that, and no more.\n\nToday computers are way faster and cheaper, so if you want to represent ten decimal digits for some reason you can just use 64 bits - wasting a little bit of space is usually no big deal.\n\nSomeone else mentioned that some of these machines with 36-bit word sizes let you choose a byte size - you could use 5 or 6 or 7 or 8-bit bytes, depending on the context.\n\n### reason 2: to work well with binary-coded decimal\n\nIn the 60s, there was a popular integer encoding called binary-coded decimal (or [BCD](https://en.wikipedia.org/wiki/Binary-coded_decimal) for short) that encoded every decimal digit in 4 bits.\n\nFor example, if you wanted to encode the number 1234, in BCD that would be something like:\n[code] \n    0001 0010 0011 0100\n    \n[/code]\n\nSo if you want to be able to easily work with binary-coded decimal, your byte size should be a multiple of 4 bits, like 8 bits!\n\n### why was BCD popular?\n\nThis integer representation seemed really weird to me - why not just use binary, which is a much more efficient way to store integers? Efficiency was really important in early computers!\n\nMy best guess about why is that early computers didn't have displays the same way we do now, so the contents of a byte were mapped directly to on/off lights.\n\nHere's a [picture from Wikipedia of an IBM 650 with some lights on its display](https://commons.wikimedia.org/wiki/File:IBM-650-panel.jpg) ([CC BY-SA 3.0](http://creativecommons.org/licenses/by-sa/3.0/)):\n\nSo if you want people to be relatively able to easily read off a decimal number from its binary representation, this makes a lot more sense. I think today BCD is obsolete because we have displays and our computers can convert numbers represented in binary to decimal for us and display them.\n\nAlso, I wonder if BCD is where the term \"nibble\" for 4 bits comes from - in the context of BCD, you end up referring to half bytes a lot (because every digits is 4 bits). So it makes sense to have a word for \"4 bits\", and people called 4 bits a nibble. Today \"nibble\" feels to me like an archaic term though - I've definitely never used it except as a fun fact (it's such a fun word!). The Wikipedia article on [nibbles](https://en.wikipedia.org/wiki/Nibble) supports this theory:\n\n> The nibble is used to describe the amount of memory used to store a digit of a number stored in packed decimal format (BCD) within an IBM mainframe.\n\nAnother reason someone mentioned for BCD was **financial calculations**. Today if you want to store a dollar amount, you'll typically just use an integer amount of cents, and then divide by 100 if you want the dollar part. This is no big deal, division is fast. But apparently in the 70s dividing an integer represented in binary by 100 was very slow, so it was worth it to redesign how you represent your integers to avoid having to divide by 100.\n\nOkay, enough about BCD.\n\n### reason 3: 8 is a power of 2?\n\nA bunch of people said it's important for a CPU's byte size to be a power of 2. I can't figure out whether this is true or not though, and I wasn't satisfied with the explanation that \"computers use binary so powers of 2 are good\". That seems very plausible but I wanted to dig deeper. And historically there have definitely been lots of machines that used byte sizes that weren't powers of 2, for example (from [this retro computing stack exchange thread](https://retrocomputing.stackexchange.com/questions/7937/last-computer-not-to-use-octets-8-bit-bytes)):\n\n  * Cyber 180 mainframes used 6-bit bytes\n  * the Univac 1100 / 2200 series used a 36-bit word size\n  * the PDP-8 was a 12-bit machine\n\n\n\nSome reasons I heard for why powers of 2 are good that I haven't understood yet:\n\n  * every bit in a word needs a bus, and you want the number of buses to be a power of 2 (why?)\n  * a lot of circuit logic is susceptible to divide-and-conquer techniques (I think I need an example to understand this)\n\n\n\nReasons that made more sense to me:\n\n  * it makes it easier to design **clock dividers** that can measure \"8 bits were sent on this wire\" that work based on halving - you can put 3 halving clock dividers in series. [Graham Sutherland](https://poly.nomial.co.uk/) told me about this and made this really cool [simulator of clock dividers](https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWcMBMcUHYMGZIA4UA2ATmIxAUgpABZsKBTAWjDACgwEknsUQ08tQQKgU2AdxA8+I6eAyEoEqb3mK8VMAqWSNakHsx9Iywxj6Ea-c0oBKUy-xpUWYGc-D9kcftCQo-URgEZRQERSMnKkiTSTDFLQjw62NlMBorRP5krNjwDP58fMztE04kdKsRFBQqoqoQyUcRVhl6tLdCwVaonXBO2s0Cwb6UPGEPXmiPPLHhIrne2Y9q8a6lcpAp9edo+r7tkW3c5WPtOj4TyQv9G5jlO5saMAibPOeIoppm9oAPEEU2C0-EBaFoThAAHoUGx-mA8FYgfNESgIFUrNDYVtCBBttg8LiUPR0VCYWhyD0Wp0slYACIASQAamTIORFqtuucQAzGTQ2OTaD9BN8Soo6Uy8PzWQ46oImI4aSB6QA5ZTy9EuVQjPLq3q6kQmAD21Beome0qQMHgkDIhHCYVEfCQ9BVbGNRHAiio5vIltg8Ft9stXg99B5MPdFK9tDAFqg-rggcIDui1i23KZfPd3WjPuoVoDCiDjv4gjDErYQA) showing what these clock dividers look like. That site (Falstad) also has a bunch of other example circuits and it seems like a really cool way to make circuit simulators.\n  * if you have an instruction that zeroes out a specific bit in a byte, then if your byte size is 8 (2^3), you can use just 3 bits of your instruction to indicate which bit. x86 doesn't seem to do this, but the [Z80's bit testing instructions](http://www.chebucto.ns.ca/~af380/z-80-h.htm) do.\n  * someone mentioned that some processors use [Carry-lookahead adders](https://en.wikipedia.org/wiki/Carry-lookahead_adder), and they work in groups of 4 bits. From some quick Googling it seems like there are a wide variety of adder circuits out there though.\n  * **bitmaps** : Your computer's memory is organized into pages (usually of size 2^n). It needs to keep track of whether every page is free or not. Operating systems use a bitmap to do this, where each bit corresponds to a page and is 0 or 1 depending on whether the page is free. If you had a 9-bit byte, you would need to divide by 9 to find the page you're looking for in the bitmap. Dividing by 9 is slower than dividing by 8, because dividing by powers of 2 is always the fastest thing.\n\n\n\nI probably mangled some of those explanations pretty badly: I'm pretty far out of my comfort zone here. Let's move on.\n\n### reason 4: small byte sizes are good\n\nYou might be wondering - well, if 8-bit bytes were better than 4-bit bytes, why not keep increasing the byte size? We could have 16-bit bytes!\n\nA couple of reasons to keep byte sizes small:\n\n  1. It's a waste of space - a byte is the minimum unit you can address, and if your computer is storing a lot of ASCII text (which only needs 7 bits), it would be a pretty big waste to dedicate 12 or 16 bits to each character when you could use 8 bits instead.\n  2. As bytes get bigger, your CPU needs to get more complex. For example you need one bus line per bit. So I guess simpler is better.\n\n\n\nMy understanding of CPU architecture is extremely shaky so I'll leave it at that. The \"it's a waste of space\" reason feels pretty compelling to me though.\n\n### reason 5: compatibility\n\nThe Intel 8008 (from 1972) was the precursor to the 8080 (from 1974), which was the precursor to the 8086 (from 1976) - the first x86 processor. It seems like the 8080 and the 8086 were really popular and that's where we get our modern x86 computers.\n\nI think there's an \"if it ain't broke don't fix it\" thing going on here - I assume that 8-bit bytes were working well, so Intel saw no need to change the design. If you keep the same 8-bit byte, then you can reuse more of your instruction set.\n\nAlso around the 80s we start getting network protocols like TCP which use 8-bit bytes (usually called \"octets\"), and if you're going to be implementing network protocols, you probably want to be using an 8-bit byte.\n\n### that's all!\n\nIt seems to me like the main reasons for the 8-bit byte are:\n\n  1. a lot of early computer companies were American, the most commonly used language in the US is English\n  2. those people wanted computers to be good at text processing\n  3. smaller byte sizes are in general better\n  4. 7 bits is the smallest size you can fit all English characters + punctuation in\n  5. 8 is a better number than 7 (because it's a power of 2)\n  6. once you have popular 8-bit computers that are working well, you want to keep the same design for compatibility\n\n\n\nSomeone pointed out that [page 65 of this book from 1962](https://web.archive.org/web/20170403014651/http://archive.computerhistory.org/resources/text/IBM/Stretch/pdfs/Buchholz_102636426.pdf) talking about IBM's reasons to choose an 8-bit byte basically says the same thing:\n\n>   1. Its full capacity of 256 characters was considered to be sufficient for the great majority of applications.\n>   2. Within the limits of this capacity, a single character is represented by a single byte, so that the length of any particular record is not dependent on the coincidence of characters in that record.\n>   3. 8-bit bytes are reasonably economical of storage space\n>   4. For purely numerical work, a decimal digit can be represented by only 4 bits, and two such 4-bit bytes can be packed in an 8-bit byte. Although such packing of numerical data is not essential, it is a common practice in order to increase speed and storage efficiency. Strictly speaking, 4-bit bytes belong to a different code, but the simplicity of the 4-and-8-bit scheme, as compared with a combination 4-and-6-bit scheme, for example, leads to simpler machine design and cleaner addressing logic.\n>   5. Byte sizes of 4 and 8 bits, being powers of 2, permit the computer designer to take advantage of powerful features of binary addressing and indexing to the bit level (see Chaps. 4 and 5 ) .\n> \n\n\nOverall this makes me feel like an 8-bit byte is a pretty natural choice if you're designing a binary computer in an English-speaking country.\n",
        "author": "Julia Evans"
    },
    {
        "title": "How do Nix builds work?",
        "link": "https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/",
        "updated": "2023-03-03T11:19:25+00:00",
        "id": "https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/",
        "guidislink": false,
        "text": "\n\nHello! For some reason after the last [nix post](https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/) I got nerdsniped by trying to understand how Nix builds work under the hood, so here's a quick exploration I did today. There are probably some mistakes in here.\n\nI started by [complaining on Mastodon](https://social.jvns.ca/@b0rk/109954253779465018):\n\n> are there any guides to nix that start from the bottom up (for example starting with [this bash script](https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/generic/setup.sh) and then working up the layers of abstraction) instead of from the top down?\n> \n> all of the guides I've seen start by describing the nix programming language or other abstractions, and I'd love to see a guide that starts with concepts I already understand like compiler flags, linker flags, Makefiles, environment variables, and bash scripts\n\nRoss Light wrote a great blog post in response called [Connecting Bash to Nix](https://www.zombiezen.com/blog/2023/03/connecting-bash-to-nix/), that shows how to compile a basic C program without using most of Nix's standard machinery.\n\nI wanted to take this a tiny bit further and compile a slightly more complicated C program.\n\n### the goal: compile a C program, without using Nix's standard machinery\n\nOur goal is to compile a C program called `paperjam`. This is a real C program that wasn't in the Nix repository already. I already figured out how to compile it in [this post](https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/) by copying and pasting a bunch of stuff I didn't understand, but this time I wanted to do it in a more principled way where I actually understand more of the steps.\n\nWe're going to avoid using most of Nix's helpers for compiling C programs.\n\nThe plan is to start with an almost empty build script, and then resolve errors until we have a working build.\n\n### first: what's a derivation?\n\nI said that we weren't going to talk about too many Nix abstractions (and we won't!), but understanding what a derivation is really helped me.\n\nEverything I read about Nix talks about derivations all the time, but I was really struggling to figure out what a derivation _is_. It turns out that `derivation` is a function in the Nix language. But not just any function! The whole point of the Nix language seems to be to to call this function. The [official documentation for the `derivation` function](https://nixos.org/manual/nix/stable/language/derivations.html) is actually extremely clear. Here's what I took away:\n\n`derivation` takes a bunch of keys and values as input. There are 3 required keys:\n\n  1. `system`: the system, for example `x86_64-darwin`\n  2. `name`: the name of the package you're building\n  3. `builder`: a program (usually a bash script) that runs the build\n\n\n\nEvery other key is an arbitrary string that gets passed as an environment variable to the `builder` shell script.\n\n### derivations automatically build all their inputs\n\nA derivation doesn't just call a shell script though! Let's say I reference another derivation called `pkgs.qpdf` in my script.\n\nNix will:\n\n  * automatically build the `qpdf` package\n  * put the resulting output directory somewhere like `/nix/store/4garxzr1rpdfahf374i9p9fbxnx56519-qpdf-11.1.0`\n  * expand `pkgs.qpdf` into that output directory (as a string), so that I can reference it in my build script\n\n\n\nThe derivation function does some other things (described in the [documentation](https://nixos.org/manual/nix/stable/language/derivations.html)), but \"it builds all of its inputs\" is all we really need to know for now.\n\n### step 1: write a derivation file\n\nLet's write a very simple build script and call the `derivation` function. These don't work yet, but I found it pretty fun to go through all the errors, fix them one at a time, and learn a little more about how Nix works by fixing them.\n\nHere's the build script (`build_paperjam.sh`). This just unpacks the tarball and runs `make install`.\n[code] \n    #!/bin/bash\n    \n    tar -xf \"$SOURCE\"\n    cd paperjam-1.2 \n    make install\n    \n[/code]\n\nAnd here's the Nix code calling the `derivation` function (in `paperjam.nix`). This calls the core `derivation` function, without too much magic.\n[code] \n    let pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/4d2b37a84fad1091b9de401eb450aae66f1a741e.tar.gz\") {};\n    \n    builtins.derivation {\n      name = \"paperjam-fake\";\n      builder = ./build-paperjam.sh;\n      system = builtins.currentSystem;\n    \n      SOURCE = pkgs.fetchurl {\n        url = \"https://mj.ucw.cz/download/linux/paperjam-1.2.tar.gz\";\n        hash = \"sha256-0AziT7ROICTEPKaA4Ub1B8NtIfLmxRXriW7coRxDpQ0\";\n      };\n    \n    }\n    \n[/code]\n\nThe main things here are:\n\n  * `fetchurl` (which downloads an url and puts the path in to the `SOURCE` environment variable)\n  * `pkgs` (which lets us depend on other Nix packages from the central repository). I don't totally understand this but I'm already in a pretty deep rabbit hole so we're going to leave that for now.\n\n\n\n`SOURCE` evaluates to a string - it's the path to the downloaded source tarball.\n\n### problem 1: `tar: command not found`\n\nNix needs you to declare all the dependencies for your builds. It forces this by removing your `PATH` environment variable so that you have no binaries in your PATH at all.\n\nThis is pretty easy to fix: we just need to edit our `PATH`.\n\nI added this to `paperjam.nix` to get `tar`, `gzip`, and `make`:\n[code] \n      PATH = \"${pkgs.gzip}/bin:${pkgs.gnutar}/bin:${pkgs.gnumake}/bin\";\n    \n[/code]\n\n### problem 2: we need a compiler\n\nNext, we had this error:\n[code] \n    g++ -O2 -Wall -Wextra -Wno-parentheses -std=gnu++11 -g -DVERSION='\"1.2\"' -DYEAR='\"2022\"' -DBUILD_DATE='\"\"' -DBUILD_COMMIT='\"\"'   -c -o paperjam.o paperjam.cc\n    make: g++: No such file or directory\n    \n[/code]\n\nSo we need to put a compiler in our PATH. For some reason I felt like using `clang++` to compile, not `g++`. To do that I need to make 2 changes to `paperjam.nix`:\n\n  1. Add the line `CXX=\"clang++\";`\n  2. Add `${pkgs.clang}/bin` to my `PATH`\n\n\n\n### problem 3: missing header files\n\nThe next error was:\n[code] \n     > ./pdf-tools.h:13:10: fatal error: 'qpdf/QPDF.hh' file not found\n     > #include <qpdf/QPDF.hh>\n    \n[/code]\n\nMakes sense: everything is isolated, so it can't access my system header files. Figuring out how to handle this was a little more confusing though.\n\nIt turns out that the way Nix handles header files is that it has a shell script wrapper around `clang`. So when you run `clang++`, you're actually running a shell script.\n\nOn my system, the `clang++` wrapper script was at `/nix/store/d929v59l9a3iakvjccqpfqckqa0vflyc-clang-wrapper-11.1.0/bin/clang++`. I searched that file for `LDFLAGS` and found that it uses 2 environment variables:\n\n  1. `NIX_LDFLAGS_aarch64_apple_darwin`\n  2. `NIX_CFLAGS_COMPILE_aarch64_apple_darwin`\n\n\n\nSo I figured I needed to put all the arguments to clang in the `NIX_CFLAGS` variable and all the linker arguments in `NIX_LDFLAGS`. Great! Let's do that.\n\nI added these 2 lines to my `paperjam.nix`, to link the `libpaper` and `qpdf` libraries:\n[code] \n    NIX_LDFLAGS_aarch64_apple_darwin = \"-L ${pkgs.qpdf}/lib   -L ${pkgs.libpaper}/lib\";\n    NIX_CFLAGS_COMPILE_aarch64_apple_darwin = \"-isystem ${pkgs.qpdf}/include   -isystem ${pkgs.libpaper}/include\";\n    \n[/code]\n\nAnd that worked!\n\n### problem 4: missing `c++abi`\n\nThe next error was:\n[code] \n    > ld: library not found for -lc++abi\n    \n[/code]\n\nNot sure what this means, but I searched for \"abi\" in the Nix packages and fixed it by adding `-L ${pkgs.libcxxabi}/lib` to my `NIX_LDFLAGS` environment variable.\n\n### problem 5: missing iconv\n\nHere's the next error:\n[code] \n    > Undefined symbols for architecture arm64:\n    >   \"_iconv\", referenced from: ...\n    \n[/code]\n\nI started by adding `-L ${pkgs.libiconv}/lib` to my `NIX_LDFLAGS` environment variable, but that didn't fix it. Then I spent a while going around in circles and being confused.\n\nI eventually figured out how to fix this by taking a working version of the `paperjam` build that I'd made before and editing my `clang++` wrapper file to print out all of its environment variables. The `LDFLAGS` environment variable in the working version was different from mine: it had `-liconv` in it.\n\nSo I added `-liconv` to `NIX_LDFLAGS` as well and that fixed it.\n\n### why doesn't the original Makefile have `-liconv`?\n\nI was a bit puzzled by this `-liconv` thing though: the original Makefile links in `libqpdf` and `libpaper` by passing `-lqpdf -lpaper`. So why doesn't it link in iconv, if it requires the iconv library?\n\nI think the reason for this is that the original Makefile assumed that you were running on Linux and using glibc, and glibc includes these iconv functions by default. But I guess Mac OS libc doesn't include iconv, so we need to explicitly set the linker flag `-liconv` to add the iconv library.\n\n### problem 6: missing `codesign_allocate`\n\nTime for the next error:\n[code] \n    libc++abi: terminating with uncaught exception of type std::runtime_error: Failed to spawn codesign_allocate: No such file or directory\n    \n[/code]\n\nI guess this is some kind of Mac code signing thing. I used `find /nix/store -name codesign_allocate` to find `codesign_allocate` on my system. It's at `/nix/store/a17dwfwqj5ry734zfv3k1f5n37s4wxns-cctools-binutils-darwin-973.0.1/bin/codesign_allocate`.\n\nBut this doesn't tell us what the package is called - we need to be able to refer to it as `${pkgs.XXXXXXX}` and `${pkgs.cctools-binutils-darwin}` doesn't work.\n\nI couldn't figure out a way go from a Nix folder to the name of the package, but I ended up poking around and finding out that it was called `pkgs.darwin.cctools`.\n\nSo I added `${pkgs.darwin.cctools}/bin` to the `PATH`.\n\n### problem 7: missing `a2x`\n\nEasy, just add `${pkgs.asciidoc}/bin` to the `PATH`.\n\n#### problem 8: missing `install`\n[code] \n    make: install: No such file or directory\n    \n[/code]\n\nApparently `install` is a program? This turns out to be in `coreutils`, so we add `${pkgs.coreutils}/bin` to the `PATH`. Adding `coreutils` also fixes some other warnings I was seeing about missing commands like `date`.\n\n### problem 9: can't create /usr/local/bin/paperjam\n\nThis took me a little while to figure out because I'm not very familiar with make. The Makefile has a `PREFIX` of `/usr/local`, but we want it to be the program's output directory in `/nix/store/`\n\nI edited the `build-paperjam.sh` shell script to say:\n[code] \n    make install PREFIX=\"$out\"\n    \n[/code]\n\nand everything worked! Hooray!\n\n### our final configuration\n\nHere's the final `paperjam.nix`. It's not so different from what we started with - we just added 4 environment variables.\n[code] \n    let pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/ae8bdd2de4c23b239b5a771501641d2ef5e027d0.tar.gz\") {};\n    in\n    \n    builtins.derivation {\n      name = \"paperjam-fake\";\n      builder = ./build-paperjam.sh;\n      system = builtins.currentSystem;\n    \n      SOURCE = pkgs.fetchurl {\n        url = \"https://mj.ucw.cz/download/linux/paperjam-1.2.tar.gz\";\n        hash = \"sha256-0AziT7ROICTEPKaA4Ub1B8NtIfLmxRXriW7coRxDpQ0\";\n      };\n    \n      CXX=\"clang++\";\n      PATH = \"${pkgs.gzip}/bin:${pkgs.gnutar}/bin:${pkgs.gnumake}/bin:${pkgs.clang}/bin:${pkgs.darwin.cctools}/bin:${pkgs.asciidoc}/bin:${pkgs.coreutils}/bin:${pkgs.bash}/bin\";\n      NIX_LDFLAGS_aarch64_apple_darwin = \"-L ${pkgs.qpdf}/lib   -L ${pkgs.libpaper}/lib -L ${pkgs.libcxxabi}/lib -liconv -L ${pkgs.libiconv}/lib \";\n      NIX_CFLAGS_COMPILE_aarch64_apple_darwin = \"-isystem ${pkgs.qpdf}/include   -isystem ${pkgs.libpaper}/include\";\n    }\n    \n[/code]\n\nAnd here's the final `build-paperjam.sh` build script. Here we just needed to edit the `make install` line to set the `PREFIX`.\n[code] \n    #!/bin/bash\n    \n    tar -xf \"$SOURCE\"\n    cd paperjam-1.2\n    make install PREFIX=\"$out\"\n    \n[/code]\n\n### let's look at our compiled derivation!\n\nNow that we understand this configuration a little better, let's talk about what `nix-build` is doing a little more.\n\nBehind the scenes, `nix-build paperjam.nix` actually runs `nix-instantiate` and `nix-store --realize`:\n[code] \n    $ nix-instantiate paperjam.nix\n    /nix/store/xp8kibpll55s0bm40wlpip51y7wnpfs0-paperjam-fake.drv\n    $ nix-store --realize /nix/store/xp8kibpll55s0bm40wlpip51y7wnpfs0-paperjam-fake.drv\n    \n[/code]\n\nI think what this means is that `paperjam.nix` get compiled to some intermediate representation (also called a derivation?), and then the Nix runtime takes over and is in charge of actually running the build scripts.\n\nWe can look at this `.drv` intermediate representation with `nix show-derivation`\n[code] \n    {\n      \"/nix/store/xp8kibpll55s0bm40wlpip51y7wnpfs0-paperjam-fake.drv\": {\n        \"outputs\": { \"out\": { \"path\": \"/nix/store/bcnyqizvcysqc1vy382wfx015mmwn3bd-paperjam-fake\" }\n        },\n        \"inputSrcs\": [ \"/nix/store/pbjj91f0qr8g14k58m744wdl9yvr2f5k-build-paperjam.sh\" ],\n        \"inputDrvs\": {\n          \"/nix/store/38sikqcggyishxbgi2xnyrdsnq928gqx-asciidoc-10.2.0.drv\": [ \"out\" ],\n          \"/nix/store/3llc749f9pn0amlb9vgwsi22hin7kmz4-libcxxabi-11.1.0.drv\": [ \"out\" ],\n          \"/nix/store/a8ny8lrbpyn15wdxk3v89f4bdr08a38a-libpaper-1.1.28.drv\": [ \"out\" ],\n          \"/nix/store/d888pj9lll12s5qx11v850g1vd4h3vxq-cctools-port-973.0.1.drv\": [ \"out\" ],\n          \"/nix/store/gkpdv7xl39x9yxch0wjarq19mmv7j1pm-bash-5.2-p15.drv\": [ \"out\" ],\n          \"/nix/store/hwx16m7hmkp2rcik8h67nnyjp52zj849-gnutar-1.34.drv\": [ \"out\" ],\n          \"/nix/store/kqqwffajj24fmagxqps3bjcbrglbdryg-gzip-1.12.drv\": [ \"out\" ],\n          \"/nix/store/lnrxa45bza18dk8qgqjayqb65ilfvq2n-qpdf-11.2.0.drv\": [ \"out\" ],\n          \"/nix/store/rx7a5401h44dqsasl5g80fl25jqqih8r-gnumake-4.4.drv\": [ \"out\" ],\n          \"/nix/store/sx8blaza5822y51abdp3353xkdcbkpkb-coreutils-9.1.drv\": [ \"out\" ],\n          \"/nix/store/v3b7r7a8ipbyg9wifcqisf5vpy0c66cs-clang-wrapper-11.1.0.drv\": [ \"out\" ],\n          \"/nix/store/wglagz34w1jnhr4xrfdk0g2jghbk104z-paperjam-1.2.tar.gz.drv\": [ \"out\" ],\n          \"/nix/store/y9mb7lgqiy38fbi53m5564bx8pl1arkj-libiconv-50.drv\": [ \"out\" ]\n        },\n        \"system\": \"aarch64-darwin\",\n        \"builder\": \"/nix/store/pbjj91f0qr8g14k58m744wdl9yvr2f5k-build-paperjam.sh\",\n        \"args\": [],\n        \"env\": {\n          \"CXX\": \"clang++\",\n          \"NIX_CFLAGS_COMPILE_aarch64_apple_darwin\": \"-isystem /nix/store/h25d99pd3zln95viaybdfynfq82r2dqy-qpdf-11.2.0/include   -isystem /nix/store/agxp1hx267qk1x79dl4jk1l5cg79izv1-libpaper-1.1.28/include\",\n          \"NIX_LDFLAGS_aarch64_apple_darwin\": \"-L /nix/store/h25d99pd3zln95viaybdfynfq82r2dqy-qpdf-11.2.0/lib   -L /nix/store/agxp1hx267qk1x79dl4jk1l5cg79izv1-libpaper-1.1.28/lib -L /nix/store/awkb9g93ci2qy8yg5jl0zxw46f3xnvgv-libcxxabi-11.1.0/lib -liconv -L /nix/store/nmphpbjn8hhq7brwi9bw41m7l05i636h-libiconv-50/lib \",\n          \"PATH\": \"/nix/store/90cqrp3nxbcihkx4vswj5wh85x5klaga-gzip-1.12/bin:/nix/store/siv9312sgiqwsjrdvj8lx0mr3dsj3nf5-gnutar-1.34/bin:/nix/store/yy3fdgrshcblwx0cfp76nmmi24szw89q-gnumake-4.4/bin:/nix/store/cqag9fv2gia03nzcsaygan8fw1ggdf4g-clang-wrapper-11.1.0/bin:/nix/store/f16id36r9xxi50mgra55p7cf7ra0x96k-cctools-port-973.0.1/bin:/nix/store/x873pgpwqxkmyn35jvvfj48ccqav7fip-asciidoc-10.2.0/bin:/nix/store/vhivi799z583h2kf1b8lrr72h4h3vfcx-coreutils-9.1/bin:/nix/store/0q1jfjlwr4vig9cz7lnb5il9rg0y1n84-bash-5.2-p15/bin\",\n          \"SOURCE\": \"/nix/store/6d2fcw88d9by4fz5xa9gdpbln73dlhdk-paperjam-1.2.tar.gz\",\n          \"builder\": \"/nix/store/pbjj91f0qr8g14k58m744wdl9yvr2f5k-build-paperjam.sh\",\n          \"name\": \"paperjam-fake\",\n          \"out\": \"/nix/store/bcnyqizvcysqc1vy382wfx015mmwn3bd-paperjam-fake\",\n          \"system\": \"aarch64-darwin\"\n        }\n      }\n    }\n    \n[/code]\n\nThis feels surprisingly easy to understand - you can see that there are a bunch of environment variables, our bash script, and the paths to our inputs.\n\n### the compilation helpers we're not using: `stdenv`\n\nNormally when you build a package with Nix, you don't do all of this stuff yourself. Instead, you use a helper called `stdenv`, which seems to have two parts:\n\n  1. a function called `stdenv.mkDerivation` which takes some arguments and generates a bunch of environment variables (it seems to be [documented here](https://nixos.org/manual/nixpkgs/stable/#chap-stdenv))\n  2. a 1600-line bash build script ([setup.sh](https://github.com/NixOS/nixpkgs/blob/fc2bfe1cdc910104e6df52c5dc449e8f855c66b7/pkgs/stdenv/generic/setup.sh)) that consumes those environment variables. This is like our `build-paperjam.sh`, but much more generalized.\n\n\n\nTogether, these two tools:\n\n  * add `LDFLAGS` automatically for each C library you depend on\n  * add `CFLAGS` automatically so that you can get your header files\n  * run `make`\n  * depend on clang and coreutils and bash and other core utilities so that you don't need to add them yourself\n  * set `system` to your current system\n  * let you easily add custom bash code to run at various phases of your build\n  * maybe also manage versions somehow? Not sure about this one.\n\n\n\nand probably lots more useful things I don't know about yet\n\n### let's look at the derivation for `jq`\n\nLet's look at one more compiled derivation, for `jq`. This is quite long but there are some interesting things in here. I wanted to look at this because I wanted to see what a more typical derivation generated by `stdenv.mkDerivation` looked like.\n[code] \n    $ nix show-derivation /nix/store/q9cw5rp0ibpl6h4i2qaq0vdjn4pyms3p-jq-1.6.drv\n    {\n      \"/nix/store/q9cw5rp0ibpl6h4i2qaq0vdjn4pyms3p-jq-1.6.drv\": {\n        \"outputs\": {\n          \"bin\": { \"path\": \"/nix/store/vabn35a2m2qmfi9cbym4z50bwq94fdzm-jq-1.6-bin\" },\n          \"dev\": { \"path\": \"/nix/store/akda158i8gr0v0w397lwanxns8yrqldy-jq-1.6-dev\" },\n          \"doc\": { \"path\": \"/nix/store/6qimafz8q88l90jwrzciwc27zhjwawcl-jq-1.6-doc\" },\n          \"lib\": { \"path\": \"/nix/store/3wzlsin34l1cs70ljdy69q9296jnvnas-jq-1.6-lib\" },\n          \"man\": { \"path\": \"/nix/store/dl1xf9w928jai5hvm5s9ds35l0m26m0k-jq-1.6-man\" },\n          \"out\": { \"path\": \"/nix/store/ivzm5rrr7riwvgy2xcjhss6lz55qylnb-jq-1.6\" }\n        },\n        \"inputSrcs\": [\n          \"/nix/store/6xg259477c90a229xwmb53pdfkn6ig3g-default-builder.sh\",\n          \"/nix/store/jd98q1h1rxz5iqd5xs8k8gw9zw941lj6-fix-tests-when-building-without-regex-supports.patch\"\n        ],\n        \"inputDrvs\": {\n          \"/nix/store/0lbzkxz56yhn4gv5z0sskzzdlwzkcff8-autoreconf-hook.drv\": [ \"out\" ],\n          \"/nix/store/6wh5w7hkarfcx6fxsdclmlx097xsimmg-jq-1.6.tar.gz.drv\": [ \"out\" ],\n          \"/nix/store/87a32xgqw85rxr1fx3c5j86y177hr9sr-oniguruma-6.9.8.drv\": [ \"dev\" ],\n          \"/nix/store/gkpdv7xl39x9yxch0wjarq19mmv7j1pm-bash-5.2-p15.drv\": [ \"out\" ],\n          \"/nix/store/xn1mjk78ly9wia23yvnsyw35q1mz4jqh-stdenv-darwin.drv\": [ \"out\" ]\n        },\n        \"system\": \"aarch64-darwin\",\n        \"builder\": \"/nix/store/0q1jfjlwr4vig9cz7lnb5il9rg0y1n84-bash-5.2-p15/bin/bash\",\n        \"args\": [\n          \"-e\",\n          \"/nix/store/6xg259477c90a229xwmb53pdfkn6ig3g-default-builder.sh\"\n        ],\n        \"env\": {\n          \"__darwinAllowLocalNetworking\": \"\",\n          \"__impureHostDeps\": \"/bin/sh /usr/lib/libSystem.B.dylib /usr/lib/system/libunc.dylib /dev/zero /dev/random /dev/urandom /bin/sh\",\n          \"__propagatedImpureHostDeps\": \"\",\n          \"__propagatedSandboxProfile\": \"\",\n          \"__sandboxProfile\": \"\",\n          \"__structuredAttrs\": \"\",\n          \"bin\": \"/nix/store/vabn35a2m2qmfi9cbym4z50bwq94fdzm-jq-1.6-bin\",\n          \"buildInputs\": \"/nix/store/xfnl6xqbvnpacx8hw9d99ca4mly9kp0h-oniguruma-6.9.8-dev\",\n          \"builder\": \"/nix/store/0q1jfjlwr4vig9cz7lnb5il9rg0y1n84-bash-5.2-p15/bin/bash\",\n          \"cmakeFlags\": \"\",\n          \"configureFlags\": \"--bindir=${bin}/bin --sbindir=${bin}/bin --datadir=${doc}/share --mandir=${man}/share/man\",\n          \"depsBuildBuild\": \"\",\n          \"depsBuildBuildPropagated\": \"\",\n          \"depsBuildTarget\": \"\",\n          \"depsBuildTargetPropagated\": \"\",\n          \"depsHostHost\": \"\",\n          \"depsHostHostPropagated\": \"\",\n          \"depsTargetTarget\": \"\",\n          \"depsTargetTargetPropagated\": \"\",\n          \"dev\": \"/nix/store/akda158i8gr0v0w397lwanxns8yrqldy-jq-1.6-dev\",\n          \"doCheck\": \"\",\n          \"doInstallCheck\": \"1\",\n          \"doc\": \"/nix/store/6qimafz8q88l90jwrzciwc27zhjwawcl-jq-1.6-doc\",\n          \"installCheckTarget\": \"check\",\n          \"lib\": \"/nix/store/3wzlsin34l1cs70ljdy69q9296jnvnas-jq-1.6-lib\",\n          \"man\": \"/nix/store/dl1xf9w928jai5hvm5s9ds35l0m26m0k-jq-1.6-man\",\n          \"mesonFlags\": \"\",\n          \"name\": \"jq-1.6\",\n          \"nativeBuildInputs\": \"/nix/store/ni9k35b9llfc3hys8nv5qsipw8pfy1ln-autoreconf-hook\",\n          \"out\": \"/nix/store/ivzm5rrr7riwvgy2xcjhss6lz55qylnb-jq-1.6\",\n          \"outputs\": \"bin doc man dev lib out\",\n          \"patches\": \"/nix/store/jd98q1h1rxz5iqd5xs8k8gw9zw941lj6-fix-tests-when-building-without-regex-supports.patch\",\n          \"pname\": \"jq\",\n          \"postInstallCheck\": \"$bin/bin/jq --help >/dev/null\\n$bin/bin/jq -r '.values[1]' <<< '{\\\"values\\\":[\\\"hello\\\",\\\"world\\\"]}' | grep '^world$' > /dev/null\\n\",\n          \"preBuild\": \"rm -r ./modules/oniguruma\\n\",\n          \"preConfigure\": \"echo \\\"#!/bin/sh\\\" > scripts/version\\necho \\\"echo 1.6\\\" >> scripts/version\\npatchShebangs scripts/version\\n\",\n          \"propagatedBuildInputs\": \"\",\n          \"propagatedNativeBuildInputs\": \"\",\n          \"src\": \"/nix/store/ggjlgjx2fw29lngbnvwaqr6hiz1qhy8g-jq-1.6.tar.gz\",\n          \"stdenv\": \"/nix/store/qrz2mnb2gsnzmw2pqax693daxh5hsgap-stdenv-darwin\",\n          \"strictDeps\": \"\",\n          \"system\": \"aarch64-darwin\",\n          \"version\": \"1.6\"\n        }\n      }\n    }\n    \n[/code]\n\nI thought it was interesting that some of the environment variables in here are actually bash scripts themselves - for example the `postInstallCheck` environment variable is a bash script. Those bash script environment variables are `eval`ed in the main bash script (you can [see that happening in setup.sh here](https://github.com/NixOS/nixpkgs/blob/fc2bfe1cdc910104e6df52c5dc449e8f855c66b7/pkgs/stdenv/generic/setup.sh#L61-L74))\n\nThe `postInstallCheck` environment variable in this particular derivation starts like this:\n[code] \n    $bin/bin/jq --help >/dev/null\n    $bin/bin/jq -r '.values[1]' <<< '{\"values\":[\"hello\",\"world\"]}' | grep '^world$' > /dev/null\n    \n[/code]\n\nI guess this is a test to make sure that `jq` installed correctly.\n\n### finally: clean up\n\nAll of my compiler experiments used about 3GB of disk space, but `nix-collect-garbage` cleaned up all of it.\n\n### let's recap the process!\n\nI feel like I understand Nix a bit better after going through this. I still don't feel very motivated to learn the Nix language, but now I have some idea of what Nix programs are actually doing under the hood!\n\nMy understanding is:\n\n  1. First, `.nix` files get compiled into a `.drv` file, which is mostly a bunch of inputs and outputs and environment variables. This is where the Nix language stops being relevant.\n  2. Then all the environment variables get passed to a build script, which is in charge of doing the actual build\n  3. In the Nix standard environment (`stdenv`), some of those environment variables are themselves bash code, which gets `eval`ed by the big build script `setup.sh`\n\n\n\nThat's all! I probably made some mistakes in here, but this was kind of a fun rabbit hole.\n",
        "author": "Julia Evans"
    },
    {
        "title": "Some notes on using nix",
        "link": "https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/",
        "updated": "2023-02-28T23:16:17+00:00",
        "id": "https://jvns.ca/blog/2023/02/28/some-notes-on-using-nix/",
        "guidislink": false,
        "text": "\n\nRecently I started using a Mac for the first time. The biggest downside I've noticed so far is that the package management is much worse than on Linux. At some point I got frustrated with homebrew because I felt like it was spending too much time upgrading when I installed new packages, and so I thought - maybe I'll try the [nix](https://nixos.org/) package manager!\n\nnix has a reputation for being confusing (it has its whole own programming language!), so I've been trying to figure out how to use nix in a way that's as simple as possible and does not involve managing any configuration files or learning a new programming language. Here's what I've figured out so far! We'll talk about how to:\n\n  1. install packages with nix\n  2. build a custom nix package for a C++ program called [paperjam](https://mj.ucw.cz/sw/paperjam/)\n  3. install a 5-year-old version of [hugo](https://github.com/gohugoio/hugo/) with nix\n\n\n\nAs usual I've probably gotten some stuff wrong in this post since I'm still pretty new to nix. I'm also still not sure how much I like nix - it's very confusing! But it's helped me compile some software that I was struggling to compile otherwise, and in general it seems to install things faster than homebrew.\n\n### what's interesting about nix?\n\nPeople often describe nix as \"declarative package management\". I don't care that much about declarative package management, so here are two things that I appreciate about nix:\n\n  1. It provides binary packages (hosted at <https://cache.nixos.org/>) that you can quickly download and install\n  2. For packages which don't have binary packages, it makes it easier to compile them\n\n\n\nI think that the reason nix is good at compiling software is that:\n\n  * you can have multiple versions of the same library or program installed at a time (you could have 2 different versions of libc for instance). For example I have two versions of node on my computer right now, one at `/nix/store/4ykq0lpvmskdlhrvz1j3kwslgc6c7pnv-nodejs-16.17.1` and one at `/nix/store/5y4bd2r99zhdbir95w5pf51bwfg37bwa-nodejs-18.9.1`.\n  * when nix builds a package, it builds it in isolation, using only the specific versions of its dependencies that you explicitly declared. So there's no risk that the package secretly depends on another package on your system that you don't know about. No more fighting with `LD_LIBRARY_PATH`!\n  * a lot of people have put a lot of work into writing down all of the dependencies of packages\n\n\n\nI'll give a couple of examples later in this post of two times nix made it easier for me to compile software.\n\n### how I got started with nix\n\nhere's how I got started with nix:\n\n  1. Install nix. I forget exactly how I did this, but it looks like there's an [official installer](https://nixos.org/download) and an [unofficial installer from zero-to-nix.com](https://zero-to-nix.com/concepts/nix-installer). The [instructions for uninstalling nix on MacOS with the standard multi-user install](https://nixos.org/manual/nix/stable/installation/installing-binary.html#macos) are a bit complicated, so it might be worth choosing an installation method with simpler uninstall instructions.\n  2. Put `~/.nix-profile/bin` on my PATH\n  3. Install packages with `nix-env -iA nixpkgs.NAME`\n  4. That's it.\n\n\n\nBasically the idea is to treat `nix-env -iA` like `brew install` or `apt-get install`.\n\nFor example, if I want to install `fish`, I can do that like this:\n[code] \n    nix-env -iA nixpkgs.fish\n    \n[/code]\n\nThis seems to just download some binaries from <https://cache.nixos.org> - pretty simple.\n\nSome people use nix to install their Node and Python and Ruby packages, but I haven't been doing that - I just use `npm install` and `pip install` the same way I always have.\n\n### some nix features I'm not using\n\nThere are a bunch of nix features/tools that I'm not using, but that I'll mention. I originally thought that you _had_ to use these features to use nix, because most of the nix tutorials I've read talk about them. But you don't have to use them.\n\n  * NixOS (a Linux distribution)\n  * [nix-shell](https://nixos.org/guides/nix-pills/developing-with-nix-shell.html)\n  * [nix flakes](https://nixos.wiki/wiki/Flakes)\n  * [home-manager](https://github.com/nix-community/home-manager)\n  * [devenv.sh](https://devenv.sh/)\n\n\n\nI won't go into these because I haven't really used them and there are lots of explanations out there.\n\n### where are nix packages defined?\n\nI think packages in the main nix package repository are defined in <https://github.com/NixOS/nixpkgs/>\n\nIt looks like you can search for packages at <https://search.nixos.org/packages>. The two official ways to search packages seem to be:\n\n  * `nix-env -qaP NAME`, which is very extremely slow and which I haven't been able to get to actually work\n  * `nix --extra-experimental-features 'nix-command flakes' search nixpkgs NAME`, which does seem to work but is kind of a mouthful. Also all of the packages it prints out start with `legacyPackages` for some reason\n\n\n\nI found a way to search nix packages from the command line that I liked better:\n\n  1. Run `nix-env -qa '*' > nix-packages.txt` to get a list of every package in the Nix repository\n  2. Write a short `nix-search` script that just greps `packages.txt` (`cat ~/bin/nix-packages.txt | awk '{print $1}' | rg \"$1\"`)\n\n\n\n### everything is installed with symlinks\n\nOne of nix's major design choices is that there isn't one single `bin` with all your packages, instead you use symlinks. There are a lot of layers of symlinks. A few examples of symlinks:\n\n  * `~/.nix-profile` on my machine is (indirectly) a symlink to `/nix/var/nix/profiles/per-user/bork/profile-111-link/`\n  * `~/.nix-profile/bin/fish` is a symlink to `/nix/store/afkwn6k8p8g97jiqgx9nd26503s35mgi-fish-3.5.1/bin/fish`\n\n\n\nWhen I install something, it creates a new `profile-112-link` directory with new symlinks and updates my `~/.nix-profile` to point to that directory.\n\nI think this means that if I install a new version of `fish` and I don't like it, I can easily go back just by running `nix-env --rollback` - it'll move me to my previous profile directory.\n\n### uninstalling packages doesn't delete them\n\nIf I uninstall a nix package like this, it doesn't actually free any hard drive space, it just removes the symlinks.\n[code] \n    $ nix-env --uninstall oil\n    \n[/code]\n\nI'm still not sure how to actually delete the package - I ran a garbage collection like this, which seemed to delete some things:\n[code] \n    $ nix-collect-garbage\n    ...\n    85 store paths deleted, 74.90 MiB freed\n    \n[/code]\n\nBut I still have `oil` on my system at `/nix/store/8pjnk6jr54z77jiq5g2dbx8887dnxbda-oil-0.14.0`.\n\nThere's a more aggressive version of `nix-collect-garbage` that also deletes old versions of your profiles (so that you can't rollback)\n[code] \n    $ nix-collect-garbage -d --delete-old\n    \n[/code]\n\nThat doesn't delete `/nix/store/8pjnk6jr54z77jiq5g2dbx8887dnxbda-oil-0.14.0` either though and I'm not sure why.\n\n### upgrading\n\nIt looks like you can upgrade nix packages like this:\n[code] \n    nix-channel --update\n    nix-env --upgrade\n    \n[/code]\n\n(similar to `apt-get update && apt-get upgrade`)\n\nI haven't really upgraded anything yet. I think that if something goes wrong with an upgrade, you can roll back (because everything is immutable in nix!) with\n[code] \n    nix-env --rollback\n    \n[/code]\n\nSomeone linked me to [this post from Ian Henry](https://ianthehenry.com/posts/how-to-learn-nix/my-first-package-upgrade/) that talks about some confusing problems with `nix-env --upgrade` - maybe it doesn't work the way you'd expect? I guess I'll be wary around upgrades.\n\n### next goal: make a custom package of `paperjam`\n\nAfter a few months of installing existing packages, I wanted to make a custom package with nix for a program called [paperjam](https://mj.ucw.cz/sw/paperjam/) that wasn't already packaged.\n\nI was actually struggling to compile `paperjam` at all even without nix because the version I had of `libiconv` I has on my system was wrong. I thought it might be easier to compile it with nix even though I didn't know how to make nix packages yet. And it actually was!\n\nBut figuring out how to get there was VERY confusing, so here are some notes about how I did it.\n\n### how to build an example package\n\nBefore I started working on my `paperjam` package, I wanted to build an example existing package just to make sure I understood the process for building a package. I was really struggling to figure out how to do this, but I asked in Discord and someone explained to me how I could get a working package from <https://github.com/NixOS/nixpkgs/> and build it. So here are those instructions:\n\n**step 1:** Download some arbitrary package from [nixpkgs](https://github.com/NixOS/nixpkgs/) on github, for example the `dash` package:\n[code] \n    wget https://raw.githubusercontent.com/NixOS/nixpkgs/47993510dcb7713a29591517cb6ce682cc40f0ca/pkgs/shells/dash/default.nix -O dash.nix\n    \n[/code]\n\n**step 2** : Replace the first statement (`{ lib , stdenv , buildPackages , autoreconfHook , pkg-config , fetchurl , fetchpatch , libedit , runCommand , dash }:` with `with import <nixpkgs> {};` I don't know why you have to do this, but it works.\n\n**step 3** : Run `nix-build dash.nix`\n\nThis compiles the package\n\n**step 4** : Run `nix-env -i -f dash.nix`\n\nThis installs the package into my `~/.nix-profile`\n\nThat's all! Once I'd done that, I felt like I could modify the `dash` package and make my own package.\n\n### how I made my own package\n\n`paperjam` has one dependency (`libpaper`) that also isn't packaged yet, so I needed to build `libpaper` first.\n\nHere's `libpaper.nix`. I basically just wrote this by copying and pasting from other packages in the [nixpkgs](https://github.com/NixOS/nixpkgs/) repository. My guess is what's happening here is that nix has some default rules for compiling C packages (like \"run `make install`\"), so the `make install` happens default and I don't need to configure it explicitly.\n[code] \n    with import <nixpkgs> {};\n    \n    stdenv.mkDerivation rec {\n      pname = \"libpaper\";\n      version = \"0.1\";\n    \n      src = fetchFromGitHub {\n        owner = \"naota\";\n        repo = \"libpaper\";\n        rev = \"51ca11ec543f2828672d15e4e77b92619b497ccd\";\n        hash = \"sha256-S1pzVQ/ceNsx0vGmzdDWw2TjPVLiRgzR4edFblWsekY=\";\n      };\n    \n      buildInputs = [ ];\n    \n      meta = with lib; {\n        homepage = \"https://github.com/naota/libpaper\";\n        description = \"libpaper\";\n        platforms = platforms.unix;\n        license = with licenses; [ bsd3 gpl2 ];\n      };\n    }\n    \n[/code]\n\nBasically this just tells nix how to download the source from GitHub.\n\nI built this by running `nix-build libpaper.nix`\n\nNext, I needed to compile `paperjam`. Here's a link to the [nix package I wrote](https://github.com/jvns/nixpkgs/blob/22b70a48a797538c76b04261b3043165896d8f69/paperjam.nix). The main things I needed to do other than telling it where to download the source were:\n\n  1. add some extra build dependencies (like `asciidoc`)\n  2. set some environment variables for the install (`installFlags = [ \"PREFIX=$(out)\" ];`) so that it installed in the correct directory instead of `/usr/local/bin`.\n\n\n\nI set the hashes by first leaving the hash empty, then running `nix-build` to get an error message complaining about a mismatched hash. Then I copied the correct hash out of the error message.\n\nI figured out how to set `installFlags` just by running `rg PREFIX` in the nixpkgs repository - I figured that needing to set a `PREFIX` was pretty common and someone had probably done it before, and I was right. So I just copied and pasted that line from another package.\n\nThen I ran:\n[code] \n    nix-build paperjam.nix\n    nix-env -i -f paperjam.nix\n    \n[/code]\n\nand then everything worked and I had `paperjam` installed! Hooray!\n\n### next goal: install a 5-year-old version of `hugo`\n\nRight now I build this blog using Hugo 0.40, from 2018. I don't need any new features so I haven't felt a need to upgrade. On Linux this is easy: Hugo's releases are a static binary, so I can just download the 5-year-old binary from the [releases page](https://github.com/gohugoio/hugo/releases/tag/v0.40) and run it. Easy!\n\nBut on this Mac I ran into some complications. Mac hardware has changed in the last 5 years, so the Mac Hugo binary I downloaded crashed. And when I tried to build it from source with `go build`, that didn't work either because Go build norms have changed in the last 5 years as well.\n\nI was working around this by running Hugo in a Linux docker container, but I didn't love that: it was kind of slow and it felt silly. It shouldn't be that hard to compile one Go program!\n\nNix to the rescue! Here's what I did to install the old version of Hugo with nix.\n\n### installing Hugo 0.40 with nix\n\nI wanted to install Hugo 0.40 and put it in my PATH as `hugo-0.40`. Here's how I did it. I did this in a kind of weird way, but it worked ([Searching and installing old versions of Nix packages](https://lazamar.github.io/download-specific-package-version-with-nix/) describes a probably more normal method).\n\n**step 1** : Search through the nixpkgs repo to find Hugo 0.40\n\nI found the `.nix` file here <https://github.com/NixOS/nixpkgs/blob/17b2ef2/pkgs/applications/misc/hugo/default.nix>\n\n**step 2** : Download that file and build it\n\nI downloaded that file (and another file called `deps.nix` in the same directory), replaced the first line with `with import <nixpkgs> {};`, and built it with `nix-build hugo.nix`.\n\nThat almost worked without any changes, but I had to make two changes:\n\n  * replace `with stdenv.lib` to `with lib` for some reason.\n  * rename the package to `hugo040` so that it wouldn't conflict with the other version of `hugo` that I had installed\n\n\n\n**step 3** : Rename `hugo` to `hugo-0.40`\n\nI write a little post install script to rename the Hugo binary.\n[code] \n      postInstall = ''\n        mv $out/bin/hugo $out/bin/hugo-0.40\n      '';\n    \n[/code]\n\nI figured out how to run this by running `rg 'mv '` in the nixpkgs repository and just copying and modifying something that seemed related.\n\n**step 4** : Install it\n\nI installed into my `~/.nix-profile/bin` by running `nix-env -i -f hugo.nix`.\n\nAnd it all works! I put the final `.nix` file into my own personal [nixpkgs repo](https://github.com/jvns/nixpkgs/) so that I can use it again later if I want.\n\n### reproducible builds aren't magic, they're really hard\n\nI think it's worth noting here that this `hugo.nix` file isn't magic - the reason I can easily compile Hugo 0.40 today is that many people worked for a long time to make it possible to package that version of Hugo in a reproducible way.\n\n### that's all!\n\nInstalling `paperjam` and this 5-year-old version of Hugo were both surprisingly painless and actually much easier than compiling it without nix, because nix made it much easier for me to compile the `paperjam` package with the right version of `libiconv`, and because someone 5 years ago had already gone to the trouble of listing out the exact dependencies for Hugo.\n\nI don't have any plans to get much more complicated with nix (and it's still very possible I'll get frustrated with it and go back to homebrew!), but we'll see what happens! I've found it much easier to start in a simple way and then start using more features if I feel the need instead of adopting a whole bunch of complicated stuff all at once.\n\nI probably won't use nix on Linux - I've always been happy enough with `apt` (on Debian-based distros) and `pacman` (on Arch-based distros), and they're much less confusing. But on a Mac it seems like it might be worth it. We'll see! It's very possible in 3 months I'll get frustrated with nix and just go back to homebrew.\n\n### 5-month update: rebuilding my nix profile\n\nUpdate from 5 months in: nix is still going well, and I've only run into 1 problem, which is that every `nix-env -iA` package installation started failing with the error \"bad meta.outputsToInstall\".\n\n[This script](https://github.com/zombiezen/dotfiles/blob/main/nix/nix-rebuild-profile/nix-rebuild-profile.sh) from Ross Light fixes that problem though. It lists every derivation installed in my current profile and creates a new profile with the exact same derivations. This feels like a nix bug (surely creating a new profile with the exact same derivations should be a no-op?) but I haven't looked into it more yet.\n",
        "author": "Julia Evans"
    },
    {
        "title": "Writing Javascript without a build system",
        "link": "https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/",
        "updated": "2023-02-16T12:56:02+00:00",
        "id": "https://jvns.ca/blog/2023/02/16/writing-javascript-without-a-build-system/",
        "guidislink": false,
        "text": "\n\nHello! I've been writing some Javascript this week, and as always when I start a new frontend project, I was faced with the question: should I use a build system?\n\nI want to talk about what's appealing to me about build systems, why I (usually) still don't use them, and why I find it frustrating that some frontend Javascript libraries require that you use a build system.\n\nI'm writing this because most of the writing I see about JS assumes that you're using a build system, and it can be hard to navigate for folks like me who write very simple small Javascript projects that don't require a build system.\n\n### what's a build system?\n\nThe idea is that you have a bunch of Javascript or Typescript code, and you want to translate it into different Javascript code before you put it on your website.\n\nBuild systems can do lots of useful things, like:\n\n  * combining 100s of JS files into one big bundle (for efficiency reasons)\n  * translating Typescript into Javascript\n  * typechecking Typescript\n  * minification\n  * adding polyfills to support older browsers\n  * compiling JSX\n  * treeshaking (remove unused JS code to reduce file sizes)\n  * building CSS (like [tailwind](https://tailwindcss.com/) does)\n  * and probably lots of other important things\n\n\n\nBecause of this, if you're building a complex frontend project today, probably you're using a build system like webpack, rollup, esbuild, parcel, or vite.\n\nLots of those features are appealing to me, and I've used build systems in the past for some of these reasons: [Mess With DNS](https://messwithdns.net/) uses `esbuild` to translate Typescript and combine lots of files into one big file, for example.\n\n### the goal: easily make changes to old tiny websites\n\nI make a lot [of](https://css-examples.wizardzines.com/) [small](https://questions.wizardzines.com) [simple](https://sql-playground.wizardzines.com/) [websites](https://nginx-playground.wizardzines.com/), I have approximately 0 maintenance energy for any of them, and I change them very infrequently.\n\nMy goal is that if I have a site that I made 3 or 5 years ago, I'd like to be able to, in 20 minutes:\n\n  * get the source from github on a new computer\n  * make some changes\n  * put it on the internet\n\n\n\nBut my experience with build systems (not just Javascript build systems!), is that if you have a 5-year-old site, often it's a huge pain to get the site built again.\n\nAnd because most of my websites are pretty small, the _advantage_ of using a build system is pretty small - I don't really need Typescript or JSX. I can just have one 400-line `script.js` file and call it a day.\n\n### example: trying to build the SQL playground\n\nOne of my sites (the [sql playground](https://sql-playground.wizardzines.com/)) uses a build system (it's using Vue). I last edited that project 2 years ago, on a different machine.\n\nLet's see if I can still easily build it today on my machine. To start out, we have to run `npm install`. Here's the output I get.\n[code] \n    $ npm install\n    [lots of output redacted]\n    npm ERR! code 1\n    npm ERR! path /Users/bork/work/sql-playground.wizardzines.com/node_modules/grpc\n    npm ERR! command failed\n    npm ERR! command sh /var/folders/3z/g3qrs9s96mg6r4dmzryjn3mm0000gn/T/install-b52c96ad.sh\n    npm ERR! CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/surface/init.o\n    npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/avl/avl.o\n    npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/backoff/backoff.o\n    npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_args.o\n    npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_stack.o\n    npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_stack_builder.o\n    npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channel_trace.o\n    npm ERR!   CXX(target) Release/obj.target/grpc/deps/grpc/src/core/lib/channel/channelz.o\n    \n[/code]\n\nThere's some kind of error building `grpc`. No problem. I don't really need that dependency anyway, so I can just take 5 minutes to tear it out and rebuild. Now I can `npm install` and everything works.\n\nNow let's try to build the project:\n[code] \n    $ npm run build\n      ?  Building for production...Error: error:0308010C:digital envelope routines::unsupported\n        at new Hash (node:internal/crypto/hash:71:19)\n        at Object.createHash (node:crypto:130:10)\n        at module.exports (/Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/util/createHash.js:135:53)\n        at NormalModule._initBuildHash (/Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:414:16)\n        at handleParseError (/Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:467:10)\n        at /Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:499:5\n        at /Users/bork/work/sql-playground.wizardzines.com/node_modules/webpack/lib/NormalModule.js:356:12\n        at /Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:373:3\n        at iterateNormalLoaders (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:214:10)\n        at iterateNormalLoaders (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:221:10)\n        at /Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:236:3\n        at runSyncOrAsync (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:130:11)\n        at iterateNormalLoaders (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:232:2)\n        at Array.<anonymous> (/Users/bork/work/sql-playground.wizardzines.com/node_modules/loader-runner/lib/LoaderRunner.js:205:4)\n        at Storage.finished (/Users/bork/work/sql-playground.wizardzines.com/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:43:16)\n        at /Users/bork/work/sql-playground.wizardzines.com/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:79:9\n    \n[/code]\n\n[This stack overflow answer](https://stackoverflow.com/questions/69692842/error-message-error0308010cdigital-envelope-routinesunsupported) suggests running `export NODE_OPTIONS=--openssl-legacy-provider` to fix this error.\n\nThat works, and finally I can `npm run build` to build the project.\n\nThis isn't really that bad (I only had to remove a dependency and pass a slightly mysterious node option!), but I would rather not be derailed by those build errors.\n\n### for me, a build system isn't worth it for small projects\n\nFor me, a complicated Javascript build system just doesn't seem worth it for small 500-line projects - it means giving up being able to easily update the project in the future in exchange for some pretty marginal benefits.\n\n### esbuild seems a little more stable\n\nI want to give a quick shoutout to esbuild: I [learned about esbuild in 2021](https://jvns.ca/blog/2021/11/15/esbuild-vue/) and used for a project, and so far it does seem a more reliable way to build JS projects.\n\nI just tried to build an `esbuild` project that I last touched 8 months ago on a new computer, and it worked. But I can't say for sure if I'll be able to easily build that project in 2 years. Maybe it will, I hope so!\n\n### not using a build system is usually pretty easy\n\nHere's what the part of [nginx playground](https://nginx-playground.wizardzines.com/) code that imports all the libraries looks like:\n[code] \n    <script src=\"js/vue.global.prod.js\"></script>\n    <script src=\"codemirror-5.63.0/lib/codemirror.js\"></script>\n    <script src=\"codemirror-5.63.0/mode/nginx/nginx.js\"></script>\n    <script src=\"codemirror-5.63.0/mode/shell/shell.js\"></script>\n    <script src=\"codemirror-5.63.0/mode/javascript/javascript.js\"></script>\n    <link rel=\"stylesheet\" href=\"codemirror-5.63.0/lib/codemirror.css\">\n    <script src=\"script.js \"></script>\n    \n[/code]\n\nThis project is also using Vue, but it just uses a `<script src` to load Vue - there's no build process for the frontend.\n\n### a no-build-system template for using Vue\n\nA couple of people asked how to get started writing Javascript without a build system. Of course you can write vanilla JS if you want, but my usual framework is Vue 3.\n\n[Here's a tiny template I built](https://github.com/jvns/vue3-tiny-template) for starting a Vue 3 project with no build system. It's just 2 files and ~30 lines of HTML/JS.\n\n### some libraries require you to use a build system\n\nThis build system stuff is on my mind recently because I'm using CodeMirror 5 for a new project this week, and I saw there was a new version, CodeMirror 6.\n\nSo I thought - cool, maybe I should use CodeMirror 6 instead of CodeMirror 5. But - it seems like you can't use CodeMirror 6 without a build system (according to [the migration guide](https://codemirror.net/docs/migration/)). So I'm going to stick with CodeMirror 5.\n\nSimilarly, you used to be able to just download Tailwind as a giant CSS file, but [Tailwind 3](https://tailwindcss.com/docs/installation) doesn't seem to be available as a big CSS file at all anymore, you need to run Javascript to build it. So I'm going to keep using Tailwind 2 for now. (I know, I know, you're not supposed to use the big CSS file, but it's only 300KB gzipped and I really don't want a build step)\n\n(edit: it looks like Tailwind released a [standalone CLI](https://tailwindcss.com/blog/standalone-cli) in 2021 which seems like a nice option)\n\nI'm not totally sure why some libraries don't provide a no-build-system version - maybe distributing a no-build-system version would add a lot of additional complexity to the library, and the maintainer doesn't think it's worth it. Or maybe the library's design means that it's not possible to distribute a no-build-system version for some reason.\n\n### I'd love more tips for no-build-system javascript\n\nMy main strategies so far are:\n\n  * search for \"CDN\" on a library's website to find a standalone javascript file\n  * use <https://unpkg.com> to see if the library has a built version I can use\n  * host my own version of libraries instead of relying on a CDN that might go down\n  * write my own simple integrations instead of pulling in another dependency (for example I wrote my own CodeMirror component for Vue the other day)\n  * if I want a build system, use esbuild\n\n\n\nA couple of other things that look interesting but that I haven't looked into:\n\n  * this [typescript proposal for type syntax in Javascript comments](https://devblogs.microsoft.com/typescript/a-proposal-for-type-syntax-in-javascript/)\n  * ES modules generally\n\n\n",
        "author": "Julia Evans"
    },
    {
        "title": "Print copies of The Pocket Guide to Debugging have arrived",
        "link": "https://jvns.ca/blog/2023/02/11/print-copies-of-the-pocket-guide-to-debugging-have-arrived/",
        "updated": "2023-02-11T09:12:11+00:00",
        "id": "https://jvns.ca/blog/2023/02/11/print-copies-of-the-pocket-guide-to-debugging-have-arrived/",
        "guidislink": false,
        "text": "\n\nHello! We [released The Pocket Guide to Debugging](https://jvns.ca/blog/2022/12/21/new-zine--the-pocket-guide-to-debugging/) back in December, and here's a final update: the print copies are done printing and they've arrived at the warehouse, ready to ship to anyone who wants one.\n\nYou can [buy the print or PDF version](https://wizardzines.com/zines/debugging-guide) now, and if you preordered it, your copy should already have shipped. Some people have told me that they already received theirs! Email me if you haven't gotten the shipping confirmation.\n\n### some pictures\n\nHere are some photos of what the print version looks like:\n\n### what was involved in printing it\n\nIn case anyone is interested, here's what was involved in putting together the print version:\n\n  1. Make a PDF copy that people can print on their home printer (with a 360-line Python program)\n  2. Test on my home printer that the \"print at home version\" prints properly\n  3. Release the \"print at home\" version (this was back in December)\n  4. Take a couple of weeks off, since it's the end of the year\n  5. Ask the illustrator to make a back cover\n  6. Get a quote from the print company\n  7. Agonize a bit over whether to print the zine as perfect bound or saddle stitched (stapled). Pick perfect bound.\n  8. Find out from the print company how wide the spine has to be\n  9. With the help of the illustrator, make a design for the spine.\n  10. Get an ISBN number (just a couple of clicks at [Libraries and Archives Canada](https://library-archives.canada.ca/))\n  11. Get a bar code for the ISBN (from [bookow](https://bookow.com/resources.php#isbn-barcode-generator)), edit it to make it a little smaller, and put it on the back cover\n  12. Send the new PDF to the print company and request a print proof\n  13. Wait a week or so for the proof to get shipped across the continent\n  14. Once the proof arrives, realize that the inner margins are too small, because it was perfect bound and perfect bound books need bigger margins (We'd already tried to account for that, but we didn't make them big enough)\n  15. Measure various books I have around the house and print some new sample pages to figure out the right margins\n  16. Painstakingly manually readjust every single page to have slightly different proportions, so that I can increase the margins\n  17. Edit the Python script to make a new PDF with the bigger margins\n  18. Send the final files to the print company\n  19. Wait a week for them to print 1500 copies\n  20. The print copies arrive at the warehouse!\n  21. Wait another 3 business days for the (amazing) folks who do the shipping to send out all 700 or so preorders\n  22. Success!\n\n\n\nPrinting 1500 copies of something is always a little scary, but I'm really happy with how it turned out.\n\n### thanks so much to everyone who preordered!\n\nIf you preordered the print version, thanks so much for your patience - having the preorders really helps me decide how many to print.\n\nAnd please let me know if something went wrong - 1 or 2 packages always get lost in the mail and while I can't help find them, it's very easy for me to just ship you another one :)\n",
        "author": "Julia Evans"
    }
]